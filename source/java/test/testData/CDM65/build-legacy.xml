<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?>
<!-- ================================================================ -->
<!-- nike.net build file                                              -->
<!-- The three build files for the server are as follows:                      -->
<!--     build.xml - used to build/distribute/run the CDM app or legacy app    -->
<!--                 on Windev.  Not for server distribution.                  -->
<!--     build-main.xml - used to create/configure/install the "external"      -->
<!--                      (outside cdm-main) data directory (cdm-main-data)    -->
<!--     build-server.xml - used for configuring the Weblogic domain and       -->
<!--                        "installing" CDM into that domain                  -->
<!--     build-batch.xml - used to create the "external" (outside cdm-batch)   -->
<!--                       data directory (cdm-batch-data)                     -->
<!--                                                                           -->
<!-- Ant docs:  http://jakarta.apache.org/ant/manual/                 -->
<!-- ================================================================ -->
<project name="cdm-legacy" default="info">

    <target name="info">
        <echo>
Usage: build [targets], where [targets] are as follows:

  clean         Cleans up the build environment.  Cleans out the classes and all deploy directories,
                and does some ClearCase housekeeping (gets rid of .keep files and the like).
  clean-all     Clean out the entire build.
  clean-docs    Cleans the docs directory.
  clean-coverage Cleans the coverage data directory (not the generated html report, however).
  clean-tests   Cleans the test directory.
  clean-build   Cleans the build directory.
  clean-deploy  Cleans the deploy directory.
  clean-domain  Cleans the domain directory.
  compile       Compile all of the code
  deploy        Deploys the application.
  dist          Tars the entire project up for copying to the dev (default) server
  dist-qa       Tars the entire project up for copying to the qa server
  configure     Performs environment configuration on files which need it.
  junitreport   Generates a test report for previously run JUnit tests.
  test          Run ALL the unit tests.  This will also run the JunitReport subtask to format the unit test
                results for viewing.
  test-single   Excercise a single test. You should call the "runTest.cmd" script wrapper for this:
                "runTest Testname"
  doc           Generate doccheck and javadoc
  index         Build a build index page
        </echo>
    </target>

    <!-- read in the common configuration files for all CDM build scripts       -->
    <import file="build.xml"/>
    <import file="build_dir.xml"/>
    <import file="build_properties.xml"/>
    <import file="build_paths.xml"/>
    <import file="build_taskdefs.xml"/>
    <import file="build_tools.xml"/>
    <import file="build_cc.xml"/>
    <import file="build_dist.xml"/>
    <import file="build_clean.xml"/>

    <!--This is called by all targets prior to execution-->
    <!-- depends="properties,paths,taskdefs" -->
    <target name="legacy-init" depends="legacy-pre-init,init" unless="legacy.init.done">
        <property name="legacy.property.file.name" value="${build.dir}/build-legacy.properties"/>
        <property file="${legacy.property.file.name}"/>

        <property name="legacy.dir" value="${base.dir}/legacy"/>
        <property name="legacy.lib" value="${legacy.dir}/lib"/>
        <property name="legacy.src" value="${legacy.dir}/src"/>
        <property name="legacy.test" value="${legacy.dir}/test"/>
        <property name="legacy.integrationTest" value="${legacy.dir}/integrationTest"/>
        <property name="legacy.conf" value="${legacy.dir}/conf"/>
        <property name="legacy.output" value="${legacy.output}"/>
        <property name="legacy.docs" value="${legacy.output}/docs"/>
        <property name="deploy.location" value="${legacy.build}/"/>
        <property name="legacy.classes" value="${legacy.output}/classes"/>
        <property name="legacy.test-classes" value="${legacy.output}/test_classes"/>
        <property name="legacy.integration-test-classes" value="${legacy.output}/integration_classes"/>
        <path id="legacy.lib.path">
            <!--            stuff for CDM-->
            <!-- java runtime needed by jikes compiler -->
            <pathelement location="${java.home}/lib/rt.jar"/>
            <!-- http://www.jdom.org/ -->
            <pathelement location="${lib}/jdom.jar"/>
            <!-- http://jakarta.apache.org/log4j/ -->
            <!-- new net.nike classes use the new log4j, legacy uses the old log4j-->
            <!--            <pathelement location="${lib}/newlog4j.jar"/>-->
            <pathelement location="${lib}/log4j.jar"/>
            <!-- http://www.junit.org/ -->
            <pathelement location="${lib}/testing/junit.jar"/>
            <!-- weblogic -->
            <pathelement location="${lib}/weblogic.jar"/>
            <!-- http://xml.apache.org/ -->
            <pathelement location="${lib}/xercesImpl.jar"/>
            <!-- http://www.oracle.com -->
            <pathelement location="${lib}/ojdbc14.jar"/>
            <!-- http://www-3.ibm.com/software/data/informix/tools/jdbc/ -->
            <pathelement location="${lib}/informix.jar"/>

            <!--  Commons stuff - http://jakarta.apache.org/commons -->
            <pathelement location="${lib.commons}/commons-lang.jar"/>
            <pathelement location="${lib.commons}/commons-collections.jar"/>
            <pathelement location="${lib.commons}/commons-beanutils.jar"/>
            <pathelement location="${lib.commons}/commons-logging.jar"/>

            <!-- http://www.enterprisedt.com/downloads/ftp.html -->
            <pathelement location="${lib}/ftp.jar"/>

            <!-- located locally at nike \\Beavertn-svr-e1\eBiz$\B2C\shared\latest\lib : note this url points to the latest version of the file -->
            <pathelement location="${lib}/shared.jar"/>

            <pathelement location="${lib}/nikenet-global.jar"/>
            <pathelement location="${lib}/xineo-xml-1.1.0.jar"/>

            <pathelement location="${lib}/ant.jar"/>
            <pathelement location="${lib}/optional.jar"/>
        </path>

        <path id="legacy.config.path" location="${legacy.generated.conf}"/>

        <path id="legacy.class.path">
            <pathelement location="${legacy.classes}"/>
            <path refid="legacy.config.path"/>
        </path>

        <path id="legacy.class.lib.path">
            <path refid="legacy.class.path"/>
            <path refid="legacy.lib.path"/>
        </path>
        <path id="legacy.lib.weblogic.path">
            <path refid="legacy.lib.path"/>
            <path refid="weblogic.path"/>
        </path>
        <path id="legacy.class.lib.weblogic.path">
            <path refid="legacy.class.path"/>
            <path refid="legacy.lib.weblogic.path"/>
        </path>

        <filterset id="legacyCdmFilterSet" begintoken="@" endtoken="@">
            <filter token="SERVER_NAME" value="%%cdm.host%%"/>
            <filter token="EJB_PORT_NUMBER_BATCH_MAIN" value="%%cdm-main.weblogic.port%%"/>
            <filter token="CDM_ENVIRONMENT" value="%%role%%"/>
            <filter token="CPRODPROD_NAME" value="%%cprodprd.name%%"/>
            <filter token="cdm.batch.datadir" value="${cdm.batch.datadir}"/>
        </filterset>

        <filterset id="legacyCdmServerFilterSet" begintoken="@" endtoken="@">
            <filter token="SERVER_NAME" value="%%cdm.host%%"/>
            <filter token="EJB_PORT_NUMBER_BATCH_MAIN" value="%%cdm-main.weblogic.port%%"/>
            <filter token="CDM_ENVIRONMENT" value="%%role%%"/>
            <filter token="CPRODPROD_NAME" value="%%cprodprd.name%%"/>
            <filter token="cdm.batch.datadir" value="%%cdm-batch-data.approot%%"/>
        </filterset>

        <echo message="  propertyfilename   = ${legacy.property.file.name}"/>
        <echo message="  basedir            = ${base.dir}"/>
        <echo message="  legacy.output      = ${legacy.output}"/>
        <echo message="  legacy.build       = ${legacy.build}"/>
        <echo message="  legacy.deploy      = ${legacy.deploy}"/>
        <property name="legacy.init.done" value="true"/>
    </target>

    <macrodef name="run-environment-tool">
        <attribute name="base.dir"/><!-- the "root" of the VOB containing, among others, the "build," "src" and "conf" directories -->
        <attribute name="working.dir"/><!-- the directory containing the files to operate on. -->
        <attribute name="envtool.location"/>
        <attribute name="envstore.location"/>
        <attribute name="envtool.key"/>
        <attribute name="envtool.log"/>
        <sequential>
            <!--        Call env-config -->
            <echo message="working.dir=@{working.dir}"/>
            <exec executable="@{base.dir}/bin/envtool.bat" failonerror="true">
                <arg value="@{working.dir}"/>
                <arg path="@{base.dir}/@{envtool.location}"/>
                <arg value="@{envstore.location}"/>
                <arg value="@{envtool.key}"/>
                <arg value="@{envtool.log}"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="legacy-pre-init" unless="legacy.pre.init.done">
        <property file="${basedir}/mybuild.properties"/>
        <property name="property.file.name" value="${basedir}/build.properties"/>
        <property file="${property.file.name}"/>
        <!--    note that this slash MUST be a back slash for the envtool to work on windows-->
        <!--    We need this to be a generated configuration file so as to get the correct properties from envstore-->
        <property name="legacy.generated.conf" value="${basedir}\..\legacy\genconf"/>
        <property name="legacy.conf" value="${basedir}\..\legacy\conf"/>
        <copy todir="${legacy.generated.conf}" overwrite="true" filtering="true"><!--won't overwrite generated files unless set to "true"-->
            <fileset dir="${legacy.conf}/multiconfig" includes="**/env.properties"/>
        </copy>
        <run-environment-tool base.dir="${basedir}\.." working.dir="${legacy.generated.conf}" envtool.location="${envtool.location}" envstore.location="${envstore.location}" envtool.key="${envtool.key}" envtool.log="${envtool.log}"/>
        <property name="legacy.env.property.file.name" value="${legacy.generated.conf}/env.properties"/>
        <property file="${legacy.env.property.file.name}"/>

        <property name="legacy.pre.init.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Configures the  configurable resources.                 -->
    <!-- ======================================================= -->
    <target name="legacy-configure" depends="legacy-init,configure" unless="legacy.configure.done">
        <echo>Configuring legacy build</echo>
        <delete dir="${legacy.generated.conf}" quiet="true"/>

        <!--   copy templated config files to genconf   -->
        <copy todir="${legacy.generated.conf}" overwrite="true"><!--won't overwrite generated files unless set to "true"-->
            <filterset refid="legacyCdmFilterSet"/>
            <fileset dir="${legacy.conf}/multiconfig" includes="**/*.xml,**/*.properties"/>
        </copy>

        <run-environment-tool base.dir="${base.dir}" working.dir="${legacy.generated.conf}" envtool.location="${envtool.location}" envstore.location="${envstore.location}" envtool.key="${envtool.key}" envtool.log="${envtool.log}"/>

        <!--   copy non-templated config files to genconf - this way genconf is the only location for all configuration files  -->
        <copy todir="${legacy.generated.conf}" overwrite="true">
            <fileset dir="${legacy.conf}/resource" includes="**/*.xml,**/*.dtd,**/*.properties"/>
        </copy>

        <copy todir="${legacy.generated.conf}" overwrite="true">
            <fileset dir="${legacy.conf}/test" includes="**/*.xml,**/*.dtd,**/*.properties"/>
        </copy>

        <property name="legacy.configure.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans up the build environment.  Like 'clean', but also deletes the entire output directory.
        Run 'configure' and 'deploy' afterwards.                        -->
    <!-- ======================================================= -->
    <target name="legacy-clean-all" depends="legacy-clean" unless="legacy.clean.all.done"
        description="Deletes the entire output directory.">
        <delete dir="${legacy.output}"/>
        <mkdir dir="${legacy.output}"/>

        <mkdir dir="${legacy.classes}"/>
        <mkdir dir="${legacy.test-classes}"/>
        <mkdir dir="${legacy.integration-test-classes}"/>
        <mkdir dir="${legacy.deploy}"/>
        <mkdir dir="${legacy.build}"/>
        <mkdir dir="${legacy.docs}"/>
        <mkdir dir="${legacy.docs}/test"/>

        <property name="legacy.clean.all.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans up the build environment.  Cleans out the classes and all deploy directories,
        and does some ClearCase housekeeping (gets rid of .keep files and the like)                       -->
    <!-- ======================================================= -->
    <target name="legacy-clean" depends="legacy-init,legacy-clean-deploy,legacy-clean-build" unless="legacy.clean.done"
        description="Cleans up the build environment.">
        <echo> dir="${legacy.classes}"</echo>
        <echo> dir="${legacy.deploy}"</echo>
        <echo> dir="${legacy.build}"</echo>
        <echo> dir="${base.dir}/[ClearCase 'keep' files, etc.]"</echo>
        <delete dir="${legacy.classes}" quiet="true"/>

        <mkdir dir="${legacy.classes}"/>
        <mkdir dir="${legacy.test-classes}"/>
        <mkdir dir="${legacy.integration-test-classes}"/>
        <mkdir dir="${legacy.deploy}"/>
        <mkdir dir="${legacy.build}"/>
        <mkdir dir="${legacy.docs}"/>
        <mkdir dir="${legacy.docs}/test"/>

        <delete>
            <fileset dir="${base.dir}">
                <include name="**/*.contrib*"/>
                <include name="**/*.keep*"/>
                <include name="**/*.log"/>
                <include name="**/*.bak"/>
            </fileset>
        </delete>
        <!--        <make-dirs/> -->
        <property name="legacy.clean.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the deploy directory                             -->
    <!-- ======================================================= -->
    <target name="legacy-clean-deploy" depends="legacy-init" unless="legacy.clean.deploy"
        description="Cleans the deploy directory">
        <delete dir="${legacy.deploy}"/>
        <mkdir dir="${legacy.deploy}"/>
        <property name="legacy.clean.deploy" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the build directory                              -->
    <!-- ======================================================= -->
    <target name="legacy-clean-build" depends="legacy-init" unless="legacy.clean.build"
        description="Cleans the build directory">
        <delete dir="${legacy.build}"/>
        <mkdir dir="${legacy.build}"/>
        <property name="legacy.clean.build" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the docs directory                               -->
    <!-- ======================================================= -->
    <target name="legacy-clean-docs" depends="legacy-init" unless="legacy.clean.docs"
        description="Cleans the docs directory">
        <delete dir="${legacy.docs}"/>
        <mkdir dir="${legacy.docs}"/>
        <property name="legacy.clean.docs" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the tests directory                               -->
    <!-- ======================================================= -->
    <target name="legacy-clean-tests" depends="legacy-init" unless="legacy.clean.tests"
        description="Cleans the tests directory">
        <delete dir="${legacy.docs}/test"/>
        <mkdir dir="${legacy.docs}/test"/>
        <property name="legacy.clean.tests" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Creates build directories                               -->
    <!-- ======================================================= -->
    <target name="legacy-dir" depends="legacy-init" unless="legacy.dir.done">
        <ant antfile="build.xml" target="dir" inheritall="false" inheritrefs="false"/>
        <mkdir dir="${legacy.classes}"/>
        <mkdir dir="${legacy.test-classes}"/>
        <mkdir dir="${legacy.integration-test-classes}"/>
        <property name="legacy.dir.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Compiles the java classes.   Uses build.properties to determine compiler - Jikes or 'Modern'                               -->
    <!-- ======================================================= -->
    <target name="legacy-compile" depends="legacy-init,legacy-set-combined-classpath,legacy-dir" unless="legacy.compile.done"
        description="Compiles the java classes.">
        <javac srcdir="${legacy.src}"
            destdir="${legacy.classes}"
            includeAntRuntime="false"
            debug="${compile.debug}"
            debugLevel="${compile.debug.level}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            classpathref="combined.class.path"/>
        <property name="legacy.compile.done" value="true"/>
    </target>

    <target name="legacy-compile-test" depends="legacy-init,legacy-set-combined-classpath,legacy-dir,legacy-compile" unless="legacy.compile-test.done">
        <javac srcdir="${legacy.test}"
            destdir="${legacy.test-classes}"
            includeAntRuntime="false"
            debug="${compile.debug}"
            debugLevel="${compile.debug.level}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            classpathref="legacy.class.test.path"/>
        <property name="legacy.compile-test.done" value="true"/>
    </target>

    <target name="legacy-compile-integration" depends="legacy-init,legacy-set-combined-classpath,legacy-dir,legacy-compile-test" unless="legacy.compile-integration.done">
        <javac srcdir="${legacy.integrationTest}"
            destdir="${legacy.integration-test-classes}"
            includeAntRuntime="false"
            debug="${compile.debug}"
            debugLevel="${compile.debug.level}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            classpathref="legacy.class.integration.test.path"/>
        <property name="legacy.compile-integration.done" value="true"/>
    </target>

    <target name="legacy-set-combined-classpath" depends="legacy-init,legacy-create-main-project-jar" unless="set.combined.classpath.done">
        <available file="${classes}/net/nike/cdm" type="dir" property="main.project.compiled"/>
        <echo>Looking for ${classes}/net/nike/cdm...</echo>
        <fail message="Legacy code is dependent upon the main CDM project, which must be compiled before running this build." unless="main.project.compiled"/>
        <antcall target="legacy-create-main-project-jar" inheritall="true" inheritrefs="true"/>
        <path id="combined.class.path">
            <path refid="legacy.class.lib.weblogic.path"/>
            <pathelement location="${legacy.classes}"/>
        </path>
        <path id="legacy.class.test.path">
            <pathelement location="${legacy.test-classes}"/>
            <pathelement location="${legacy.test.data.output}"/>
            <pathelement location="${legacy.generated.conf}"/>
            <pathelement location="${classes}"/>
            <pathelement location="${base.dir}/web"/>
            <path refid="combined.class.path"/>
        </path>
        <path id="legacy.class.integration.test.path">
            <pathelement location="${legacy.integration-test-classes}"/>
            <path refid="legacy.class.test.path"/>
            <path refid="weblogic.path"/>
            <path refid="legacy.config.path"/>
            <pathelement location="${output}/classes"/>
            <pathelement location="${output}/test_classes"/>
            <pathelement location="${output}/integration_classes"/>
            <path refid="lib.path"/>
            <path refid="config.path"/>
        </path>

        <property name="set.combined.classpath.done" value="true"/>
    </target>

    <target name="main-compile" unless="main.compile.done"
        description="Compiles the main java classes.">
        <ant antfile="build.xml" target="compile" inheritall="false" inheritrefs="false"/>
        <property name="main.compile.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!--    Creates a jar of classes from the main project that are needed by legacy code-->
    <!-- ======================================================= -->
    <target name="legacy-create-main-project-jar" depends="legacy-init,main-compile" unless="create.main.project.jar.done">
        <echo>mkdir dir="${legacy.classes}"</echo>
        <mkdir dir="${legacy.classes}"/>
        <!--        <delete file="${output}/classes/mainproject.jar"/>-->
        <!--        <jar update="false" index="true" destfile="${output}/classes/mainproject.jar">-->
        <copy todir="${legacy.classes}">
            <fileset dir="${classes}">
                <include name="**/*.*"/>
                <exclude name="**/*.sh"/>
                <!--                <include name="**/BaselineReader.class"/>-->
                <!--                <include name="net/nike/cdm/batch/JmsSettings.class"/>-->
                <!--                <include name="net/nike/cdm/domain/workflow/requests/*.class"/>-->
                <!--                <include name="net/nike/cdm/util/ConfigurationException.class"/>-->
                <!--                <include name="**/WorkFlowEmailJob.class"/>-->
                <!--                <include name="**/PersistenceException.class"/>-->
                <!--                <include name="**/ExportCatalogs.class"/>-->
                <!--                <include name="**/CatalogPriceRefresher.class"/>-->
                <!--                <include name="**/PdfGeneratorDriver.class"/>-->
                <!--                <include name="net/nike/cdm/domain/common/GenericDomainException.class"/>-->
                <!--                <exclude name="**/WorkFlowRequestVisitor.class"/>-->
                <!--                <exclude name="**/*Test.class"/>-->
                <!--                <exclude name="**/Mock*.class"/>-->
            </fileset>
        </copy>
        <property name="create.main.project.jar.done" value="true"/>
    </target>

    <target name="deploy-main-project" unless="main.project.deployed">
        <ant antfile="build.xml" target="deploy" inheritall="false" inheritrefs="false"/>
    </target>

    <!-- Create the build's info file and read its results into properties. -->
    <target name="legacy-build-info" depends="legacy-compile" unless="legacy.build.info.done">
        <mkdir dir="${deploy.location}"/>
        <!-- Collect baseline data from clearcase. -->
        <exec executable="C:\Program Files\Rational\Clearcase\bin\cleartool"
            os="Windows 2000"
            output="${legacy.build}/${baselinefile}">
            <arg value="lsbl"/>
            <arg value="-fmt"/>
            <arg value="%n\t%Fu\t%d\n"/>
            <arg value="-stream"/>
            <arg value="${baselinestream}"/>
        </exec>
        <java classname="net.nike.build.ant.task.BaselineReader">
            <arg value="${deploy.location}/"/>
            <arg value="${buildinfo}"/>
            <arg value="${legacy.build}/${baselinefile}"/>
            <classpath refid="combined.class.path"/>
            <classpath path="${ant}/lib/ant.jar"/>
            <!--            <classpath path="../${lib.ant}/optional.jar"/>-->
        </java>
        <property file="${deploy.location}/${buildinfo}"/>
        <echo>in build-info: BaselineName is ${BaselineName}</echo>
        <property name="legacy.build.info.done" value="true"/>
    </target>

    <!--    Note - this doesn't seem to work too well right now....-->
    <!--Run ALL the unit tests.  This will also run the JunitReport subtask to format the unit test results for viewing."-->
    <target name="legacy-test" depends="legacy-clean-tests,legacy-dir,legacy-compile-test,legacy-configure" unless="legacy.test.done">
        <mkdir dir="${legacy.docs}/test"/>
        <echo>
            Running unit tests: junit dir="${legacy.test-classes}", fileset dir="${legacy.test-classes}"
        </echo>
        <junit failureproperty="legacy.test.failed"
            errorproperty="legacy.test.failed"
            printsummary="true"
            fork="true"
            dir="${legacy.test-classes}">
            <classpath refid="legacy.class.test.path"/>
            <formatter type="xml"/>
            <batchtest todir="${legacy.docs}/test">
                <fileset dir="${legacy.test-classes}" includes="**/ComponentTest*.class"/>
            </batchtest>
        </junit>
        <antcall target="legacy-junitreport" inheritall="true" inheritrefs="true"/>
        <property name="legacy.test.done" value="true"/>
    </target>

    <!--        Run ALL the integration tests.  This will fork.  One tine will start WebLogic, the other waits a predetermined-->
    <!--        amount of time (as specified in build.properties) and then starts the unit tests.  When the tests are finished, it will-->
    <!--        stop WebLogic.  This will also run the JunitReport subtask to format the unit test results for viewing.-->
    <target name="legacy-integration-test" depends="legacy-clean-tests,legacy-dir,legacy-deploy,legacy-compile-integration"
        unless="legacy.integration.test.done,deploy.done">

        <parallel>
            <echo message="************* ANTCALL to STARTWL ************"/>
            <antcall target="start" inheritAll="false"/>
            <sequential>
                <sleep seconds="${delay}"/>
                <do-legacy-tests test.path="legacy.class.integration.test.path" test.dir="${legacy.integration-test-classes}"/>
                <antcall target="legacy-stop" inheritall="true" inheritrefs="true"/>
            </sequential>
        </parallel>
        <antcall target="legacy-junitreport" inheritall="true" inheritrefs="true"/>
        <property name="integration.test.done" value="true"/>
    </target>

    <!-- stops Weblogic.  Why not use stop-weblogic? Although this is really ugly, it works, that's why!   -->
    <target name="legacy-stop" depends="legacy-init" description="Stops weblogic">
        <exec dir="${base.dir}" executable="java">
            <arg line="-cp ${weblogic}/lib/weblogic.jar weblogic.Admin -url t3://${cdm.host}:${cdm.main.weblogic.port} -username ${cdm.main.weblogic.admin.user} -password ${cdm.main.weblogic.admin.password} FORCESHUTDOWN ${cdm.main.weblogic.server.name}"/>
        </exec>
    </target>

    <macrodef name="do-legacy-tests">
        <attribute name="test.path"/>
        <attribute name="test.dir"/>
        <sequential>
            <junit failureproperty="legacy.test.failed"
                errorproperty="legacy.test.failed"
                dir="${cdm.main.approot}"
                fork="true"
                forkmode="perBatch"
                printsummary="true">
                <classpath>
                    <path refid="@{test.path}"/>
                </classpath>
                <formatter type="xml"/>
                <batchtest todir="${legacy.docs}/test">
                    <fileset dir="@{test.dir}">
                        <include name="**/*Test.class"/>
                        <exclude name="**/TestTest.class"/>
                    </fileset>
                </batchtest>
                <jvmarg value="-Djava.ext.dirs=${deprecated.lib.ant}/emma"/>
                <jvmarg value="-Demma.coverage.out.file=${coverage.out.file}"/>
                <jvmarg value="-Demma.coverage.out.merge=true"/>
            </junit>
        </sequential>
    </macrodef>

    <target name="legacy-junitreport" depends="legacy-compile" unless="legacy.junitreport.done"
        description="Builds the JUnit test report">
        <echo>junitreport Test failed status is: ${legacy.test.failed}</echo>
        <exec executable="java">
            <arg line="-classpath ${classes};${legacy.classes};${ant}/lib/ant.jar;${ant}/lib/ant-junit.jar"/>
            <arg line="net.nike.build.ant.task.JunitReportWrapper"/>
            <!--         String junitToDirArg = args[0];-->
            <arg line="${legacy.docs}/test"/>
            <!--        String baseDirArg=args[1];-->
            <arg line="${legacy.dir}"/>
            <!--        String filesetDirArg = args[2];-->
            <arg line="${legacy.docs}/test"/>
            <!--        String includeNameArg = args[3];-->
            <arg line="TEST-*.xml"/>
            <!--        String reportFormatArg = args[4];-->
            <arg line="frames"/>
            <!--        String reportToDirArg = args[5];-->
            <arg line="${legacy.docs}/test"/>
        </exec>

        <fail message="At least one unit test failed." if="legacy.test.failed"/>
        <property name="legacy.junitreport.done" value="true"/>
    </target>

    <!-- ================================================================================ -->
    <!-- Deploys the application (the jar of needed classes from the main project is already there (init)-->
    <!-- ================================================================================ -->
    <target name="legacy-deploy" depends="legacy-configure,legacy-compile" unless="legacy.deploy.done">
        <copy todir="${legacy.generated.conf}">
            <fileset dir="${legacy.conf}/resource"/>
        </copy>
        <copy todir="${legacy.deploy}/classes">
            <fileset dir="${legacy.classes}"/>
        </copy>
        <copy todir="${legacy.deploy}/classes">
            <fileset dir="${legacy.generated.conf}"/>
        </copy>
        <echo>${basedir} is ${base.dir}</echo>
        <copy todir="${legacy.deploy}/scripts">
            <fileset dir="${base.dir}" includes="runJavaNewLoaders.bat"/>
        </copy>
        <property name="deploy.done" value="true"/>
    </target>

    <target name="legacy-doc" depends="legacy-compile,legacy-dir,legacy-clean-docs,legacy-index" unless="legacy.doc.done"
        description="Generates the project documentation.">
        <javadoc maxmemory="128M" packagenames="com.nike.*" destdir="${legacy.docs}/api" protected="yes" classpathref="legacy.class.lib.weblogic.path">
            <sourcepath>
                <pathelement path="${legacy.src}"/>
                <pathelement path="${legacy.test}"/>
            </sourcepath>
            <doctitle><![CDATA[<h1>CDM R6.5 Legacy</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2004 Nike. All Rights Reserved.</i>]]></bottom>
            <group title="Domain" packages="com.nike.cdm.domain*"/>
            <group title="Exceptions" packages="com.nike.cdm.exception*"/>
            <group title="Load" packages="com.nike.cdm.load*"/>
            <group title="Persistence" packages="com.nike.cdm.persistence*"/>
            <group title="Utility" packages="com.nike.cdm.util*"/>
            <tag name="stereotype" scope="all" description="TogetherJ tag"/>
        </javadoc>

        <property name="legacy.doc.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Create an html index page for the docs                  -->
    <!-- ======================================================= -->
    <target name="legacy-index" depends="legacy-init" unless="legacy.index.done">
        <copy file="${legacy.conf}/build.html" tofile="${legacy.docs}/index.html" filtering="yes" overwrite="yes">
            <filterset>
                <filter token="TODAY" value="${TODAY}"/>
                <filter token="TIME" value="${TIME}"/>
            </filterset>
        </copy>
        <property name="legacy.index.done" value="true"/>
    </target>

    <!--   Tars the entire project up  -->
    <target name="legacy-tar" depends="legacy-init,legacy-clean-deploy,legacy-clean-build,legacy-compile,legacy-build-info" unless="legacy.tar.done">
        <!--        These locations will supercede those defined in the deploy targets.  This lets-->
        <!--        us deploy to multiple locations-->

        <property name="deploy.conf.location" value="${deploy.location}/conf"/>
        <property name="deploy.filename" value="${base.dir}/cdm-batch.tar.gz"/>
        <property name="deploy.remote.env" value="dev"/>
        <property name="dont.use.junctions" value="true"/>
        <echo>deploy location is: ${deploy.location}</echo>
        <echo>deploy.conf.location is: ${deploy.conf.location}</echo>
        <echo>deploy.remote.loation is: ${deploy.remote.location}</echo>
        <echo>deploy.remote.env is: ${deploy.remote.env}</echo>

        <!--        <antcall target="compile" inheritrefs="true"/>-->
        <delete file="${deploy.filename}" quiet="true"/>
        <delete dir="${deploy.location}" quiet="true"/>
        <mkdir dir="${deploy.location}"/>

        <!--copy the legacy classes-->
        <copy todir="${deploy.location}/classes">
            <fileset dir="${legacy.classes}"/>
        </copy>

        <!--        copy the xdoculet stuff for Hibernate-->
        <copy todir="${deploy.location}/classes">
            <filterset refid="cdmServerFilterSet"/>
            <fileset dir="${generated.conf}"/>
            <fileset dir="${legacy.generated.conf}"/>
        </copy>

        <!--        get the muliticonfig stuff from main app-->
        <copy todir="${deploy.location}/classes" overwrite="true">
            <filterset refid="cdmServerFilterSet"/>
            <!--            The PDF stuff will get copied a few lines down, in the section that starts with  '<fileset dir="${conf}/resource/pdf', so we exclude it here. -->
            <fileset dir="${conf}/resource" excludes="**/pdf/**"/>
            <fileset dir="${conf}/multiconfig"/>
        </copy>

        <!--        get multiconfig stuff from legacy app-->
        <copy todir="${deploy.location}/classes" overwrite="true">
            <filterset refid="legacyCdmServerFilterSet"/>
            <fileset dir="${legacy.conf}/resource"/>
            <fileset dir="${legacy.conf}/multiconfig"/>
        </copy>

        <antcall target="create-export-client" inheritall="true" inheritrefs="true"/>
        <copy-configure-fop-files filterset="cdmServerFilterSet"/>
        <copy file="${generated.conf}/defaultXslFoStyleSheet.xsl" tofile="${deploy.location}/classes/defaultXslFoStyleSheet.xsl"/>

        <!--        exclude the ttf fonts, they get mangled in the filterset copy-->
        <copy todir="${deploy.location}/classes" includeEmptyDirs="false">
            <filterset refid="cdmServerFilterSet"/>
            <fileset dir="${conf}/resource/pdf" excludes="**/bundles_base/**,**/*.TTF, **/defaultXslFoStyleSheet_base.xsl"/>
        </copy>
        <!--        now just the ttf fonts with no filtering-->
        <copy todir="${deploy.location}/classes" includeEmptyDirs="false">
            <fileset dir="${conf}/resource/pdf" includes="**/*.TTF"/>
        </copy>

        <copy todir="${deploy.location}/classes" includeEmptyDirs="false">
            <filterset refid="cdmServerFilterSet"/>
            <fileset dir="${generated.conf}" excludes="**/pdf/**, **/scripts/**"/>
            <fileset dir="${generated.src}/jaxb" includes="**/*.properties"/>
        </copy>

        <legacy-copy-build-stuff-for-server builddir="." buildfile="build-batch.xml" antLocation="${base.dir}/apache-ant-1.6.2"/>
        <copy-fix-build-script file="build.batch.sh"/>

        <!--copy the sqlscripts-->
        <copy todir="${deploy.location}/sqlscripts">
            <filterset refid="legacyCdmServerFilterSet"/>
            <fileset dir="${base.dir}/sqlscripts"/>
        </copy>

        <!--copy the batch scriptsscripts-->
        <copy todir="${deploy.location}/scripts">
            <fileset dir="${legacy.dir}/scripts/batchscripts"/>
            <fileset dir="${legacy.dir}/scripts/ctrls"/>
        </copy>

        <mkdir dir="${deploy.location}/lib"/>
        <mkdir dir="${deploy.location}/newlib"/>
        <!--        libraries for newer loaders-->
        <echo>Copying libraries to ${deploy.location}/newlib</echo>
        <copy todir="${deploy.location}/newlib">
            <fileset dir="${lib}">
                <include name="ftp.jar"/>
                <include name="fop.jar"/>
                <include name="informix.jar"/>
                <include name="jdom.jar"/>
                <include name="ojdbc14.jar"/>
                <include name="shared.jar"/>
                <include name="nikenet-global.jar"/>
                <include name="xineo-xml-1.1.0.jar"/>
                <include name="log4j.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="xsdlib.jar"/>
                <include name="namespace.jar"/>
                <include name="avalon-framework-cvs-20020806.jar"/>
                <include name="batik.jar"/>
                <include name="poi-2.5.1-final-20040804.jar"/>

            </fileset>
            <fileset dir="${lib}/commons">
                <include name="commons-beanutils.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-lang.jar"/>
                <include name="commons-beanutils.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-lang.jar"/>
            </fileset>
            <fileset dir="${lib}/jaxb">
                <include name="jaxp-api.jar"/>
                <include name="jaxb-xjc.jar"/>
                <include name="jaxb-libs.jar"/>
                <include name="jaxb-impl.jar"/>
                <include name="jaxb-api.jar"/>
                <include name="jax-qname.jar"/>
                <include name="relaxngDatatype.jar"/>
            </fileset>
            <fileset dir="${lib}/hibernate">
                <include name="hibernate2.jar"/>
                <include name="dom4j.jar"/>
                <include name="cglib2.jar"/>
                <include name="odmg.jar"/>
                <include name="ehcache-0.7.jar"/>
            </fileset>
        </copy>

        <!--libraries for older loaders-->
        <echo>Copying libraries to ${deploy.location}/lib</echo>
        <copy todir="${deploy.location}/lib">
            <fileset dir="${lib}">
                <include name="ftp.jar"/>
                <include name="informix.jar"/>
                <include name="jdom.jar"/>
                <include name="ojdbc14.jar"/>
                <include name="shared.jar"/>
                <include name="nikenet-global.jar"/>
                <include name="xineo-xml-1.1.0.jar"/>
            </fileset>
            <fileset dir="${lib}/commons">
                <include name="commons-beanutils.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-lang.jar"/>
            </fileset>
            <fileset dir="${legacy.lib}">
                <include name="log4j.jar"/>
                <include name="xerces.jar"/>
            </fileset>
        </copy>

        <mkdir dir="${deploy.location}/nike-deploy"/>

        <copy todir="${deploy.location}/nike-deploy">
            <fileset file="${deploy.location}/${buildinfo}"/>
        </copy>

        <echo message="Generating lists of substitution files"/>
        <echo message="listfile is: ${deploy.location}/nike-deploy/substitutions.txt"/>
        <list-files
            listfile="${deploy.location}/nike-deploy/substitutions.txt">
            <fileset dir="${deploy.location}">
                <include name="**/*.sh"/>
                <include name="**/*.sql"/>
                <include name="**/*.xml"/>
                <include name="**/*.xsl"/>
                <include name="**/*.properties"/>
                <include name="**/buildinfo.txt"/>
                <include name="**/cdm.gebsh"/>
            </fileset>
        </list-files>

        <echo message="building tarball: ${deploy.location}/${deploy.filename}"/>
        <fix-files dir="${deploy.location}"/>
        <tar
            destfile="${deploy.filename}"
            longfile="gnu"
            compression="gzip"
            >
            <tarfileset dir="${deploy.location}" mode="755" username="cdm65">
                <include name="**/*.sh"/>
                <include name="**/apache-ant-1.6.2/bin/ant"/>
            </tarfileset>
            <tarfileset dir="${deploy.location}">
                <include name="**"/>
                <exclude name="**/*.sh"/>
                <exclude name="**/apache-ant-1.6.2/bin/ant"/>
            </tarfileset>
        </tar>

        <property name="legacy.tar.done" value="done"/>
    </target>


    <!--   Copies the tar to the server  -->
    <target name="legacy-dist" depends="legacy-tar" unless="legacy.dist.done">

        <echo>Creating remote deploy dir</echo>
        <mkdir dir="${deploy.remote.location}/build_${BaselineName}"/>
        <echo>in dist: BaselineName is ${BaselineName}</echo>
        <copy todir="${deploy.remote.location}/build_${BaselineName}"
            file="${deploy.filename}"/>

        <property name="legacy.dist.done" value="done"/>
    </target>

    <!--   Copies the tar to the server as a release candidate -->
    <target name="legacy-dist-rc" depends="legacy-tar" unless="legacy.dist.rc.done">

        <echo>Creating remote deploy dir for release candidate</echo>
        <mkdir dir="${deploy.remote.location}/build_${BaselineName}_rc"/>
        <echo>in dist: BaselineName is ${BaselineName}</echo>
        <copy todir="${deploy.remote.location}/build_${BaselineName}_rc"
            file="${deploy.filename}"/>

        <property name="legacy.dist.rc.done" value="done"/>
    </target>

    <!--    Copies build files for the server to run during deployment.-->
    <!--    Note that this is NOT a target - as it's never run standalone, it's a macro.  MUCH faster than calling antscript, -->
    <!--    as it was executed before-->
    <macrodef name="legacy-copy-build-stuff-for-server">
        <attribute name="builddir"/>
        <attribute name="buildfile"/>
        <attribute name="antLocation"/>
        <sequential>
            <property name="deploy.location" value="${build}/serverdeploy"/>

            <copy todir="${deploy.location}/build/build" overwrite="true">
                <fileset file="@{builddir}/@{buildfile}"/>
            </copy>
            <copy todir="${deploy.location}/build/build" overwrite="true">
                <fileset file="@{builddir}/build*.xml"/>
                <fileset dir="@{builddir}" includes="*.properties" excludes="mybuild*.properties"/>
            </copy>
            <copy todir="${deploy.location}/build/apache-ant-1.6.2">
                <!--  exclude weblogic.jar, we're going to get it from the BEA distribution already on the server.-->
                <fileset dir="@{antLocation}" excludes="**/weblogic.jar"/>
            </copy>

            <!--           stuff for build config-->
            <copy todir="${deploy.location}/build/conf" filtering="true" overwrite="true">
                <!--            <fileset dir="${base.dir}/conf/resource"/>-->
                <fileset dir="${legacy.dir}/conf/multiconfig"/>
                <filterset refid="legacyCdmServerFilterSet"/>
            </copy>
        </sequential>
    </macrodef>

</project>
