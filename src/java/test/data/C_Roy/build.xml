<?xml version="1.0"?>


<!-- ================================================================================================= -->
<!-- Standard build file that is used by all projects as facade to the modular sub-build files.        -->
<!-- Thus this build file shows wich targets can be used within the complete nightly build however     -->
<!-- it makes transparent where the concrete targets are.                                              -->
<!-- ================================================================================================= -->
<!-- Author  : Arthur Neudeck, t207661                                                                 -->
<!-- Version : 3.3, 26.01.2005                                                                         -->
<!-- ================================================================================================= -->
<project name="General-Nightly-Build">


        <!-- provide access to the environment variables -->
        <property environment="env" />


        <!-- add all project specific properties using a file -->
        <property file="conf/build.properties" />


        <!-- add all user specific properties -->
        <property file="${basedir}/../../.metadata/build-user.properties" />


        <!-- default props for all file operations -->
        <property name="chmod.prefs" value="755" />


        <!-- source/ resource settings -->
        <property name="root.dir" value=".." />
        <property name="classes.dir" value="${root.dir}/classes" />
        <property name="config.dir" value="${root.dir}/conf" />
        <property name="src.dir" value="${root.dir}/source" />
        <property name="test.dir" value="${root.dir}/test" />
        <property name="lib.dir" value="${root.dir}/lib" />
        <property name="tld.dir" value="${root.dir}/tld" />
        <property name="dev.dir" value="${root.dir}/dev" />
        <property name="testlib.dir" value="${root.dir}/testlib" />
        <property name="metainf.dir" value="${src.dir}/META-INF" />
        <property name="web.dir" value="web" />


        <!-- JIBX settings -->
        <property name="jibx.dir" value="${root.dir}/jibx" />
        <property name="jibx.temp.dir" value="${jibx.dir}/tmp" />
        <property name="jibx.properties.file" value="${jibx.dir}/jibx-build.properties" />
        <property name="jibx.schema.dir" value="${root.dir}/jibx/xsd" />
        <!-- property name="jibx.generated.sources" value="${jibx.dir}/src" /-->


        <!-- WAR settings -->
        <property name="web-content.dir" value="${root.dir}/Web Content" />
        <property name="webxml.location" value="${web-content.dir}/WEB-INF/web.xml" />


        <!-- settings required for defining the target of all building -->
        <property name="release.basedir" value="${root.dir}/nightly-build/release" /><!-- has to be under the nightly-build directory -->
        <property name="release.lib.dir" value="${release.basedir}/lib" />
        <property name="release.war.dir" value="${release.basedir}/war" />
        <property name="backup.dir" value="${release.basedir}/backup" />


        <!-- company specific settings -->
        <property name="company" value="UBS AG" />
        <property name="packages" value="com.ubs.*" />


        <!-- packaging settings -->
        <property name="${package.exclude}" value="" />
        <patternset id="archive.exclude">
                <exclude name="**/AllTest*.class" />
                <exclude name="**/TestImpl*.class" />
                <exclude name="**/*Test.class" />
                <exclude name="**/tstamp.*" />
                <exclude name="**/*.html" />
                <exclude name="**/readme.txt" />
                <exclude name="**/empty.txt" />
                <exclude name="**/*.csv" />
                <exclude name="**/build*.xml" />
                <exclude name="**/MANIFEST.MF" />
        </patternset>


        <!-- doc settings -->
        <property name="doc.basedir" value="${release.basedir}/doc" />
        <property name="blackbox.dir" value="${doc.basedir}/api/blackbox" />
        <property name="whitebox.dir" value="${doc.basedir}/api/whitebox" />
        <property name="current.dir" value="current" />


        <!-- QA settings -->
        <property name="qa.basedir" value="${release.basedir}/qa" />
        <property name="checkstyle.dir" value="${qa.basedir}/checkstyle" />
        <property name="jdepend.dir" value="${qa.basedir}/jdepend" />
        <property name="junit.dir" value="${qa.basedir}/junit" />
        <property name="metrics.dir" value="${qa.basedir}/metrics" />
        <property name="compatibility.dir" value="${qa.basedir}/compatibility" />


        <!-- file names -->
        <property name="jar.basename" value="${project.swid}_${project.filename}-${project.major.version}" />
        <property name="general.basename" value="${project.swid}_${project.major.version}_${project.filename}" />
        <property name="classes.jar" value="${release.lib.dir}/${jar.basename}.jar" />
        <property name="classes.war" value="${release.lib.dir}/${general.basename}Web.war" />
        <property name="classes.ear" value="${release.lib.dir}/${general.basename}.ear" />
        <property name="deployedlib.jar" value="${EFP}/clibs/${project.swid}/${project.filename}/jars/${jar.basename}.jar" />
        <property name="src.jar" value="${release.lib.dir}/${jar.basename}-src.zip" />
        <property name="whitebox.jar" value="${release.lib.dir}/${jar.basename}-w-doc.zip" />
        <property name="blackbox.jar" value="${release.lib.dir}/${jar.basename}-b-doc.zip" />
        <property name="file.tstamp.build" value="tstamp.${global.tstamp.build}" />
        <property name="file.buildnumber" value="buildnumber" />


        <!-- EJB deployment settings -->
        <property name="temp.dir" value="tmp" />
        <property name="backup.jar" value="${release.lib.dir}/sav-${general.basename}.jar" />
        <property name="deploy.jar" value="${release.lib.dir}/new-${general.basename}.jar" />


        <!-- ================================================== -->
        <!-- classpath that is used by each project             -->
        <!-- ================================================== -->
        <path id="classpath.base">


                <!-- add default classpath -->
                <pathelement path="${env.CLASSPATH}" />


                <!-- add classes directory of project -->
                <pathelement location="${classes.dir}" />
                <pathelement location="${env.JAVA_HOME}/lib/tools.jar" />


        </path>


        <!-- ================================================== -->
        <!-- sourcepath that is used by each project            -->
        <!-- ================================================== -->
        <path id="sourcepath.base">


                <!-- add default source directory -->
                <pathelement location="${src.dir}" />


        </path>


        <!-- ================================================== -->
        <!-- backup                                             -->
        <!-- ================================================== -->
        <target name="backup" depends="init" description="Backup the current project">


                <!-- indicate that we started the target -->
                <echo message="Started backup for project '${project.name}'" />


                <!-- create the backup directory if it doens't already exist -->
                <mkdir dir="${backup.dir}" />


                <!-- set the exclude list -->
                <property name="base.excludelist" value="nightly-build/${backup.dir}/**,**/*.class,nightly-build/${release.basedir}/**,nightly-build/${build.config.dir}/**" />
                <property name="common.excludelist" value="${base.excludelist},${excludelist}" />


                <echo message="Exclude list: ${common.excludelist}" />


                <!-- create the zip file -->
                <zip destfile="${backup.dir}/${global.tstamp.build}.zip" basedir="${root.dir}" excludes="${common.excludelist}" defaultexcludes="true" />


                <!-- indicate that we finished the target -->
                <echo message="Finished backup for project '${project.name}'" />


        </target>


        <!-- ================================================== -->
        <!-- blackbox                                           -->
        <!-- ================================================== -->
        <target name="blackbox" depends="create-release-lib-dir" if="ispresent.sourcedir" description="Generates the javadoc that is required by API users.">
                <echo message="Generating black-box javadoc for '${project.name}'" />


                <!-- delete old contents -->
                <delete dir="${blackbox.dir}" />
                <mkdir dir="${blackbox.dir}" />


                <!-- add whole package documentation that is not standard javadoc -->
                <copy toDir="${blackbox.dir}" overwrite="true" preservelastmodified="true">
                        <fileset dir="${src.dir}" includes="**/*.html" excludes="**/package.html" />
                </copy>


                <!-- indicate where we retrieve the sources from -->
                <pathconvert dirsep="${file.separator}" pathsep="${path.separator}" property="mysourcepath" refid="sourcepath" />
                <echo message="Using source files for blackbox:" />
                <echo message="${mysourcepath}" />


        <property name = "zz.classpath" refid = "classpath"/>
                <echo message="!!!classpath=[${zz.classpath}]" />
                <echo message="!!!packages=[${packages}]" />


                <!-- create javadoc -->
                <javadoc packagenames="${packages}" 
                        excludepackagenames="**/internal" 
                        destdir="${blackbox.dir}" 
                        author="true" 
                        version="true" 
                        defaultexcludes="yes" 
                        windowtitle="${project.name}" 
                        protected="true" 
                        useexternalfile="true" 
                        doctitle="&lt;h1&gt;${project.name}&lt;/h1&gt;" 
                        bottom="&lt;i&gt;Copyright &#169; 2003 ${company}. All Rights Reserved. &lt;/i&gt;" >
                        <sourcepath refid="sourcepath" />
                        <classpath refid="classpath" />
                </javadoc>


                <!-- define local properties -->
                <property name="file.buildnumber" value="buildnumber.properties" />


                <!-- Reads the new build number -->
                <property file="${file.buildnumber}" />


                <!-- definition of the build-number that should be used when buidl is not official -->
                <property name="buildnumber" value=" not offical!" />


                <!-- create the standard manifest -->
                <ant antfile="${build.config.dir}/util/base-build-util.xml" target="createManifest" inheritall="true">
                        <property name="caller.dir.target" value="${blackbox.dir}"/>
                        <property name="caller.name.project" value="${project.name}"/>
                        <property name="caller.swid" value="${project.swid}"/>
                        <property name="caller.version.major" value="${project.major.version}"/>
                        <property name="caller.version.minor" value="${project.minor.version}"/>
                        <property name="caller.number.build" value="${buildnumber}"/>
                </ant>


                <!-- delete and create new jar file of docs -->
                <delete file="${blackbox.jar}" />
                <jar basedir="${blackbox.dir}" destfile="${blackbox.jar}"
                        manifest="${blackbox.dir}/manifest.mf" >
                </jar>


                <!-- create timestamp file -->
                <propertyfile file="${blackbox.dir}/${file.tstamp.build}" comment="Timestamp" />


                <!-- show console message that javadoc has been generated -->
                <echo message="Finished generating blackbox-javadoc for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- check-dir-availablity                              -->
        <!-- ================================================== -->
        <target name="check-dir-availablity" description="Checks whether certain directories are available and set properties.">


                <!-- check whether lib directory does exist -->
                <available file="${lib.dir}" type="dir" property="ispresent.libdir" />


                <!-- check whether library directory in release where JAR should be stored to does exist -->
                <available file="${release.lib.dir}" type="dir" property="ispresent.releaselibdir" />


                <!-- check whether backup directory in release dir does exist -->
                <available file="${backup.dir}" type="dir" property="ispresent.backupdir" />


                <!-- check whether archive directory in release where WAR should be stored to does exist -->
                <available file="${release.war.dir}" type="dir" property="ispresent.releasewardir" />


                <!-- check whether the schema directory for JIBX preprocessing exists -->
                <available file="${xmlparsing.dir}" type="dir" property="ispresent.xmlparsingdir" />


                <!-- check whether config directory does exist -->
                <available file="${config.dir}" type="dir" property="ispresent.configdir" />


                <!-- check whether dev directory does exist -->
                <available file="${dev.dir}" type="dir" property="ispresent.devdir" />


                <!-- check whether source directory does exist -->
                <available file="${src.dir}" type="dir" property="ispresent.sourcedir" />


                <!-- check whether test source directory does exist -->
                <available file="${test.dir}" type="dir" property="ispresent.testdir" />


                <!-- check whether classes directory does exist -->
                <available file="${classes.dir}" type="dir" property="ispresent.classesdir" />


                <!-- check whether jibx directory does exist -->
                <available file="${jibx.dir}" type="dir" property="ispresent.jibxdir" />


                <!-- check whether jibx schema directory does exist -->
                <available file="${jibx.schema.dir}" type="dir" property="ispresent.jibxschemadir" />


                <!-- check whether test-lib directory does exist -->
                <available file="${testlib.dir}" type="dir" property="ispresent.testlibdir" />


                <!-- check whether server lib directory does exist -->
                <available file="${serverlib.dir}" type="dir" property="ispresent.serverlibdir" />


                <!-- test whether the required DCM executable does exist for checking out sources -->
                <available file="${ds.dcm.path}" property="ispresent.dcmfile" />


                <!-- test whether the META-INF direcory does exist -->
                <available file="${metainf.dir}" type="dir" property="ispresent.metainfdir" />


                <!-- check whether web directory does exist -->
                <available file="${web.dir}" type="dir" property="ispresent.webdir" />


                <!-- check whether the library does exist as deployed version -->
                <available file="${deployedlib.jar}" type="file" property="ispresent.deployedlib" />


                <!-- check whether a web-xml is available indicating a WAR shoudl be generated -->
                <available file="${webxml.location}" type="file" property="ispresent.webxml" />


        </target>


        <!-- ================================================== -->
        <!-- checkout                                           -->
        <!-- ================================================== -->
        <target name="checkout" unless="eclipse.present" depends="init" description="Checks out all required resources using the activated VCS - if we are not within Eclipse.">


                <!-- in case CVS is activated check out using CVS -->
                <antcall target="cvs.checkout.project" />


                <!-- in case ChangeMan DS is activated check out using DS -->
                <antcall target="-ds.getHeadProject" />


        </target>


        <!-- ================================================== -->
        <!-- cvs.checkout.project                               -->
        <!-- ================================================== -->
        <target name="cvs.checkout.project" if="version.control.cvs" description="Checkout project from CVS">


                <!-- set the project name to project dir - if no destination directory has been set by the caller -->
                <property name="cvs.project" value="${project.dir}" />


                <!-- set the destination directory to '${basedir}' if no destination directory has been set by the caller -->
                <property name="dest.dir" value="${basedir}" />


                <!-- indicate next step we need tro perform -->
                <echo message="Checkout from CVS ${cvs.project} (CVS root: ${cvs.root}, Dest: ${dest.dir})." />


                <!-- check out all sources from given project -->
                <cvs command="checkout" cvsRoot="${cvs.root}" package="${project.dir}" dest="${dest.dir}" />


                <!-- indicate next step we need tro perform -->
                <echo message="Checkout from CVS ${cvs.project} (CVS root: ${cvs.root}, Dest: ${dest.dir}) completed." />


        </target>


        <!-- ================================================== -->
        <!-- do.checkout                                        -->
        <!-- ================================================== -->
        <target name="-ds.getHeadProject" if="version.control.ds" description="Implements the real check-out of all required resources using Serena ChangeMan DS.">


                <ant antfile="versioncontrol/ds-ant-utils.xml" target="getHeadProject">
                        <property name="caller.project-name" value="${project.dir}" />
                </ant>
        </target>


        <!-- ================================================== -->
        <!-- checkstyle                                         -->
        <!-- ================================================== -->
        <taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
                <classpath>
                        <fileset dir="${ANT_HOME}/lib">
                                <include name="**/*.jar" />
                        </fileset>
                </classpath>
        </taskdef>


        <target name="checkstyle" depends="create-release-lib-dir" if="ispresent.sourcedir" description="Generates a report of code convention violations.">


                <!-- show console message that checkstyle report will be generated -->
                <echo message="Started generating coding convention report for '${project.name}'." />


                <!-- delete old contents -->
                <delete dir="${checkstyle.dir}" />
                <mkdir dir="${checkstyle.dir}" />
                <mkdir dir="${checkstyle.dir}/xml" />
                <mkdir dir="${checkstyle.dir}/html" />


                <!-- run the checkstyle code quality analysis -->
                <checkstyle config="${build.config.dir}/UBS-ACE-Checks.xml" properties="${build.config.dir}/checkstyle_conf.xml" failureProperty="checkstyle.failure" failOnViolation="false">


                        <!-- the following fileset equals our path with id sourcepath. Because it's not possible to 
                                set a fileset with refid we have to specify the direcories again. -->
                        <fileset dir="${src.dir}">
                                <include name="**/*.java" />
                                <patternset>
                                        <include name="../${dev.dir}/**/*.java" if="ispresent.devdir" />
                                        <include name="../${test.dir}/**/*.java" if="ispresent.testdir" />
                                        <include name="../${config.dir}/**/*.java" if="ispresent.configdir" />
                                </patternset>
                        </fileset>


                        <formatter type="xml" tofile="${checkstyle.dir}/xml/index.xml" />


                        <!-- Location of cache-file. Something that is project specific -->
                        <property key="checkstyle.cache.file" file="${checkstyle.dir}/xml/cachefile" />
                </checkstyle>


                <!-- show console message that checkstyle report has been generated -->
                <echo message="Starting stylesheet transformation." />


                <!-- run the conversion from XML to HTML of the report -->
                <style basedir="${checkstyle.dir}/xml" destdir="${checkstyle.dir}/html" includes="**/*.xml" force="true" extension=".html" style="conf/checkstyle-noframes-sorted.xsl" />


                <!-- create timestamp file -->
                <propertyfile file="${checkstyle.dir}/${file.tstamp.build}" comment="Timestamp" />


                <!-- show console message that checkstyle report has been generated -->
                <echo message="Finished generating coding convention for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- clean                                              -->
        <!-- ================================================== -->
        <target name="clean" depends="init" description="Removes all files and directories that are part of the release.">


                <!-- Indicate the task that has been started -->
                <echo message="Deleting all build results for project '${project.name}'." />


                <!-- remove all classes dir -->
                <!--delete dir="${classes.dir}" /-->


                <!-- remove the releases dir -->
                <delete dir="${release.basedir}" />


                <!-- refresh the eclipse project, if project has been specified -->
                <antcall target="refresh" />


                <!-- Indicate the task that has been started -->
                <echo message="Finished deleting all build results for project '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- clean-deployment-dir                               -->
        <!-- ================================================== -->
        <target name="clean-deployment-dir" depends="init" if="deployment.dir" description="Removes all files and directories that are stored at deployment dir.">
                <!-- remove potential archive files that were deployed to server -->
                <delete>
                        <fileset dir="${deployment.dir}" includes="${project.swid}_${project.filename}-*.jar" />
                        <fileset dir="${deployment.dir}" includes="${project.swid}_${project.filename}-*.car" />
                        <fileset dir="${deployment.dir}" includes="${project.swid}_${project.filename}-*.war" />
                </delete>
        </target>


        <!-- ================================================== -->
        <!-- compile                                            -->
        <!-- ================================================== -->
        <target name="compile" depends="init" description="Compiles all sources that are located underneath the sourcepath">


                <!-- delete old contents and create dirs again -->
                <delete dir="${classes.dir}" />
                <mkdir dir="${classes.dir}" />


                <!-- load the JIBX properties -->
                <property file="${jibx.properties.file}" />
                <available file="${jibx.properties.file}" type="file" property="ispresent.file.jibx-props" />


                <!-- try to compile JIBX sources if they exist -->
                <antcall target="-compile.jibx" />


                <!-- try to compile all other sources using eclipse (if it is present) -->
                <antcall target="-compile.eclipse" />


                <!-- try to compile the sources on unix -->
                <antcall target="-compile.native" />


                <!-- make user to copy the JIBX classes to the folder that will be archived -->
                <available file="${jibx.temp.dir}" type="dir" property="ispresent.dir.jibx-tmp" />
                <antcall target="-compile.jibx-copy" />


                <!-- make sure all sources are copied to the classes dir to be archived -->
                <antcall target="-compile.copy-sources" />
        </target>


        <!-- ================================================== -->
        <!-- compile.native                                     -->
        <!-- ================================================== -->
        <target name="-compile.native" if="ispresent.java-sources" unless="eclipse.present" description="Compiles all sources that are located underneath the sourcepath">


                <!-- copy all config files to bytecode directory -->
                <antcall target="copy-config-dir" />


                <!-- check whether source directories exist -->
                <available file="${config.dir}" type="dir" property="ispresent.configdir" />
                <available file="${dev.dir}" type="dir" property="ispresent.devdir" />
                <available file="${src.dir}" type="dir" property="ispresent.sourcedir" />
                <available file="${test.dir}" type="dir" property="ispresent.testdir" />


                <!-- check whether lib directories exist -->
                <available file="${lib.dir}" type="dir" property="ispresent.libdir" />
                <available file="${testlib.dir}" type="dir" property="ispresent.testlibdir" />
                <available file="${serverlib.dir}" type="dir" property="ispresent.serverlibdir" />


                <!-- set up compiler and let it run -->
                <javac srcdir="${root.dir}" destdir="${classes.dir}" encoding="latin1" fork="yes" debug="${javac.debug}" optimize="${javac.optimize}" deprecation="${javac.deprecation}">


                        <!-- provide the proper classpath -->
                        <classpath>


                                <!-- project specific settings -->
                                <pathelement path="${project.specific.classpath}" />


                                <!-- optional libraries -->
                                <fileset dir="${root.dir}">
                                        <include name="**/*.jar" />
                                        <patternset>
                                                <include name="${serverlib.dir}/**" if="ispresent.serverlibdir" />
                                                <include name="${testlib.dir}/**" if="ispresent.testlibdir" />
                                                <include name="${lib.dir}/**" if="ispresent.libdir" />
                                        </patternset>
                                </fileset>
                                <!-- java tools -->
                                <pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
                        </classpath>


                        <!-- provide the proper sourcepath used for compilation -->
                        <src>
                                <fileset dir="${root.dir}">
                                        <patternset>
                                                <include name="${config.dir}/**/*.java" if="ispresent.configdir" />
                                                <include name="${dev.dir}/**/*.java" if="ispresent.devdir" />
                                                <include name="${src.dir}/**/*.java" if="ispresent.sourcedir" />
                                                <include name="${test.dir}/**/*.java" if="ispresent.testdir" />
                                        </patternset>
                                </fileset>
                        </src>
                </javac>


        </target>


        <!-- ================================================== -->
        <!-- compile.eclipse                                    -->
        <!-- ================================================== -->
        <target name="-compile.eclipse" if="eclipse.present" description="Rebuilds the eclipse project with latest sources.">


                <!-- make sure all latest resources are taken into account -->
                <antcall target="refresh" />


                <!-- rebuild the project within eclipse -->
                <projectBuild failOnError="true" ProjectName="${project.name.wsad}" buildType="full" />


                <!-- reflect all canges -->
                <antcall target="refresh" />


        </target>


        <!-- ================================================== -->
        <!--compile.jibx                                       -->
        <!-- ================================================== -->
        <taskdef name="jibx-bind" classname="org.jibx.binding.ant.CompileTask">
                <classpath>
                        <pathelement location="${EFP}/thirdp/apache-jakarta/bcel/jars/bcel-10.jar" />
                        <pathelement location="${EFP}/thirdp/jibx/jibx-bind/jars/jibx-bind-10.jar" />
                        <pathelement location="${EFP}/thirdp/jibx/jibx-run/jars/jibx-run-10.jar" />
                        <pathelement location="${EFP}/thirdp/xpp/xpp/jars/xpp-10.jar" />
                </classpath>
        </taskdef>


        <target name="-compile.jibx" depends="init,-compile.jibx-preprocess" if="ispresent.jibxdir" description="Enhances the existing Java classes with XML bindig information.">


                <!-- recreate temp dir -->
                <delete dir="${jibx.temp.dir}" />
                <mkdir dir="${jibx.temp.dir}" />


                <!-- convert the sourcepath for this compile -->
                <pathconvert dirsep="${file.separator}" pathsep="${path.separator}" property="javac.sourcepath" refid="sourcepath" />


                <!-- Compile the Java sources for the binding objects. -->
                <javac destdir="${jibx.temp.dir}" executable="${jibx.jrehome}/bin/javac" classpathref="classpath" fork="true" encoding="latin1" debug="${javac.debug}" optimize="${javac.optimize}" deprecation="${javac.deprecation}" failonerror="true">
                        <src>
                                <pathelement location="${jibx.generated.sources}" />
                        </src>
                </javac>


                <!-- make sure a binding file exists -->
                <available file="${basedir}/${jibx.dir}/${jibx.binding.name}" type="file" property="ispresent.file.jibx-binding" />
                <fail message="The JIBX binding file '${basedir}/${jibx.dir}/${jibx.binding.name}' is missing." unless="ispresent.file.jibx-binding" />


                <!-- Run JiBX binding compiler -->
                <jibx-bind verbose="true">
                        <classpath>
                                <fileset dir="${root.dir}">
                                        <include name="${lib.dir}/**/*.jar" if="ispresent.libdir" />
                                </fileset>
                                <pathelement location="${jibx.temp.dir}" />
                                <pathelement location="${classes.dir}" />
                                <pathelement path="${project.specific.classpath}" />
                        </classpath>


                        <!-- make sure the binding files are just referenced by names - not paths! -->
                        <bindingfileset dir="${basedir}/${jibx.dir}">
                                <include name="${jibx.binding.name}" />
                                <include name="${jibx.binding.name2}" />
                        </bindingfileset>
                </jibx-bind>


        </target>


        <!-- ================================================== -->
        <!-- compile.jibx-copy                                  -->
        <!-- ================================================== -->
        <target name="-compile.jibx-copy" if="ispresent.dir.jibx-tmp" description="Copies all generated classes from the Jibx temp dir to the classes directory.">


                <!-- finally copy all JIBX enhanced classes to the classes folder so that JAR can include them -->
                <copy todir="${classes.dir}">
                        <fileset dir="${jibx.temp.dir}" includes="**/*" />
                </copy>


        </target>


        <!-- ================================================== -->
        <!-- compile.copy-sources                               -->
        <!-- ================================================== -->
        <target name="-compile.copy-sources" description="Copies all non Java sources to the classes directory.">


                <!-- finally copy all JIBX enhanced classes to the classes folder so that JAR can include them -->
                <copy todir="${classes.dir}">
                        <fileset dir="${root.dir}">
                                <include name="${src.dir}/**/*.jar" if="ispresent.sourcedir" />
                        </fileset>
                </copy>


        </target>


        <!-- ================================================== -->
        <!-- compile.jibx-preprocess                            -->
        <!-- ================================================== -->
        <target name="-compile.jibx-preprocess" depends="init" if="ispresent.jibxschemadir" description="Generates Java classes for JIBX XML to Java binding given a set of XML schemas.">


                <!-- make sur ethat the JIBX-XSD compilation will work -->
                <available file="${EFP}/thirdp/jibx/xsd2jibx/jars/xsd2jibx-10.jar" type="file" property="ispresent.xsd2jibx-jar" />
                <fail message="Can not find XSD to JIBX Preprocessor searching in file '${EFP}/thirdp/jibx/xsd2jibx/jars/xsd2jibx-10.jar'." unless="ispresent.xsd2jibx-jar" />


                <!-- load properties -->
                <echo message="Using JRE in '${jibx.jrehome}'." />


                <!-- delete output directory for the generated source files and binding file -->
                <delete dir="${jibx.generated.sources}" />
                <delete file="${jibx.dir}/${jibx.binding.name}" />


                <!-- indicate where all sources will be created into -->
                <echo message="Writing generated source files to '${jibx.generated.sources}'.\ Find binding file at '${basedir}/${jibx.dir}/${jibx.binding.name}'." />


                <!-- Invoke the JIBX preprocessor. This creates a binding definition XML file and the -->
                <!-- Java source files for the binding objects. -->
                <java classname="org.jibx.xsd2jibx.Generator" dir="${jibx.schema.dir}" classpathref="classpath" fork="true" jvm="${jibx.jrehome}/bin/java">
                        <classpath>
                                <pathelement location="${EFP}/thirdp/apache-jakarta/bcel/jars/bcel-10.jar" />
                                <pathelement location="${EFP}/thirdp/apache-jakarta/jaxmejs/jars/jaxmejs-10.jar" />
                                <pathelement location="${EFP}/thirdp/apache-logging/log4j/jars/log4j-10.jar" />
                                <!-- Put the conf dir on the classpath so the log4j.properties can be found -->
                                <pathelement location="conf" />
                                <pathelement location="${EFP}/thirdp/jibx/jibx-run/jars/jibx-run-10.jar" />
                                <pathelement location="${EFP}/thirdp/xpp/xpp/jars/xpp-10.jar" />
                                <pathelement location="${EFP}/thirdp/jibx/xsd2jibx/jars/xsd2jibx-10.jar" />
                        </classpath>
                        <jvmarg value="-DoutputDir=../${jibx.generated.sources}" />
                        <jvmarg value="-DtargetPackage=${jibx.package.name}" />
                        <jvmarg value="-DbindingFile=${jibx.binding.name}" />
                        <arg line="${jibx.itemlist}" />
                </java>


                <!-- move the generated JIBX binding file to the place where we can use it -->
                <move toFile="${jibx.dir}/${jibx.binding.name}">
                        <fileset dir="${jibx.generated.sources}">
                                <include name="**/${jibx.binding.name}" />
                        </fileset>
                </move>


        </target>


        <!-- ================================================== -->
        <!-- compatibility                                      -->
        <!-- ================================================== -->
        <target name="compatibility" description="Generates a report of backward compatibility breaks or indicates that no lib exists.">


                <!-- check whether JAR file has been generated -->
                <condition property="ispresent.file.compcheck-jars">
                        <and>
                                <available file="${classes.jar}" type="file" property="ispresent.file.new-classes-jar" />
                                <available file="${deployedlib.jar}" type="file" property="ispresent.file.efp-classes-jar" />
                        </and>
                </condition>


                <!-- execute the compatibility check -->
                <antcall target="-promptMissingNewJarMessage" />
                <antcall target="-promptMissingEfpJarMessage" />
                <antcall target="-compatibilityCheck" />
        </target>


        <!-- ================================================== -->
        <!-- -promptMissingNewJarMessage                        -->
        <!-- ================================================== -->
        <target name="-promptMissingNewJarMessage" unless="ispresent.file.new-classes-jar" description="Indicates that no report of backward compatibility breaks can be generated.">


                <!-- show console message that checkstyle report will be generated -->
                <echo message="Did not generate backward compatibility report for '${project.name}'." />
                <echo message="Old JAR '${classes.jar}' does not exist." />


        </target>


        <!-- ================================================== -->
        <!-- -promptMissingEfpJarMessage                        -->
        <!-- ================================================== -->
        <target name="-promptMissingEfpJarMessage" unless="ispresent.file.efp-classes-jar" description="Indicates that no report of backward compatibility breaks can be generated.">


                <!-- show console message that checkstyle report will be generated -->
                <echo message="Did not generate backward compatibility report for '${project.name}'." />
                <echo message="Old JAR '${deployedlib.jar}' does not exist." />


        </target>


        <!-- ================================================== -->
        <!-- compatibilityCheck                                 -->
        <!-- ================================================== -->
        <taskdef name="checkcompatibility" classname="com.ubs.swidAKK.v2.ant.task.compatibility.BackwardCompatibilityCheckTask">
                <classpath>
                        <fileset dir="${ANT_HOME}/lib">
                                <include name="**/*.jar" />
                        </fileset>
                </classpath>
        </taskdef>


        <target name="-compatibilityCheck" depends="create-release-lib-dir" if="ispresent.file.compcheck-jars" description="Generates a report of backward compatibility breaks.">


                <!-- show console message that checkstyle report will be generated -->
                <echo message="Started generating backward compatibility report for '${project.name}'." />


                <!-- delete old contents -->
                <delete dir="${compatibility.dir}" />
                <mkdir dir="${compatibility.dir}" />
                <mkdir dir="${compatibility.dir}/xml" />
                <mkdir dir="${compatibility.dir}/html" />


                <!-- run the checkstyle code quality analysis -->
                <checkcompatibility oldJarName="${deployedlib.jar}" newJarName="${basedir}/${classes.jar}" destfile="${compatibility.dir}/xml/compatibility-result.xml" classpath="${project.specific.classpath}" debug="true" haltonerror="false"/>


                <!-- run the conversion from XML to HTML of the report -->
                <!-- style basedir="${compatibility.dir}/xml" destdir="${compatibility.dir}/html" includes="**/*.xml" force="true" extension=".html" style="conf/compatibility.xsl" /-->


                <!-- show console message that checkstyle report has been generated -->
                <echo message="Finished generating backward compatibility report for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- copy-config-dir                                    -->
        <!-- ================================================== -->
        <target name="copy-config-dir" depends="check-dir-availablity" if="ispresent.configdir" description="Copies config files to classes directory to deploy them together.">


                <!-- copy all config files to the classe directory to deploy them together -->
                <copy todir="${classes.dir}" verbose="true">
                        <fileset dir="${config.dir}" />
                </copy>


        </target>


        <!-- ================================================== -->
        <!-- create-release-lib-dir                             -->
        <!-- ================================================== -->
        <target name="create-release-lib-dir" depends="init" unless="ispresent.releaselibdir" description="Creates the lib dir used to store all released JARs.">


                <!-- create the directory -->
                <mkdir dir="${release.lib.dir}" />


        </target>


        <!-- ================================================== -->
        <!-- create-release-war-dir                             -->
        <!-- ================================================== -->
        <target name="create-release-war-dir" depends="init" unless="ispresent.releasewardir" description="Creates the dir used to store all released WARs.">


                <!-- create the directory -->
                <mkdir dir="${release.war.dir}" />


        </target>


        <!-- ================================================== -->
        <!-- cvs.checkin.buildnumber                            -->
        <!-- ================================================== -->
        <target name="cvs.checkin.buildnumber" description="Checkin build number to CVS">


                <!-- set the destination directory to '${basedir}' if no destination directory has been set by the caller -->
                <property name="dest.dir" value="${basedir}" />


                <echo message="Checkin to CVS ${cvs.project} (CVS root: ${cvs.root}, Dest: ${dest.dir})" />
                <cvs command="commit -m buildnumber_updated" cvsRoot="${cvs.root}" package="${project.dir}/nightly-build/${file.buildnumber}" dest="${dest.dir}" />
        </target>


        <!-- ================================================== -->
        <!-- do.paths                                           -->
        <!-- ================================================== -->
        <target name="do.paths" depends="do.sourcepath,do.classpath" description="Enhances both source- and classpath based on whether certain directories exist." />


        <!-- ================================================== -->
        <!-- do.sourcepath                                       -->
        <!-- ================================================== -->
        <target name="do.sourcepath" depends="do.sourcepath.configdir, do.sourcepath.noconfigdir,do.sourcepath.testdir,do.sourcepath.notestdir,do.sourcepath.devdir,do.sourcepath.nodevdir" description="Sets the default sourcepath.">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath">


                        <!-- add default classpath -->
                        <path refid="sourcepath.base" />


                        <!-- add config file sdirectory -->
                        <path refid="sourcepath.config" />


                        <!-- add config file sdirectory -->
                        <path refid="sourcepath.test" />


                        <!-- add config file sdirectory -->
                        <path refid="sourcepath.dev" />


                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.sourcepath.configdir                            -->
        <!-- ================================================== -->
        <target name="do.sourcepath.configdir" depends="check-dir-availablity" if="ispresent.configdir" description="Appends config dir to soucepath, if it does exist">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath.config">
                        <!-- add all source files in the config directory -->
                        <pathelement location="${config.dir}" />
                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.sourcepath.noconfigdir                            -->
        <!-- ================================================== -->
        <target name="do.sourcepath.noconfigdir" depends="check-dir-availablity" unless="ispresent.configdir" description="Set config path ID to be empty.">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath.config" />


        </target>


        <!-- ================================================== -->
        <!-- do.sourcepath.devdir                            -->
        <!-- ================================================== -->
        <target name="do.sourcepath.devdir" depends="check-dir-availablity" if="devdir.present" description="Appends dev dir to soucepath, if it does exist">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath.dev">
                        <!-- add all source files in the dev directory -->
                        <pathelement location="${dev.dir}" />
                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.sourcepath.nodevdir                            -->
        <!-- ================================================== -->
        <target name="do.sourcepath.nodevdir" depends="check-dir-availablity" unless="devdir.present" description="Set dev path ID to be empty.">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath.dev" />


        </target>


        <!-- ================================================== -->
        <!-- do.sourcepath.testdir                            -->
        <!-- ================================================== -->
        <target name="do.sourcepath.testdir" depends="check-dir-availablity" if="ispresent.testdir" description="Sets a path reference to the test source directory.">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath.test">


                        <!-- add all source files in the config directory -->
                        <pathelement location="${test.dir}" />


                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.sourcepath.notestdir                            -->
        <!-- ================================================== -->
        <target name="do.sourcepath.notestdir" depends="check-dir-availablity" unless="ispresent.testdir" description="Sets an empty test source path reference.">


                <!-- enhance existing sourcepath -->
                <path id="sourcepath.test" />


        </target>


        <!-- ================================================== -->
        <!-- do.classpath                                       -->
        <!-- ================================================== -->
        <target name="do.classpath" depends="do.classpath.libdir,do.classpath.nolibdir,do.classpath.testlibdir, do.classpath.notestlibdir,do.classpath.serverlibdir,do.classpath.noserverlibdir,do.classpath.projectspecific,do.classpath.noprojectspecific" description="Sets the default classpath with thos dirs and chars that exist.">


                <!-- enhance existing classpath -->
                <path id="classpath">


                        <!-- add default classpath -->
                        <path refid="classpath.base" />


                        <!-- add path containing all default libs required for building this project -->
                        <path refid="classpath.lib" />


                        <!-- path containing all libs used for testing -->
                        <path refid="classpath.testlib" />


                        <!-- add path containing all centralized libs -->
                        <path refid="classpath.serverlib" />


                        <!-- add path containing all project specific references to other projects-->
                        <path refid="classpath.projectspecific" />
                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.serverlibdir                          -->
        <!-- ================================================== -->
        <target name="do.classpath.serverlibdir" if="ispresent.serverlibdir" description="Sets a path reference containing all JARs within the server lib directory.">


                <!-- enhance existing classpath -->
                <path id="classpath.serverlib">


                        <!-- add all JAR files the server-lib directory -->
                        <fileset dir="${serverlib.dir}">
                                <include name="**/*.jar" />
                        </fileset>


                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.noserverlibdir                          -->
        <!-- ================================================== -->
        <target name="do.classpath.noserverlibdir" unless="ispresent.serverlibdir" description="Sets an empty serverlib path reference.">


                <!-- enhance existing classpath -->
                <path id="classpath.serverlib" />


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.serverlibdir                          -->
        <!-- ================================================== -->
        <target name="do.classpath.projectspecific" if="project.specific.classpath" description="Sets a path reference containing references to projects and libs this project is based upon.">


                <!-- enhance existing classpath -->
                <path id="classpath.projectspecific">
                        <pathelement path="${project.specific.classpath}" />
                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.noserverlibdir                          -->
        <!-- ================================================== -->
        <target name="do.classpath.noprojectspecific" unless="project.specific.classpath" description="Sets an empty project specific path reference.">


                <!-- enhance existing classpath -->
                <path id="classpath.projectspecific" />


        </target>



        <!-- ================================================== -->
        <!-- do.classpath.testlibdir                            -->
        <!-- ================================================== -->
        <target name="do.classpath.testlibdir" depends="check-dir-availablity" if="ispresent.testlibdir" description="Sets a path reference containing all JARs within the testlib directory.">


                <!-- enhance existing classpath -->
                <path id="classpath.testlib">


                        <!-- add all JAR files the testing part of the project requires -->
                        <fileset dir="${testlib.dir}">
                                <include name="**/*.jar" />
                        </fileset>


                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.notestlibdir                          -->
        <!-- ================================================== -->
        <target name="do.classpath.notestlibdir" depends="check-dir-availablity" unless="ispresent.testlibdir" description="Sets an empty test lib path reference.">


                <!-- enhance existing classpath -->
                <path id="classpath.testlib" />


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.libdir                            -->
        <!-- ================================================== -->
        <target name="do.classpath.libdir" depends="check-dir-availablity" if="ispresent.libdir" description="Sets a path reference containing all JARs within the lib directory.">


                <!-- enhance existing classpath with JARs within lib directory -->
                <path id="classpath.lib">
                        <!-- add all JAR files the testing part of the project requires -->
                        <fileset dir="${lib.dir}">
                                <include name="**/*.jar" />
                        </fileset>
                </path>


        </target>


        <!-- ================================================== -->
        <!-- do.classpath.nolibdir                              -->
        <!-- ================================================== -->
        <target name="do.classpath.nolibdir" depends="check-dir-availablity" unless="ispresent.libdir" description="Sets an empty lib path reference.">


                <!-- enhance existing classpath -->
                <path id="classpath.lib" />


        </target>


        <!-- ================================================== -->
        <!-- do.copy.metainfdir                                 -->
        <!-- ================================================== -->
        <target name="do.copy.metainfdir" depends="check-dir-availablity" if="ispresent.metainfdir" description="Copies the META-INF directory from the source to the classes directory.">


                <!-- show console message that copy the META-INF direcory has been started -->
                <echo message="start copy META-INF directory'${project.name}'" />


                <!-- copy the META-INF directory -->
                <copy todir="${release.lib.dir}/META-INF" overwrite="true" preservelastmodified="true">
                        <fileset dir="${src.dir}/META-INF" />
                </copy>


                <!-- show console message that copy the META-INF direcory has been finished -->
                <echo message="finished copy META-INF directory'${project.name}'" />


        </target>


        <!-- ================================================== -->
        <!-- doc                                                -->
        <!-- ================================================== -->
        <target name="doc" depends="blackbox, whitebox" description="Generates the full javadoc documentation (blackbox and whitebox)">


                <!-- refresh the eclipse project, if project has been specified -->
                <antcall target="refresh" />


        </target>


        <!-- ================================================== -->
        <!-- ear                                                -->
        <!-- ================================================== -->
        <target name="ear" depends="create-release-lib-dir" description="Creates one EAR with all byte code and one with all sources.">


                <!-- if build number file does not exist - create it -->
                <propertyfile file="${file.buildnumber}">
                        <entry key="buildnumber" type="int" default="1" operation="=" />
                </propertyfile>


                <!-- Read the build number -->
                <property file="${file.buildnumber}" />


                <!-- show console message that building the JAR file has been started -->
                <echo message="Started building EAR for '${project.name}'  (build '${buildnumber}')." />


                <!-- remove all former libraries and EARs -->
                <delete dir="${release.lib.dir}/META-INF" />
                <mkdir dir="${release.lib.dir}/META-INF" />
                <delete file="${classes.ear}" />


                <!-- if a META-INF directory in the source directory exists, all files will be copied -->
                <antcall target="do.copy.metainfdir" />


                <manifest file="${release.lib.dir}/META-INF/MANIFEST.MF" mode="update">
                        <section name="${project.name}">
                                <attribute name="Implementation-Title" value="${project.name}" />
                                <attribute name="Implementation-Vendor" value="${company}" />
                                <attribute name="Implementation-Version" value="${project.major.version}.${project.minor.version} (Build ${buildnumber}, ${tstamp.today}, ${tstamp.tstamp})" />
                                <attribute name="Implementation-URL" value="${build.base.url}" />
                        </section>
                </manifest>


                <!-- create new war file of byte code and descriptors -->
                <!-- Remark: adding the option 'basedir' will lead to dublicated entries -->
                <ear destfile="${classes.ear}" appxml="application.xml" manifest="${release.lib.dir}/META-INF/MANIFEST.MF" update="false" duplicate="fail">


                        <!-- add all WAR files -->
                        <fileset dir="${release.war.dir}">
                                <include name="**/*.war" />
                        </fileset>


                        <!-- includes all meta-files except MANIFEST.MF (which will be included by the parameter manifest in task jar) -->
                        <metainf dir="${release.lib.dir}/META-INF">
                                <include name="**/*" />
                                <exclude name="MANIFEST.MF" />
                        </metainf>
                </ear>


                <!-- create timestamp file -->
                <propertyfile file="${release.lib.dir}/${file.tstamp.build}" comment="Timestamp" />


                <!-- refresh the eclipse project, if project has been specified -->
                <antcall target="refresh" />


                <!-- show console message that building the JAR file has been finished -->
                <echo message="Finished building EAR for '${project.name}'." />
        </target>


        <!-- ================================================== -->
        <!-- ear-deploy                                         -->
        <!-- ================================================== -->
        <target name="ear-deploy" depends="init" if="deployment.dir" description="Deploys EAR files to a file server.">


                <!-- show console message that building the JAR file has been started -->
                <echo message="Started deploying the EAR to '${deployment.dir}' for '${project.name}'." />


                <!-- copies the JAR file to the deployment dir -->
                <copy file="${classes.ear}" tofile="${deployment.dir}/${general.basename}.ear" overwrite="true" />


                <!-- show console message that deploying the JAR file has been finished -->
                <echo message="Finished deploying the EAR to '${deployment.dir}' for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- full-build                                         -->
        <!-- ================================================== -->
        <target name="full-build" description="Performs a full build with compilation, documentation, qa, and testing">


                <!-- call all full-build relevant targets in the appropriate order -->
                <antcall target="backup" />
                <antcall target="clean" />


                <!-- create all artifacts -->
                <antcall target="archive" />
                <antcall target="doc" />
                <antcall target="qa" />


                <!-- finally store the newly generated libs to the local EFP -->
                <antcall target="efp-deploy" />


                <!-- make sure that all created files are accessible -->
                <chmod dir="${root.dir}" includes="**/*" perm="${chmod.prefs}" verbose="true" />
        </target>


        <!-- ================================================== -->
        <!-- getbase                                            -->
        <!-- ================================================== -->
        <target name="getbase" description="Copies all files that are required for the build from a web source.">


                <!-- get all required files for building -->
                <get src="${build.base.url}/UBS-ACE-Checks.xml" dest="${build.config.dir}/UBS-ACE-Checks.xml" />
                <get src="${build.base.url}/checkstyle-noframes-sorted.xsl" dest="${build.config.dir}/checkstyle-noframes-sorted.xsl" />
                <get src="${build.base.url}/jdepend.xsl" dest="${build.config.dir}/jdepend.xsl" />
                <get src="${build.base.url}/junit-frames.xsl" dest="${build.config.dir}/junit-frames.xsl" />
                <get src="${build.base.url}/checkstyle_conf.xml" dest="${build.config.dir}/checkstyle_conf.xml" />
                <get src="${build.base.url}/configuration_1_1.dtd" dest="${build.config.dir}/configuration_1_1.dtd" />


                <!-- get all required files for web -->
                <get src="${build.base.url}/ProjectFrame.html" dest="${build.config.dir}/ProjectFrame.html" />
                <get src="${build.base.url}/index_without_history.html" dest="${build.config.dir}/index.html" />
                <get src="${build.base.url}/nav.css" dest="${build.config.dir}/nav.css" />
                <get src="${build.base.url}/nav.js" dest="${build.config.dir}/nav.js" />


                <!-- get all file required for jibx -->
                <get src="${build.base.url}/log4j.properties" dest="${build.config.dir}/log4j.properties" />


                <!-- get all required files for configuration -->
                <mkdir dir="${build.config.dir}/configuration" />
                <get src="${build.base.url}/configuration/car-build.xml" dest="${build.config.dir}/configuration/car-build.xml" />


                <!-- get all required files for java archives -->
                <mkdir dir="${build.config.dir}/archives" />
                <get src="${build.base.url}/archives/jar-build.xml" dest="${build.config.dir}/archives/jar-build.xml" />
                <get src="${build.base.url}/archives/war-build.xml" dest="${build.config.dir}/archives/war-build.xml" />
                <get src="${build.base.url}/archives/zip-build.xml" dest="${build.config.dir}/archives/zip-build.xml" />


                <!-- get all required files for logging -->
                <mkdir dir="${build.config.dir}/logging" />
                <get src="${build.base.url}/logging/mail-logger.properties" dest="${build.config.dir}/logging/mail-logger.properties" />


                <!-- get all required files for utils -->
                <mkdir dir="${build.config.dir}/util" />
                <get src="${build.base.url}/util/base-build-util.xml" dest="${build.config.dir}/util/base-build-util.xml" />


                <!-- get all required files for version control -->
                <mkdir dir="${build.config.dir}/versioncontrol" />
                <get src="${build.base.url}/versioncontrol/ds-ant-utils.xml" dest="${build.config.dir}/versioncontrol/ds-ant-utils.xml" />
                <get src="${build.base.url}/versioncontrol/ds-connection.properties" dest="${build.config.dir}/versioncontrol/ds-connection.properties" />


                <!-- get all required files for workbenches -->
                <mkdir dir="${build.config.dir}/workbench" />
                <get src="${build.base.url}/workbench/workbench-build.xml" dest="${build.config.dir}/workbench/workbench-build.xml" />
                <get src="${build.base.url}/workbench/check-wb-cars.xml" dest="${build.config.dir}/workbench/check-wb-cars.xml" />
                <get src="${build.base.url}/workbench/check-wb-cars.properties" dest="${build.config.dir}/workbench/check-wb-cars.properties" />


                <mkdir dir="${build.config.dir}/workbench/xsl" />
                <get src="${build.base.url}/workbench/xsl/wb-entrytest-functional.xsl" dest="${build.config.dir}/workbench/xsl/wb-entrytest-functional.xsl" />
                <get src="${build.base.url}/workbench/xsl/wb-entrytest-naming.xsl" dest="${build.config.dir}/workbench/xsl/wb-entrytest-naming.xsl" />


                <mkdir dir="${build.config.dir}/workbench/xsd" />
                <get src="${build.base.url}/workbench/xsd/context.xsd" dest="${build.config.dir}/workbench/xsd/context.xsd" />
                <get src="${build.base.url}/workbench/xsd/disclaimers.xsd" dest="${build.config.dir}/workbench/xsd/disclaimers.xsd" />
                <get src="${build.base.url}/workbench/xsd/link.xsd" dest="${build.config.dir}/workbench/xsd/link.xsd" />
                <get src="${build.base.url}/workbench/xsd/properties.xsd" dest="${build.config.dir}/workbench/xsd/properties.xsd" />
                <get src="${build.base.url}/workbench/xsd/regions.xsd" dest="${build.config.dir}/workbench/xsd/regions.xsd" />
                <get src="${build.base.url}/workbench/xsd/userdata.xsd" dest="${build.config.dir}/workbench/xsd/userdata.xsd" />
                <get src="${build.base.url}/workbench/xsd/workbench.xsd" dest="${build.config.dir}/workbench/xsd/workbench.xsd" />


        </target>


        <!-- ================================================== -->
        <!-- getJar                                             -->
        <!-- ================================================== -->
        <target name="getJar" if="sub.rootdir,sub.libdir" description="Copies a defined JAR file into the lib dir of this project.">


                <!-- copy libraries if property has been specified -->
                <antcall target="sub-project.copy-lib" />


        </target>


        <!-- ================================================== -->
        <!-- getWar                                             -->
        <!-- ================================================== -->
        <target name="getWar" depends="create-release-war-dir" if="war.project.dir" description="Copies the WAR file of a project to the EAR directory">
                <copy todir="${release.war.dir}">
                        <fileset dir="../../${war.project.dir}/nightly-build/release/lib" includes="**/*.war" />
                </copy>
        </target>


        <!-- ================================================== -->
        <!-- init                                               -->
        <!-- ================================================== -->
        <target name="init" depends="do.paths" description="Initializes all loggers, timestamps, etc.">


                <tstamp>
                        <format property="tstamp.today" pattern="d. MMMM yyyy" locale="en" />
                        <format property="tstamp.tstamp" pattern="hh:mm:ss" locale="en" />
                </tstamp>


                <!-- indicate that we are on unix and we shoudl not refresh WSAD -->
                <available classname="org.eclipse.ant.core.AntRunner" property="eclipse.present" />


                <!-- indicate where we retrieve the sources/ classes from -->
                <pathconvert dirsep="${file.separator}" pathsep="${path.separator}" property="mysourcepath" refid="sourcepath" />
                <pathconvert dirsep="${file.separator}" pathsep="${path.separator}" property="myclasspath" refid="classpath" />


                <!-- indicate that project build has been started -->
                <echo message="----------------------------------------------------------------------------------------------------" />
                <echo message="Project=${project.name}" />
                <echo message="Build-Time=${tstamp.tstamp} on ${tstamp.today}" />
                <echo message="User=${user.name}" />
                <echo message="Build-File=${ant.file}" />
                <echo message="Java-Home=${java.home}" />
                <echo message="----------------------------------------------------------------------------------------------------" />
                <echo message="Sourcepath=${mysourcepath}" />
                <echo message="----------------------------------------------------------------------------------------------------" />
                <echo message="Classpath=${myclasspath}" />
                <echo message="----------------------------------------------------------------------------------------------------" />


                <!-- make user all required environment settings are there -->
                <antcall target="do.checkEnvironment" />
        </target>


        <!-- ================================================== -->
        <!-- archive                                            -->
        <!-- ================================================== -->
        <target name="archive" depends="init" description="Creates an archive using default settings and manifests based on the type of the artifact we have.">


                <!-- create the release directory -->
                <delete dir="${release.lib.dir}" />
                <mkdir dir="${release.lib.dir}" />


                <!-- determine whether a source folder exists -->
                <condition property="ispresent.java-sources">
                        <or>
                                <available file="${src.dir}" type="dir" property="ispresent.sourcedir" />
                                <available file="${test.dir}" type="dir" property="ispresent.testdir" />
                        </or>
                </condition>


                <!-- process all kinds of artifects that might be part of the solution -->
                <antcall target="-car" />
                <antcall target="-jar" />
                <antcall target="-war" />


                <!-- refresh the project within eclipse -->
                <antcall target="refresh" />


        </target>


        <!-- ================================================== -->
        <!-- car (DEPRECATED)                                   -->
        <!-- ================================================== -->
        <target name="car" depends="init" if="ispresent.configdir" description="Creates a configuration archive using default settings and manifests.">
                <antcall target="archive" />
        </target>


        <!-- ================================================== -->
        <!-- car                                                -->
        <!-- ================================================== -->
        <target name="-car" depends="init" if="ispresent.configdir" description="Creates a configuration archive using default settings and manifests.">
                <ant antfile="${build.config.dir}/configuration/car-build.xml" target="car" inheritall="true" />
        </target>


        <!-- ================================================== -->
        <!-- jar (DEPRECATED)                                   -->
        <!-- ================================================== -->
        <target name="jar" unless="ispresent.webxml" depends="init" description="Deprecated: since v3.2 use 'archive'.">
                <antcall target="archive" />
        </target>


        <!-- ================================================== -->
        <!-- jar                                                -->
        <!-- ================================================== -->
        <target name="-jar" if="ispresent.java-sources" unless="ispresent.webxml" depends="init" description="Creates a JAR file and the sources ZIP also taking a possible TLD for local libs into account.">


                <!-- make sure that sources get re-compiled before starting the archiving -->
                <antcall target="compile" />


                <!-- let a possibly existing TLD be copied to the classes dir so that it will be jarred -->
                <available file="${tld.dir}" type="dir" property="ispresent.dir.tld" />
                <antcall target="-jar.tld" />


                <!-- create the Java archive -->
                <ant antfile="${build.config.dir}/archives/jar-build.xml" target="jar" inheritall="true" />


                <!-- create the source archive -->
                <ant antfile="${build.config.dir}/archives/zip-build.xml" target="zip.source" inheritall="true" />


        </target>


        <!-- ================================================== -->
        <!-- -jar.tld                                           -->
        <!-- ================================================== -->
        <target name="-jar.tld" if="ispresent.dir.tld" description="Copies the TLD files from an exitsing dir to the classes folder for letting it being jared.">
                <!-- copy tld to classes.dir to make sure it is jarred  -->
                <copy todir="${classes.dir}/tld" verbose="true">
                        <fileset dir="${tld.dir}" includes="**/*.tld" casesensitive="yes" />
                </copy>
        </target>


        <!-- ================================================== -->
        <!-- jar-deploy DEPRECATED                              -->
        <!-- ================================================== -->
        <target name="jar-deploy" if="deployment.dir" description="Deploys archive files to a local portal server.">


                <!-- try deploying Java archive -->
                <ant antfile="${build.config.dir}/archives/jar-build.xml" target="wps-deploy" inheritall="true" />


                <!-- try deploying configuration archive -->
                <ant antfile="${build.config.dir}/configuration/car-build.xml" target="wps-deploy" inheritall="true" />


        </target>


        <!-- ================================================== -->
        <!-- wps-deploy                                         -->
        <!-- ================================================== -->
        <target name="wps-deploy" if="deployment.dir" description="Deploys archive files to a local portal server.">


                <!-- try deploying Java archive -->
                <ant antfile="${build.config.dir}/archives/jar-build.xml" target="wps-deploy" inheritall="true" />


                <!-- try deploying configuration archive -->
                <ant antfile="${build.config.dir}/configuration/car-build.xml" target="wps-deploy" inheritall="true" />


        </target>


        <!-- ================================================== -->
        <!-- efp-deploy                                         -->
        <!-- ================================================== -->
        <target name="efp-deploy" description="If the target directory has been specified the artifacts will be deployed to it finally">


                <!-- try deploying Java archive -->
                <ant antfile="${build.config.dir}/archives/jar-build.xml" target="efp-deploy" inheritall="true" />


                <!-- try deploying configuration archive -->
                <ant antfile="${build.config.dir}/configuration/car-build.xml" target="efp-deploy" inheritall="true" />
        </target>


        <!-- ================================================== -->
        <!-- jDepend                                            -->
        <!-- ================================================== -->
        <taskdef name="jdepend" classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask">
                <classpath>
                        <fileset dir="${ANT_HOME}/lib">
                                <include name="**/*.jar" />
                        </fileset>
                </classpath>
        </taskdef>


        <target name="jdepend" depends="create-release-lib-dir" if="ispresent.classesdir" description="Generates a report of package design metrics and dependencies.">


                <!-- show console message that checkstyle report has been generated -->
                <echo message="Started generating dependency report for '${project.name}'." />


                <!-- delete old contents and create dirs again -->
                <delete dir="${jdepend.dir}" />
                <mkdir dir="${jdepend.dir}" />
                <mkdir dir="${jdepend.dir}/xml" />
                <mkdir dir="${jdepend.dir}/html" />


                <!-- run jdepend using an XML output -->
                <jdepend format="xml" classpathref="classpath" outputfile="${jdepend.dir}/xml/index.xml">
                        <sourcespath>
                                <pathelement location="${classes.dir}" />
                        </sourcespath>
                </jdepend>


                <!-- re-format the XML to an HTML output -->
                <style basedir="${jdepend.dir}/xml" destdir="${jdepend.dir}/html" includes="**/*.xml" force="true" style="${build.config.dir}/jdepend.xsl" />


                <!-- create timestamp file -->
                <propertyfile file="${jdepend.dir}/${file.tstamp.build}" comment="Timestamp" />


                <!-- show console message that checkstyle report has been generated -->
                <echo message="Finished generating dependency report for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- junit                                              -->
        <!-- ================================================== -->
        <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
                <classpath>
                        <fileset dir="${ANT_HOME}/lib">
                                <include name="**/*.jar" />
                        </fileset>
                </classpath>
        </taskdef>


        <target name="junit" depends="create-release-lib-dir" if="ispresent.testdir" description="Generates a report of test results using JUnit test classes.">


                <!-- delete old contents and create dirs again -->
                <delete dir="${junit.dir}" />
                <mkdir dir="${junit.dir}" />
                <mkdir dir="${junit.dir}/xml" />
                <mkdir dir="${junit.dir}/html" />


                <!-- make sure directories are available -->
                <available file="${classes.dir}" type="dir" property="ispresent.classesdir" />
                <available file="${jibx.temp.dir}" type="dir" property="ispresent.jibxtempdir" />
                <echo message="Required directories: ${classes.dir}=${ispresent.classesdir}; ${jibx.temp.dir}=${ispresent.jibxtempdir}" />


                <!-- run jdepend using an XML output -->
                <junit printsummary="yes" haltonfailure="no" haltonerror="no">
                        <classpath>
                                <fileset dir=".">
                                        <include name="${jibx.temp.dir}/**/*" if="ispresent.jibxtempdir" />
                                        <include name="${classes.dir}/**/*" if="ispresent.classesdir" />
                                </fileset>
                                <pathelement path="${project.specific.classpath}" />
                                <pathelement location="${EFP}/thirdp/apache-xml/xerces/jars/xerces-5.jar" />
                        </classpath>
                        <formatter type="xml" />
                        <batchtest fork="yes" todir="${junit.dir}/xml">
                                <fileset dir="${test.dir}">
                                        <include name="**/*Test.java" />
                                        <exclude name="**/AllTests*.java" />
                                        <exclude name="**/Abstract*.java" />
                                        <patternset>
                                                <include name="../${dev.dir}/**/*Test.java" if="ispresent.devdir" />
                                                <exclude name="../${dev.dir}/**/AllTests*.java" if="ispresent.devdir" />
                                        </patternset>
                                </fileset>
                        </batchtest>
                </junit>


                <!-- re-format the XML to an HTML output -->
                <junitreport todir="${junit.dir}/xml">
                        <fileset dir="${junit.dir}/xml">
                                <include name="*.xml" />
                        </fileset>
                        <report format="frames" todir="${junit.dir}/html" styledir="${build.config.dir}" />
                </junitreport>


        </target>


        <!-- ================================================== -->
        <!-- metrics                                            -->
        <!-- ================================================== -->
        <target name="metrics" depends="create-release-lib-dir" if="ispresent.sourcedir" description="Determines OO metrics for the current project.">


                <!-- show console message that metrics report will be generated -->
                <echo message="Started generating Metrics report for '${project.name}'." />


                <!-- delete old contents and create dirs again -->
                <delete dir="${metrics.dir}" />
                <mkdir dir="${metrics.dir}" />
                <mkdir dir="${metrics.dir}/xml" />
                <mkdir dir="${metrics.dir}/html" />


                <eclipse.refreshLocal resource="${project.name.wsad}" depth="infinite" />
                <metrics.enable projectName="${project.name.wsad}" />


                <!-- build all classes gathering the metrics (build types= incremental, full, auto) -->
                <eclipse.build ProjectName="${project.name.wsad}" BuildType="incremental" errorOut="errors.xml" errorFormat="txt" failOnError="false" />


                <!-- export metrics to a file -->
                <metrics.export projectName="${project.name.wsad}" file="${metrics.dir}/xml/metrics.xml" />


                <!-- show console message that checkstyle report has been generated -->
                <echo message="Finished generating Metrics report for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- project.copy-lib                                   -->
        <!-- ================================================== -->
        <target name="project.copy-lib" depends="init" if="sub.libdir" description="Copies the JAR files of a project to a defined directory in the calling project.">


                <!-- indicate what we intend to execute -->
                <echo message="Trying to copy JARs from dir '${sub.rootdir}/nightly-build/${release.lib.dir}' to dir '${sub.libdir}'." />


                <copy toDir="${sub.libdir}" overwrite="true" preservelastmodified="true">
                        <fileset dir="${sub.rootdir}/nightly-build/${release.lib.dir}" includes="**/*.jar">
                                <exclude name="**/*-src.jar" />
                                <exclude name="**/*-w-doc.jar" />
                                <exclude name="**/*-b-doc.jar" />
                                <exclude name="**/sav-*.jar" />
                                <exclude name="**/new-*.jar" />
                        </fileset>
                </copy>


        </target>


        <!-- ================================================== -->
        <!-- project.exec-target                                -->
        <!-- ================================================== -->
        <target name="project.exec-target" depends="init" description="Executes a certain target in projects the calling project depends on.">


                <!-- indicate what we intend to execute -->
                <echo message="Trying to execute target '${sub.target}' in build file '${sub.rootdir}/nightly-build'." />


                <!-- execute the target in the called build file of the sub-project -->
                <ant dir="${sub.rootdir}/nightly-build" antfile="build.xml" inheritAll="false" target="${sub.target}">
                        <property name="global.tstamp.build" value="${global.tstamp.build}" />
                </ant>


                <!-- copy libraries if property has been specified -->
                <antcall target="project.copy-lib" />


        </target>


        <!-- ================================================== -->
        <!-- qa                                                 -->
        <!-- ================================================== -->
        <target name="qa" depends="checkstyle, jdepend, junit, compatibility" description="Generates all tests and documentation for quality assurance.">


                <!-- refresh the eclipse project, if project has been specified -->
                <antcall target="refresh" />


        </target>


        <!-- ================================================== -->
        <!-- refresh                                            -->
        <!-- ================================================== -->
        <target name="refresh" depends="init" description="Refreshes the eclipse project with latest sources." if="eclipse.present">


                <!-- indicate what we intend to execute -->
                <echo message="Refreshing Eclipse project '${project.name.wsad}'." />


                <!-- refresh the project within eclipse -->
                <!-- depth can be zero, one or infinite -->
                <eclipse.refreshLocal resource="${project.name.wsad}" depth="infinite" />


        </target>


        <!-- ================================================== -->
        <!-- remove.project                                     -->
        <!-- ================================================== -->
        <target name="remove.project" description="Removes a certain project from the file system.">


                <!-- set the destination directory to '${basedir}' if no destination directory has been set by the caller -->
                <property name="dest.dir" value="${basedir}" />


                <echo message="Started removing project directory '${project.dir}' from file system" />
                <delete dir="${dest.dir}/${project.dir}" />
                <echo message="Finished removing project directory '${project.dir}' from file system" />


        </target>


        <!-- ================================================== -->
        <!-- sub-project.copy-lib                               -->
        <!-- ================================================== -->
        <target name="sub-project.copy-lib" depends="init" if="sub.libdir" description="Copies the JAR files of a sub project to a defined directory in the calling project.">


                <!-- indicate what we intend to execute -->
                <echo message="Trying to copy JARs from dir '../../${sub.rootdir}/nightly-build/${release.lib.dir}' to dir '${sub.libdir}'." />


                <copy toDir="${sub.libdir}" overwrite="true" preservelastmodified="true">
                        <fileset dir="../../${sub.rootdir}/nightly-build/${release.lib.dir}" includes="**/*.jar">
                                <exclude name="**/*-src.jar" />
                                <exclude name="**/*-w-doc.jar" />
                                <exclude name="**/*-b-doc.jar" />
                                <exclude name="**/sav-*.jar" />
                                <exclude name="**/new-*.jar" />
                        </fileset>
                </copy>


        </target>


        <!-- ================================================== -->
        <!-- sub-project.exec-target                            -->
        <!-- ================================================== -->
        <target name="sub-project.exec-target" depends="init" description="Executes a certain target in projects the calling project depends on.">


                <!-- indicate what we intend to execute -->
                <echo message="Trying to execute target '${sub.target}' in build file '../../${sub.rootdir}/nightly-build'." />


                <!-- execute the target in the called build file of the sub-project -->
                <ant dir="../../${sub.rootdir}/nightly-build" antfile="build.xml" inheritAll="false" target="${sub.target}">
                        <property name="global.tstamp.build" value="${global.tstamp.build}" />
                </ant>


                <!-- copy libraries if property has been specified -->
                <antcall target="sub-project.copy-lib" />


        </target>


        <!-- ================================================== -->
        <!-- war (DEPRECATED)                                   -->
        <!-- ================================================== -->
        <target name="war" depends="init" if="ispresent.webxml" description="Deprecated since v3.2 use 'archive'.">


                <antcall target="archive" />


        </target>


        <!-- ================================================== -->
        <!-- war                                                -->
        <!-- ================================================== -->
        <target name="-war" depends="init" if="ispresent.webxml" description="Creates one WAR with all byte code and one with all sources.">


                <!-- make sure that sources get re-compiled before starting the archiving -->
                <antcall target="compile" />


                <!-- create the Web archive -->
                <ant antfile="${build.config.dir}/archives/war-build.xml" target="war" inheritall="true" />


                <!-- create the source archive -->
                <ant antfile="${build.config.dir}/archives/zip-build.xml" target="zip.source" inheritall="true" />


        </target>


        <!-- ================================================== -->
        <!-- war-deploy                                         -->
        <!-- ================================================== -->
        <target name="war-deploy" depends="init" if="deployment.dir" description="Deploys WAR files to a file server.">


                <!-- show console message that building the JAR file has been started -->
                <echo message="Started deploying the WAR to '${deployment.dir}' for '${project.name}'." />


                <!-- copies the JAR file to the deployment dir -->
                <copy file="${classes.war}" tofile="${deployment.dir}/${general.basename}.war" overwrite="true" />


                <!-- show console message that deploying the JAR file has been finished -->
                <echo message="Finished deploying the WAR to '${deployment.dir}' for '${project.name}'." />


        </target>


        <!-- ================================================== -->
        <!-- website.upload.dir                                 -->
        <!-- ================================================== -->
        <target name="website.upload.dir" if="dir.present" description="Install a directory into a certain web-directory.">


                <echo message="Started upload directory (including all files and subdirectories) ${dir} to ${remotedir} for '${project.name}'" />


                <!-- if the remote directory already exists nothing will be changed -->
                <ftp action="mkdir" server="${ftp.host}" remotedir="${remotedir}" userid="${ftp.user}" password="${ftp.password}" ignoreNoncriticalErrors="yes" />


                <!-- we delete all files in it (directories won't be deleted but there content) -->
                <ftp action="del" server="${ftp.host}" remotedir="${remotedir}" userid="${ftp.user}" password="${ftp.password}" ignoreNoncriticalErrors="yes">


                        <fileset>
                                <include name="**/*" />
                        </fileset>
                </ftp>


                <!-- send all files and directories (toplevel and in subdirectories) of 'dir' -->
                <ftp server="${ftp.host}" remotedir="${remotedir}" userid="${ftp.user}" password="${ftp.password}" ignoreNoncriticalErrors="yes">
                        <fileset dir="${dir}" />
                </ftp>


                <echo message="Finished upload directory (including all files and subdirectories) ${dir} to ${remotedir} for '${project.name}'" />


        </target>


        <!-- ================================================== -->
        <!-- website.upload.dir.with.check                      -->
        <!-- ================================================== -->
        <target name="website.upload.dir.with.check" description="Checks if a certain directory exist and calls the specified target.">


                <echo message="Started check if upload directory ${dir} exists for '${project.name}'" />


                <!-- checks if the directory 'dir' exists -->
                <available file="${dir}" type="dir" property="dir.present" />
                <echo message="Exists directory: ${dir.present}" />


                <antcall target="${target}" />


                <echo message="Finished check if upload directory ${dir} exists for '${project.name}'" />


        </target>


        <!-- ================================================== -->
        <!-- website.upload.files                               -->
        <!-- ================================================== -->
        <target name="website.upload.files" if="dir.present" description="Install websites into a certain web-directory.">


                <echo message="Started upload files of directory ${dir} to ${remotedir} for '${project.name}'" />


                <!-- if the remote directory already exists nothing will be changed -->
                <ftp action="mkdir" server="${ftp.host}" remotedir="${remotedir}" userid="${ftp.user}" password="${ftp.password}" ignoreNoncriticalErrors="yes" />


                <!-- we delete all files in the toplevel but none files in subdirectories or subdirectories itself -->
                <ftp action="del" server="${ftp.host}" remotedir="${remotedir}" userid="${ftp.user}" password="${ftp.password}" ignoreNoncriticalErrors="yes">


                        <fileset>
                                <include name="*" />
                        </fileset>
                </ftp>


                <!-- send all files in toplevel but none files in subdirectories or subdirectories itself of 'dir' -->
                <ftp server="${ftp.host}" remotedir="${remotedir}" userid="${ftp.user}" password="${ftp.password}" ignoreNoncriticalErrors="yes">
                        <fileset dir="${dir}">
                                <include name="*" />
                        </fileset>
                </ftp>


                <echo message="Finished upload files of directory ${dir} to ${remotedir} for '${project.name}'" />


        </target>


        <!-- ================================================== -->
        <!-- whitebox                                           -->
        <!-- ================================================== -->
        <target name="whitebox" depends="create-release-lib-dir" if="ispresent.sourcedir" description="Generates the javadoc that is required by component maintaining engineers.">


                <!-- Indicate the task that has been started -->
                <echo message="Generating whitebox javadoc for '${project.name}'." />


                <!-- delete old contents -->
                <delete dir="${whitebox.dir}" />
                <mkdir dir="${whitebox.dir}" />


                <!-- add whole package documentation that is not standard javadoc -->
                <copy toDir="${whitebox.dir}" overwrite="true" preservelastmodified="true">
                        <fileset dir="${src.dir}" includes="**/*.html" excludes="**/package.html" />
                </copy>


                <!-- create java doc -->
                <javadoc packagenames="${packages}" destdir="${whitebox.dir}" author="true" version="true" windowtitle="${project.name}" private="true" useexternalfile="yes" doctitle="&lt;h1&gt;${project.name}&lt;/h1&gt;" bottom="&lt;i&gt;Copyright &#169; 2003 ${company}. All Rights Reserved.&lt;/i&gt;">
                        <classpath refid="classpath" />
                        <sourcepath refid="sourcepath" />
                </javadoc>


                <!-- define local properties -->
                <property name="file.buildnumber" value="buildnumber.properties" />


                <!-- Reads the new build number -->
                <property file="${file.buildnumber}" />


                <!-- definition of the build-number that should be used when buidl is not official -->
                <property name="buildnumber" value=" not offical!" />


                <!-- create the standard manifest -->
                <ant antfile="${build.config.dir}/util/base-build-util.xml" target="createManifest" inheritall="true">
                        <property name="caller.dir.target" value="${whitebox.dir}"/>
                        <property name="caller.name.project" value="${project.name}"/>
                        <property name="caller.swid" value="${project.swid}"/>
                        <property name="caller.version.major" value="${project.major.version}"/>
                        <property name="caller.version.minor" value="${project.minor.version}"/>
                        <property name="caller.number.build" value="${buildnumber}"/>
                </ant>


                <!-- delete and create new jar file of docs -->
                <delete file="${whitebox.jar}" />
                <jar basedir="${whitebox.dir}" destfile="${whitebox.jar}" 
                        manifest="${whitebox.dir}/manifest.mf" >
                </jar>


                <!-- create timestamp file -->
                <propertyfile file="${whitebox.dir}/${file.tstamp.build}" comment="Timestamp" />


                <echo message="Finished generating whitebox javadoc for '${project.name}'." />
        </target>


        <!-- ================================================== -->
        <!-- do.checkEnvironment                                -->
        <!-- ================================================== -->
        <target name="do.checkEnvironment" unless="env.WAS_BASE_HOME" description="Indicates that an important environment variable is missing.">
                <fail message="The environment variable 'WAS_BASE_HOME' is missing. Please add that to your NT environment." unless="env.WAS_BASE_HOME" />
                <fail message="The environment variable 'WPS_BASE_HOME' is missing. Please add that to your NT environment." unless="env.WPS_BASE_HOME" />
                <fail message="The environment variable 'UBS_COMMON_LIBS' is missing. Please add that to your NT environment." unless="env.UBS_COMMON_LIBS" />
        </target>
</project> 