<?xml version="1.0" encoding="UTF-8"?>
<project name="cdm" default="info">

    <target name="info">
        <echo message=""/>
        <echo message="=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="/>
        <echo message=""/>
        <echo message="At minimum you need to specify the 'env' environment like so:"/>
        <echo message="build -Denv=local [target] [target]"/>
        <echo message=""/>
        <echo message="The following are the build properties and their defaults:"/>
        <echo message="  'env'      (defaults to 'local')"/>
        <echo message=""/>
        <echo message="The following are required in the build properties file:"/>
        <echo message="  'output'   (the output build directory)"/>
        <echo message="  'compiler' (the java compiler 'jikes' or 'modern')"/>
        <echo message="  'delay'    (delay before tests start after weblogic is up)"/>
        <echo message="  'weblogic' (your weblogic home (not bea - weblogic))"/>
        <echo message="  'username' (your weblogic administrator username)"/>
        <echo message="  'password' (your weblogic administrator password)"/>
        <echo message=""/>
        <echo message="You may place a build.properties file in environment folders"/>
        <echo message="in ./conf/env/local or ./conf/env/dev etc. for your specific"/>
        <echo message="environment."/>
        <echo message=""/>
        <echo message="[targets] are as follows:"/>
        <echo message="  clean       clean out the entire build"/>
        <echo message="  cleanclass  clean out the classes"/>
        <echo message="  cleanbuild  clean out the build jars, wars and ears"/>
        <echo message="  compile     compile all of the code"/>
        <echo message="  jar         makes (command line) client and applet jars"/>
        <echo message="  jarcdm      make a jar of the entire project for export to QA or PROD"/>
        <echo message="  dist        build jars, war and ejb packages"/>
        <echo message="  bml         run the BML sync application"/>
        <echo message="  start       start weblogic server"/>
        <echo message="  stop        stop weblogic server"/>
        <echo message="  test        start, run all tests, report and stop"/>
        <echo message="  testcase    excercise the single &quot;testcase&quot; test"/>
        <echo message="  xml         validate xml documents"/>
        <echo message="  jdepend     run jdepend audit tool against code"/>
        <echo message="  doc         generate doccheck and javadoc"/>
        <echo message="  index       build a build index page"/>
        <echo message="  all         builds, executes tests, docs - the works"/>
        <echo message="  jdiff       compares two versions of the project (specified in build.properties)"/>
        <echo message="  deploydev   deploys the build to Dev"/>
        <echo message="  deploydev2   deploys the build to Dev2"/>
        <echo message="  deployqa    deploys the build to QA"/>
        <echo message="  deployqab   deploys the build to QAb"/>
        <echo message="  deployprod  deploys the build to Prod"/>
        <echo message=""/>
        <echo message="=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="/>
        <echo message=""/>
        <echo message="In case of an emergency, do NOT panic.  An oxygen mask will "/>
        <echo message="deploy from your cubicle.  Place the oxygen mask over your "/>
        <echo message="head and mouth and breath normally.  If your cubicle neighbor "/>
        <echo message="needs help with his/her mask, please put on your mask first and"/>
        <echo message="then proceed to help.  In the event of a core dump your"/>
        <echo message="mousepad will act as a floatation device."/>
        <echo message=""/>
        <echo message="Thanks for flying CDM!"/>
        <echo message=""/>
        <echo message="=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="/>
        <echo message=""/>
    </target>


    <!--sets the default environment to "local" unless the "env" variable is defined somewhere -
    in our case, in the -D paramter of the server build-->
    <target name="defaults" unless="env">
        <echo message="Setting environment to defaults"/>
        <property name="env" value="local"/>
    </target>


    <target name="setup" depends="defaults" unless="setup.done">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

        <!--        We parse the command line to determine if we're getting "dev" or "dev2" - main server or batch server?-->
        <!--        set to batch if it's the batch server-->
        <if>
            <contains string="${env}" substring="2"/>
            <then>
                <property name="mainOrBatch" value="batch"/>
            </then>
            <else>
                <property name="mainOrBatch" value="main"/>
            </else>
        </if>

        <!--        populate the variables with the right environment settings-->
        <switch value="${env}">
            <case value="dev">
                <property name="envr" value="dev"/>
            </case>
            <case value="dev2">
                <property name="envr" value="dev"/>
            </case>
            <case value="qa">
                <property name="envr" value="qa"/>
            </case>
            <case value="qa2">
                <property name="envr" value="qa"/>
            </case>
            <case value="qab">
                <property name="envr" value="qab"/>
            </case>
            <case value="qab2">
                <property name="envr" value="qab"/>
            </case>
            <case value="prod">
                <property name="envr" value="prod"/>
            </case>
            <case value="prod2">
                <property name="envr" value="prod"/>
            </case>
            <default>
                <!--                the default is "local"-->
                <property name="envr" value="local"/>
                <property name="env.dir.name" value=""/>
                <property name="property.file.name" value="${basedir}/conf/env/local/build.properties"/>
                <property name="meta.inf.location" value="${basedir}/conf/env/local/META-INF"/><!--tod o - not needed, it's a server deploy issue WRONG!-->
            </default>
        </switch>

        <!--        if these were assigned a value in the 'local' case above, they can't be overwritten.  However, if it's a case-->
        <!--        other than 'local' (i.e., dev, qa, or prod), then we need to assign the values.-->
        <property name="meta.inf.location" value="${basedir}/conf/env/${mainOrBatch}/META-INF"/><!--tod o - not needed, it's a server deploy issue WRONG!-->


        <!--        Kind of a hack, but sometimes hacks are needed.  In this case, build.properties is needed for local development,-->
        <!--        while it's a generated file (based on deploy.properties) for dev, qa, and prod.  So, depending on which environment-->
        <!--        we're in, it's retrieved from different places.  Note that if it's local, it was assigned above, and can't be overwritten-->
        <property name="property.file.name" value="${basedir}/conf/resource/build.properties"/>

        <!--        <property file="${basedir}/conf/env/${prepareTargetEnvName}/build.properties"/>-->
        <property name="env.dir.name" value="${mainOrBatch}"/>

        <echo>Reading properties from file ${property.file.name}</echo>
        <property file="${property.file.name}"/>
        <property name="build.compiler" value="${compiler}"/>
        <path id="lib.path">
            <!-- http://barracuda.enhydra.org -->
            <pathelement location="${basedir}/lib/barracuda.jar"/>
            <pathelement location="${basedir}/lib/bconfig.jar"/>
            <pathelement location="${basedir}/lib/xmlc.jar"/>
            <!-- java runtime needed by jikes compiler -->
            <pathelement location="${java.home}/lib/rt.jar"/>
            <!-- http://www.cacas.org/~wes/java/ -->
            <pathelement location="${basedir}/lib/regexp.jar"/>
            <!-- http://xml.apache.org/crimson/ -->
            <pathelement location="${basedir}/lib/crimson.jar"/>
            <!-- http://www.javasoft.com -->
            <pathelement location="${basedir}/lib/jdbc2_0-stdext.jar"/>
            <!-- http://www.jdom.org/ -->
            <pathelement location="${basedir}/lib/jdom.jar"/>
            <!-- http://jakarta.apache.org/log4j/ -->
            <pathelement location="${basedir}/lib/log4j.jar"/>
            <!-- http://www.junit.org/ -->
            <pathelement location="${basedir}/lib/junit.jar"/>
            <!-- http://xml.apache.org/ -->
            <pathelement location="${basedir}/lib/xercesImpl.jar"/>
            <!-- http://technet.oracle.com/tech/xml/xsql_servlet/ -->
            <pathelement location="${basedir}/lib/oraclexsql.jar"/>
            <pathelement location="${basedir}/lib/xsu12.jar"/>
            <pathelement location="${basedir}/lib/xmlparserv2.jar"/>
            <!-- http://www.oracle.com -->
            <pathelement location="${basedir}/lib/oracle.jar"/>
            <!-- http://www-3.ibm.com/software/data/informix/tools/jdbc/ -->
            <pathelement location="${basedir}/lib/informix.jar"/>
            <!-- Handles the user list comparison - http: - can't find the URL any more -->
            <pathelement location="${basedir}/lib/list2list11.jar"/>
            <!-- http://www.w3.org/PICS/refcode/Parser/ -->
            <pathelement location="${basedir}/lib/dsig.jar"/>
            <!-- http://www.servlets.com/ -->
            <pathelement location="${basedir}/lib/cos.jar"/>
            <!-- http://www.enterprisedt.com/downloads/ftp.html -->
            <pathelement location="${basedir}/lib/ftp.jar"/>
            <!--  poi stuff for reading in spreadsheets - http://jakarta.apache.org/poi -->
            <pathelement location="${basedir}/lib/jakarta-poi-1.5.1-final-20020615.jar"/>
            <!--  poi stuff for reading in spreadsheets - http://jakarta.apache.org/poi -->
            <pathelement location="${basedir}/lib/commons-fileupload-1.0-beta-1.jar"/>
            <pathelement location="${basedir}/lib/commons-lang.jar"/>
            <!--  stuff for uploading files via serverlets -->
            <pathelement location="${basedir}/lib/jakarta-poi-1.5.1-final-20020615.jar"/>
            <!--  alternate jars if we don't use the o'reilly servlet-->
            <!--            <pathelement location="${basedir}/lib/commons-beanutils.jar"/>-->
            <!--            <pathelement location="${basedir}/lib/commons-logging.jar"/>-->
            <!--            <pathelement location="${basedir}/lib/commons-logging-api.jar"/>-->
            <!-- located locally at nike \\Beavertn-svr-e1\eBiz$\B2C\shared\latest\lib : note this url points to the latest version of the file -->
            <pathelement location="${basedir}/lib/shared.jar"/>
        </path>
        <!-- this is the location of the generated JAXB classes will be placed -->
        <property name="jaxb.output" value="${basedir}/jaxbsrc"/>
        <path id="jaxb.path">
            <!-- JAXB stuff - for FULL XML EXPORT processing for the PDFGenerator -->
            <!-- all these JARS come from Java Web Services Developer Pack 1.2 -->
            <!-- http://java.sun.com/webservices/downloads/webservicespack.html -->
            <pathelement location="${basedir}/lib/jaxb-api.jar"/>
            <pathelement location="${basedir}/lib/jaxb-impl.jar"/>
            <pathelement location="${basedir}/lib/jaxb-libs.jar"/>
            <pathelement location="${basedir}/lib/jaxb-xjc.jar"/>
            <pathelement location="${basedir}/lib/sax.jar"/>
            <pathelement location="${basedir}/lib/dom.jar"/>
            <pathelement location="${basedir}/lib/jaxp-api.jar"/>
            <pathelement location="${basedir}/lib/xercesImpl.jar"/>
            <pathelement location="${basedir}/lib/xalan.jar"/>
            <pathelement location="${basedir}/lib/jax-qname.jar"/>
            <pathelement location="${basedir}/lib/namespace.jar"/>
            <pathelement location="${basedir}/lib/relaxngDatatype.jar"/>
            <pathelement location="${basedir}/lib/xsdlib.jar"/>
        </path>
        <path id="apacheFop.path">
            <pathelement location="${basedir}/lib/fop.jar"/>
            <pathelement location="${basedir}/lib/avalon-framework-cvs-20020806.jar"/>
            <pathelement location="${basedir}/lib/batik.jar"/>
        </path>
        <path id="pdf_resource_bundles">
            <pathelement location="${output}/build/conf/resource/pdf/bundles"/><!--dgb -->
            <pathelement location="${output}/build/conf/resource/currencyResources"/><!--dgb -->
        </path>
        <path id="class.path">
            <pathelement location="${output}/classes"/>
        </path>
        <path id="class.lib.path">
            <path refid="class.path"/>
            <path refid="lib.path"/>
        </path>
        <path id="weblogic.path">
            <pathelement location="${weblogic}/lib/weblogic.jar"/>
        </path>
        <path id="weblogic.optimize.path">
            <pathelement location="${weblogic}/lib/weblogic.jar"/>
            <pathelement location="c:\OptimizeIt\OptimizeIt40\lib\optit.jar"/>
        </path>
        <path id="lib.weblogic.path">
            <path refid="lib.path"/>
            <path refid="weblogic.path"/>
        </path>
        <path id="class.weblogic.path">
            <path refid="class.path"/>
            <path refid="weblogic.path"/>
        </path>
        <path id="class.lib.weblogic.path">
            <path refid="class.path"/>
            <path refid="lib.weblogic.path"/>
            <path refid="jaxb.path"/>
            <path refid="apacheFop.path"/>
        </path>
        <path id="run.path">
            <pathelement location="${output}/build/cdm-client.jar"/>
            <path refid="class.lib.weblogic.path"/>
        </path>
        <path id="export.run.path">
            <pathelement location="${basedir}/lib/xerces.jar"/>
            <pathelement location="${output}/build/cdm-exportclient.jar"/>
            <path refid="weblogic.path"/>
        </path>
        <path id="ant.path">
            <pathelement path="${java.class.path}"/>
        </path>
        <tstamp>
            <format property="TIME" pattern="hh:mm a"/>
        </tstamp>

        <property name="build.day.time" value="${DSTAMP}_${TSTAMP}"/>
        <!-- JDiff values -->
        <property name="app.name" value="CDM JDiff"/>
        <!-- Values used for the old API -->
        <property name="OLD_SRC" value="${oldsrc}/src"/>
        <property name="OLD_PACKAGES" value="com.nike.*"/>
        <property name="OLD_DOCS" value="${output}/olddocs/"/>
        <!-- Values used for the new API -->
        <property name="NEW_SRC" value="${newsrc}/src"/>
        <property name="NEW_PACKAGES" value="com.nike.*"/>
        <property name="NEW_DOCS" value="${output}/newdocs"/>
        <path id="jdiff.class.path">
            <path refid="class.lib.weblogic.path"/>
        </path>
        <property name="BASE_URI" value="http://www.w3.org"/>
        <echo>about to call prepareBuildFiles</echo>
        <antcall target="prepareBuildFiles" inheritAll="true" inheritRefs="true"/>
        <echo>called prepareBuildFiles</echo>

        <filter token="TODAY" value="${TODAY}"/>
        <filter token="TIME" value="${TIME}"/>

        <echo message="  propertyfilename   = ${property.file.name}"/>
        <echo message="  env                = ${env}"/>
        <echo message="  envr               = ${envr}"/>
        <echo message="  mainOrBatch        = ${mainOrBatch}"/>
        <echo message="  delay              = ${delay}"/>
        <echo message="  basedir            = ${basedir}"/>
        <echo message="  output             = ${output}"/>
        <echo message="  build              = ${build}"/>
        <echo message="  deployConf         = ${deployConf}"/>
        <echo message="  meta.inf.location  = ${meta.inf.location}"/>
        <echo message="  compiler           = ${compiler}"/>
        <echo message="  weblogic           = ${weblogic}"/>
        <echo message="  username           = ${username}"/>
        <echo message="  password           = ${password}"/>
        <echo message="  old source dir     = ${OLD_SRC}"/>
        <echo message="  new source dir     = ${NEW_SRC}"/>
        <echo message="  old api            = ${OLD_API}"/>
        <echo message="  new api            = ${NEW_API}"/>
        <property name="setup.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans up the build environment                         -->
    <!-- ======================================================= -->
    <target name="clean" depends="setup" unless="clean.done">

        <echo> dir="${build}"</echo>
        <echo> dir="${output}/classes"</echo>
        <echo> dir="${output}/jaxb-classes"</echo>
        <echo> dir="${output}/classes/META-INF"</echo>
        <echo> dir="${output}/deploy"</echo>
        <echo> dir="${output}/docs"</echo>
        <echo> dir="${output}/newdocs"</echo>
        <echo> dir="${output}/olddocs"</echo>
        <echo> dir="${jaxb.output}"</echo>
        <echo> dir="${output}"</echo>
        <echo> dir="${basedir} hey, it's filtered - don't have a panic attack!!!!"</echo>

        <delete dir="${build}"/>
        <delete dir="${output}/classes"/>
        <delete dir="${output}/jaxb-classes"/>
        <delete dir="${output}/classes/META-INF"/>
        <delete dir="${output}/deploy"/>
        <delete>
            <fileset dir="${output}/docs">

                <exclude name="**/test/**/*.*"/>
            </fileset>
        </delete>
        <delete dir="${output}/newdocs"/>
        <delete dir="${output}/olddocs"/>
        <delete dir="${jaxb.output}"/>
        <!--<delete dir="${output}/docs"/>-->
        <delete>
            <fileset dir="${output}">
                <include name="**/*.log"/>
                <include name="**/*.bak"/>
            </fileset>
        </delete>
        <delete>
            <fileset dir="${basedir}">
                <include name="**/*.contrib*"/>
                <include name="**/*.keep*"/>
                <include name="**/*.log"/>
                <include name="**/*.bak"/>
                <include name="**/*HTML.java"/>
            </fileset>
        </delete>
        <property name="clean.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the docs directory                               -->
    <!-- ======================================================= -->
    <target name="cleandocs" unless="clean.done">
        <delete dir="${output}/docs"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the tests directory                               -->
    <!-- ======================================================= -->
    <target name="cleanTests" depends="setup" unless="clean.done">
        <delete dir="${output}/docs/test"/>
        <mkdir dir="${output}/docs/test"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans the build directory                              -->
    <!-- ======================================================= -->
    <target name="cleanbuild" unless="clean.done">
        <delete dir="${build}"/>
    </target>

    <!-- ======================================================= -->
    <!-- cleans the deploy directory                             -->
    <!-- ======================================================= -->
    <target name="cleandeploy" unless="clean.done">
        <delete dir="${output}/deploy"/>
    </target>

    <!-- ======================================================= -->
    <!-- Creates build directories                               -->
    <!-- ======================================================= -->
    <target name="dir" depends="setup">
        <!--        <echoproperties/>-->
        <mkdir dir="${build}"/>
        <mkdir dir="${output}/classes"/>
        <mkdir dir="${output}/docs/api"/>
        <mkdir dir="${output}/docs/doccheck"/>
        <mkdir dir="${output}/docs/test"/>
        <property name="dir.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Compiles the HTML pages vis xmlc                        -->
    <!-- ======================================================= -->
    <target name="xmlc" depends="dir" unless="xmlc.done">
        <taskdef name="xmlc" classname="org.enhydra.barracuda.taskdefs.Xmlc">
            <!--classpath>
<pathelement location="${basedir}/lib/xmlc.jar"/>
<pathelement location="${basedir}/ant/ant_barracuda.jar"/>
<pathelement location="${basedir}/lib/log4j.jar"/>
</classpath-->
        </taskdef>
        <xmlc compile="no" srcdir="${basedir}/web" sourceout="${basedir}/src" packagedir="com/nike/cdm/web/html" includes="*.shtml" verbose="true"/>
        <property name="xmlc.done" value="true"/>
    </target>

    <!-- ======================================================================== -->
    <!-- this generates the Java source files for JAXB class for the PDF Generator-->
    <!-- ======================================================================== -->
    <target name="checkJaxbUpToDate" depends="checkJaxbFilesExist" if="jaxbExists">
        <outofdate property="jaxbGenerationNotNeeded">
            <sourcefiles>
                <fileset dir="${jaxb.output}">
                    <include name="**/*"/>
                </fileset>
            </sourcefiles>
            <targetfiles>
                <fileset dir="${basedir}/conf/xml/"><!--dgb -->
                    <include name="cdm_export.xsd"/>
                </fileset>
            </targetfiles>
        </outofdate>
    </target>

    <!-- ======================================================================== -->
    <!-- Checks to see if the JAXB generated files already exist                  -->
    <!-- ======================================================================== -->
    <target name="checkJaxbFilesExist" depends="setup">
        <available file="com/nike/cdm/extract/pdf/jaxb/StyleType.java" filepath="${jaxb.output}" property="jaxbExists"></available>
    </target>


    <!-- ======================================================================== -->
    <!-- this generates the Java source files for JAXB class for the PDF Generator-->
    <!-- ======================================================================== -->
    <target name="generateJaxbClasses" depends="setup,checkJaxbUpToDate" unless="jaxbGenerationNotNeeded">
        <mkdir dir="${jaxb.output}"/>
        <echo message="CREATING THE JAXB CLASSES"/>

        <java fork="true" classname="com.sun.tools.xjc.Driver" dir="." classpathref="jaxb.path">
            <arg value="-d"/>
            <arg value="${jaxb.output}"/>
            <arg value="-p"/>
            <arg value="com.nike.cdm.extract.pdf.jaxb"/>
            <arg value="-readOnly"/>
            <arg value="${deployConf}/xml/cdm_export.xsd"/><!--dgb -->
        </java>
    </target>

    <!-- ======================================================================== -->
    <!-- this generates the Javadocs for the JAXB classes                        -->
    <!-- ======================================================================== -->
    <target name="javadoc_pdfJAXB" depends="generateJaxbClasses">
        <javadoc maxmemory="512M" private="yes" sourcepath="${jaxb.output}" destdir="${NEW_DOCS}" verbose="no" packagenames="${NEW_PACKAGES}" doctitle="${NEW_API_TITLE}" windowtitle="${NEW_API_TITLE}">
            <classpath>
                <path refid="jdiff.class.path"/>
            </classpath>
        </javadoc>
    </target>

    <!-- ======================================================================== -->
    <!-- this parses the fop config file and replaces the key-value pair-->
    <!-- ======================================================================== -->
    <target name="pdfPreCompile" depends="generateJaxbClasses">
        <delete file="${deployConf}/resource/pdf/fopFontConfig.xml"/>
        <delete file="${deployConf}/resource/pdf/defaultXslFoStyleSheet.xsl"/>
        <copy file="${deployConf}/resource/pdf/fopFontConfig_base.xml" tofile="${deployConf}/resource/pdf/fopFontConfig.xml">
            <filterset>
                <filter token="CDM_JAR_PATH" value="${build}/cdm-exportclient.jar"/>
            </filterset>
        </copy>
        <copy file="${deployConf}/resource/pdf/defaultXslFoStyleSheet_base.xsl" tofile="${deployConf}/resource/pdf/defaultXslFoStyleSheet.xsl">
            <filterset>
                <filter token="CDM_JAR_PATH" value="${build}/cdm-exportclient.jar"/>
            </filterset>
        </copy>

        <!--  resourcebundles  -->
        <native2ascii encoding="UTF8"
            src="${deployConf}/resource/pdf/bundles_base"
            dest="${deployConf}/resource/pdf/bundles"
            includes="**/*.*"
            ext=".properties">
        </native2ascii>

    </target>

    <!-- ======================================================= -->
    <!-- Compiles the java classes                               -->
    <!-- ======================================================= -->
    <target name="compile" depends="setup, xmlc, pdfPreCompile" unless="compile.done">
        <javac srcdir="${jaxb.output}" destdir="${output}/classes" debug="on" deprecation="off" classpathref="jaxb.path"/>
        <javac srcdir="${basedir}/src" destdir="${output}/classes" debug="on" deprecation="off" classpathref="class.lib.weblogic.path"/>
        <javac srcdir="${basedir}/test" destdir="${output}/classes" debug="on" deprecation="off" classpathref="class.lib.weblogic.path"/>
        <property name="compile.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Sign & distribute the client application jar            -->
    <!-- ======================================================= -->
    <target name="sign" depends="setup">
        <!--    includes="**/NamedIdentifiableObject.class,**/IdentifiableObject.class,**/MerchProfile.class,**/lookup/**/*.class,**/User.class,**/exception/**/*.class,**/userViewer/**/*.class,**/Debug.class,**/applets/**/*.class,**/CdmServletRequest.class,**/CdmServletRequestEnum.class,**/CDMEnum.class,**/CatalogRequestEnum.class">-->
        <delete file="${build}/cdm-console.jar"/>
        <delete file="${build}/cdm-console-base.jar"/>
        <jar jarfile="${build}/cdm-console-base.jar">
            <fileset dir="${output}/classes" includes="**/applets/**/*.class,**/util/**/*.class,**/domain/**/*.class,**/exception/**/*.class,**/persistence/**/*.class">
            </fileset>
            <fileset dir="${basedir}/web/images" includes="uparrow.gif, downarrow.gif, toparrow.gif, bottomarrow.gif"/>
        </jar>
        <jar jarfile="${build}/cdm-console.jar">
            <fileset dir="${output}/classes" includes="**/userViewer/**/*.class"/>
            <fileset dir="${build}/conf/env/local" includes="log4j.xml"/>
        </jar>
        <!-- uncomment the jars below as needed.  By commenting them, I'm preventing all of the relatively "static" jars  -->
        <!-- (the ones that aren't changing) from being signed each time.  This would result in the users downloading all -->
        <!-- of the jars each time the console application is run, instead of just the changed jar.  Uncomment jars as needed -->
        <!-- to handle changes (probably only the cdm-console-base in addition to cdm-console will ever need to be done   -->
        <copy todir="${basedir}/web/webstart/" overwrite="yes">
            <fileset dir="${build}/" includes="cdm-console.jar"/>
            <!--            <fileset dir="${build}/" includes="cdm-console-base.jar"/>-->
            <!--            <fileset dir="${basedir}/lib" includes="xerces.jar"/>-->
            <!--            <fileset dir="${basedir}/lib" includes="log4j.jar"/>-->
            <!--            <fileset dir="${weblogic}/lib" includes="weblogic.jar"/>-->
            <!--            <fileset dir="${weblogic}/lib" includes="j2ee12.jar"/>-->
            <!--            <fileset dir="${basedir}/lib" includes="oracle.jar"/>-->
            <!--            <fileset dir="${basedir}/lib" includes="dsig.jar"/>-->
        </copy>
        <signjar jar="${basedir}/web/webstart/cdm-console.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>
        <!--        <signjar jar="${basedir}/web/webstart/cdm-console-base.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <!--        <signjar jar="${basedir}/web/webstart/xerces.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <!--        <signjar jar="${basedir}/web/webstart/log4j.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <!--        <signjar jar="${basedir}/web/webstart/weblogic.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <!--        <signjar jar="${basedir}/web/webstart/dsig.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <!--        <signjar jar="${basedir}/web/webstart/j2ee12.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <!--        <signjar jar="${basedir}/web/webstart/oracle.jar" keystore="cdmkeystore" alias="dbulla" storepass="nikenike"/>-->
        <ftp server="camcdmd1.nike.com" userid="weblogic" password="1appserv" remotedir="/cust/site/cdm/import/webstart">
            <fileset dir="${basedir}/web/webstart/">
                <include name="cdm.jnlp"/>
                <include name="cdm-console.jar"/>
                <!--                <include name="cdm-console-base.jar"/>-->
                <!--                <include name="log4j.jar"/>-->
                <!--                <include name="xerces.jar"/>-->
                <!--                <include name="weblogic.jar"/>-->
                <!--                <include name="dsig.jar"/>-->
                <!--                <include name="j2ee12.jar"/>-->
                <!--                <include name="oracle.jar"/>-->
            </fileset>
        </ftp>
    </target>

    <!-- ======================================================= -->
    <!-- Create the jars for the clients and applets             -->
    <!-- ======================================================= -->
    <target name="jar" depends="jarclient, jarexportclient"/>

    <!-- ======================================================= -->
    <!-- Create the jars for the clients and applets             -->
    <!-- ======================================================= -->
    <target name="jarclient" depends="compile" unless="jarclient.done">


        <!--        jars aren't overwritten automatically, so we must delete them first-->
        <delete file="${build}/cdm-client.jar"/>
        <delete file="${build}/cdm-console.jar"/>
        <delete file="${build}/cdm-applet.jar"/>
        <jar jarfile="${build}/cdm-console.jar">
            <fileset dir="${output}/classes" includes="**/applets/**/*.class,**/util/**/*.class,**/domain/**/*.class,**/exception/**/*.class,**/persistence/**/*.class,**/userViewer/**/*.class"/>
            <fileset dir="${basedir}/web/images" includes="uparrow.gif, downarrow.gif, toparrow.gif, bottomarrow.gif"/>
        </jar>
        <!-- we want the ftp classes in the client jar-->
        <unzip src="${basedir}/lib/ftp.jar" dest="${output}/classes" overwrite="false"/>
        <!-- we want the jdom classes in the client jar, Meta-inf and default package excluded - Bug 3158 -->
        <unzip src="${basedir}/lib/jdom.jar" dest="${output}/classes" overwrite="false">
            <patternset>
                <include name="**/*.class"/>
                <exclude name="**/Meta-inf/*"/>
            </patternset>
        </unzip>
        <!-- Bug 3439 - We want to add the shared.jar to the cdm-client.jar -->
        <unzip src="${basedir}/lib/shared.jar" dest="${output}/classes" overwrite="false"/>
        <unzip src="${basedir}/lib/commons-lang.jar" dest="${output}/classes" overwrite="false"/>
        <if>
            <equals arg1="${mainOrBatch}" arg2="batch"/>
            <then>
                <property name="configDir" value="${env.dir.name}/autosys"/>
            </then>
            <else>
                <property name="configDir" value="${env.dir.name}"/>
            </else>
        </if>

        <if>
            <equals arg1="${env}" arg2="local"/>
            <then>
                <echo>ConfigDir = ${configDir}   </echo>
                <echo>should have ejb xml = ${deployConf}/env/${envr}/${mainOrBatch}   </echo>
                <zip zipfile="${build}/cdm-client.jar" compress="false">
                    <zipfileset dir="${output}/classes" excludes="**/*EJB*, .dependency-info/**"/>
                    <zipfileset dir="${deployConf}/resource" excludes="**/xml/**,**/pdf/**"/>
                    <zipfileset dir="${deployConf}/resource/xml" excludes="**/*.dtd,**/*.xsd"/>
                    <zipfileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>
                    <zipfileset dir="${deployConf}/env/${envr}/${configDir}"/>
                    <zipfileset dir="${basedir}/web/images" includes="uparrow.gif, downarrow.gif, toparrow.gif, bottomarrow.gif"/>
                </zip>
            </then>
            <else>
                <echo>ConfigDir = ${configDir}   </echo>
                <echo>should have ejb xml = ${deployConf}/env/${envr}/${mainOrBatch}   </echo>
                <zip zipfile="${build}/cdm-client.jar" compress="false">
                    <zipfileset dir="${output}/classes" excludes="**/*EJB*, .dependency-info/**"/>
                    <zipfileset dir="${deployConf}/resource" excludes="**/xml/**,**/pdf/**"/>
                    <zipfileset dir="${deployConf}/resource/xml" excludes="**/*.dtd,**/*.xsd"/>
                    <zipfileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>
                    <zipfileset dir="${deployConf}/env/${mainOrBatch}"/>
                    <zipfileset dir="${deployConf}/env/${envr}/${configDir}"/>
                    <zipfileset dir="${basedir}/web/images" includes="uparrow.gif, downarrow.gif, toparrow.gif, bottomarrow.gif"/>
                </zip>
            </else>
        </if>

        <!--            </else>-->
        <!--        </if>-->
        <zip zipfile="${build}/cdm-applet.jar">
            <zipfileset dir="${output}/classes" includes="**/applets/**/*.class,**/util/**/*.class,**/domain/**/*.class,**/exception/**/*.class"/>
            <zipfileset dir="${basedir}/web/images" includes="uparrow.gif, downarrow.gif, toparrow.gif, bottomarrow.gif"/>
            <zipfileset dir="${deployConf}/env/applets" includes="log4j.xml"/>
        </zip>
        <copy file="${build}/cdm-applet.jar" todir="${output}/deploy/config/cdm-domain/cdm-web" overwrite="true"/>
        <property name="jarclient.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Create the jars for the export client                      -->
    <!-- ======================================================= -->
    <target name="jarexportclient" depends="compile, pdfPreCompile" unless="jarexportclient.done">
        <!--        jars aren't overwritten automatically, so we must delete them first-->
        <delete file="${build}/cdm-exportclient.jar"/>
        <!-- this is the JAXB required libs needed for the export -->
        <mkdir dir="${output}/jaxb-classes"/>
        <unzip src="${basedir}/lib/jaxb-api.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/jaxb-impl.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/jaxb-libs.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/jaxb-xjc.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/sax.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/dom.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/jdom.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/jaxp-api.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/xercesImpl.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/xalan.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/jax-qname.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/namespace.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/relaxngDatatype.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/xsdlib.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/commons-lang.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/log4j.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/oraclexsql.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/xsu12.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/xmlparserv2.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/fop.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/avalon-framework-cvs-20020806.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/batik.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <unzip src="${basedir}/lib/shared.jar" dest="${output}/jaxb-classes" overwrite="false"/>
        <!-- end of jaxb libs -->
        <if>
            <equals arg1="${mainOrBatch}" arg2="batch"/>
            <then>
                <property name="configDir" value="${envr}/${env.dir.name}/autosys"/>
            </then>
            <else>
                <property name="configDir" value="${envr}/${env.dir.name}"/>
            </else>
        </if>

        <if>
            <equals arg1="${env}" arg2="local"/>
            <then>
                <echo> dir="${deployConf}/resource/" excludes="**/xml/**, **/currencyResources/**, **/pdf/bundles/**, **/pdf/bundles_base/**"</echo>
                <echo> dir="${deployConf}/resource/xml"</echo>
                <echo> dir="${deployConf}/resource/currencyResources"</echo>
                <echo> dir="${deployConf}/resource/pdf/bundles"</echo>
                <echo> dir="${output}/classes" excludes="**/*EJB*, .dependency-info/**"</echo>
                <echo> dir="${output}/jaxb-classes"</echo>
                <echo> dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"</echo>
                <echo> dir="${deployConf}/env/${envr}/${configDir}"</echo>
                <echo> dir="${jaxb.output}" excludes="**/*.java"</echo>
                <echo> zipfileset dir="${deployConf}/env/${configDir}"</echo>

                <zip zipfile="${build}/cdm-exportclient.jar" compress="false">
                    <zipfileset dir="${deployConf}/resource/" excludes="**/xml/**, **/currencyResources/**, **/pdf/bundles/**, ARIALUNI.TTF"/>
                    <zipfileset dir="${deployConf}/resource/xml"/>
                    <zipfileset dir="${deployConf}/resource/currencyResources"/><!-- puts the bundles in the root of the zip-->
                    <zipfileset dir="${deployConf}/resource/pdf/bundles"/><!-- puts the bundles in the root of the zip-->
                    <zipfileset dir="${output}/classes" excludes="**/*EJB*, .dependency-info/**"/>
                    <zipfileset dir="${output}/jaxb-classes"/>
                    <zipfileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>
                    <zipfileset dir="${deployConf}/env/${configDir}"/>
                    <!--            <zipfileset dir="${deployConf}/env/${configDir}"/>-->
                    <!-- pulls in the jaxb generated classes -->
                    <zipfileset dir="${jaxb.output}" excludes="**/*.java"/>
                </zip>
            </then>
            <else>
                <if><!-- only make client jar for batch server -->
                    <equals arg1="${mainOrBatch}" arg2="batch"/>
                    <then>
                        <echo>configDir is ${configDir}</echo>
                        <echo> dir="${deployConf}/resource/" excludes="**/xml/**"</echo>
                        <echo> dir="${deployConf}/resource/xml"</echo>
                        <echo> dir="${output}/classes" excludes="**/*EJB*, .dependency-info/**"</echo>
                        <echo> dir="${output}/jaxb-classes"</echo>
                        <echo> dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"</echo>
                        <echo> dir="${deployConf}/env/${mainOrBatch}"</echo>
                        <echo> dir="${deployConf}/env/${envr}/${mainOrBatch}"</echo>
                        <echo> dir="${deployConf}/env/${envr}/${configDir}"</echo>
                        <echo> dir="${jaxb.output}" excludes="**/*.java"</echo>
                        <zip zipfile="${build}/cdm-exportclient.jar" compress="false">
                            <zipfileset dir="${deployConf}/resource/" excludes="**/xml/**, **/currencyResources/**, **/pdf/bundles/**, ARIALUNI.TTF"/>
                            <zipfileset dir="${deployConf}/resource/xml"/>
                            <zipfileset dir="${deployConf}/resource/currencyResources"/><!-- puts the bundles in the root of the zip-->
                            <zipfileset dir="${deployConf}/resource/pdf/bundles"/><!-- puts the bundles in the root of the zip-->
                            <zipfileset dir="${output}/classes" excludes="**/*EJB*, .dependency-info/**"/>
                            <zipfileset dir="${output}/jaxb-classes"/>
                            <zipfileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>
                            <zipfileset dir="${deployConf}/env/${mainOrBatch}"/>
                            <zipfileset dir="${deployConf}/env/${envr}/${mainOrBatch}"/>
                            <zipfileset dir="${deployConf}/env/${envr}/${configDir}"/>
                            <!-- pulls in the jaxb generated classes -->
                            <zipfileset dir="${jaxb.output}" excludes="**/*.java"/>
                        </zip>
                    </then>
                </if>
            </else>
        </if>
        <property name="jarexportclient.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Jars the entire project up for copying to the server    -->
    <!-- ======================================================= -->
    <target name="jarcdm" depends="setup, prepareBuildFiles, tarsql" unless="jar.cdm.done"><!--  -->
        <delete file="${basedir}/cdm.jar"/>
        <if>
            <contains string="${prepareTargetEnvName}" substring="local"/>
            <then>
                <zip zipfile="${basedir}/cdm.jar" update="no">
                    <fileset dir="${basedir}" includes="build.*,ant/**,help/**,bin/**,conf/**,lib/**,src/**/*.java,test/**/*.java,web/**,index.html,refreshLookups.sh" excludes="**/webstart/**/*,**/*.contrib*,**/*.keep*"/><!--,**/*.TTF-->
                </zip>
            </then>
            <else>
                <zip zipfile="${basedir}/cdm.jar" update="no">
                    <fileset dir="${basedir}" includes="build.*, ant/**, help/**, bin/**, lib/**, src/**/*.java, test/**/*.java, xml/**, web/**, index.html, refreshLookups.sh" excludes="**/webstart/**/*,**/*.contrib*,**/*.keep*"/>
                    <fileset dir="${build}" includes="conf/**"/>
                    <fileset dir="${basedir}" includes="conf/test/**"/>
                    <fileset dir="${basedir}" includes="conf/cdm.properties"/>
                    <fileset dir="${basedir}" includes="conf/build.html"/>
                </zip>
            </else>
        </if>
        <copy file="${basedir}/cdm.jar" tofile="${basedir}/cdm_${build.day.time}.jar"/>
        <echo>Copied cdm.jar to ${basedir}/cdm_${build.day.time}.jar</echo>
        <property name="jar.cdm.done" value="done"/>
    </target>

    <!-- ======================================================= -->
    <!-- Jars the sql scripts for copying to the server          -->
    <!-- ======================================================= -->
    <target name="tarsql" depends="setup, prepareBuildFiles">
        <echo>Creating file ${basedir}/cdmsql.tar</echo>
        <delete file="${basedir}/cdmsql.tar"/>
        <tar tarfile="${basedir}/cdmsql.tar">
            <tarfileset dir="${build}/conf/sqlscripts/sql" includes="**/*.sql"/>
        </tar>
        <copy file="${basedir}/cdmsql.tar" tofile="${basedir}/cdmsql_${build.day.time}.tar"/>
    </target>

    <!-- ======================================================= -->
    <!-- Deploys the application to WL, builds archives          -->
    <!-- ======================================================= -->
    <target name="deploy" depends="jar" unless="deploy.done">
        <copy todir="${output}/deploy/test">
            <fileset dir="${basedir}/conf/test"/>
        </copy>

        <copy todir="${output}/deploy/xml">
            <fileset dir="${deployConf}/xml"/>
        </copy>

        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-web">
            <fileset dir="${basedir}/web">
                <exclude name="**/*.shtml"/>
                <exclude name="**/*.ssi"/>
                <exclude name="**/*.xmlc"/>
                <exclude name="**/dtd/**"/>
            </fileset>
            <fileset dir="${build}" includes="cdm-client.jar"/>
            <fileset dir="${build}" includes="cdm-applet.jar"/>
            <fileset dir="${basedir}/lib" includes="temp-ejb.jar"/>
            <fileset dir="${basedir}/lib" includes="list2list11.jar"/>
            <fileset dir="${basedir}/lib" includes="dsig.jar"/>
            <fileset dir="${basedir}/lib" includes="log4j.jar"/>
            <fileset dir="${basedir}/lib" includes="xercesImpl.jar"/>
            <fileset dir="${basedir}/lib" includes="xerces.jar"/>
            <fileset dir="${basedir}/lib" includes="shared.jar"/>
        </copy>
        <if>
            <equals arg1="env" arg2="local"/>
            <then>
                <copy file="${build}/conf/cdm.properties" todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes" filtering="yes" overwrite="yes"/>
            </then>
            <else>
                <copy file="${basedir}/conf/cdm.properties" todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes" filtering="yes" overwrite="yes"/>
            </else>
        </if>
        <echo>Copying ${deployConf}/env/${envr}, excluding **/${env.dir.name}/**</echo>
        <echo>${deployConf}/env/${envr}/${env.dir.name}, excluding **/META-INF/**</echo>


        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes">
            <fileset dir="${output}/classes" excludes="**/*EJB*,.dependency-info/**"/>
            <fileset dir="${deployConf}/resource" excludes="**/xml/**"/>
            <fileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>
            <fileset dir="${deployConf}/env/${envr}/${env.dir.name}" excludes="**/META-INF/**,**/autosys/**"/>
            <fileset dir="${deployConf}/env/${env.dir.name}" excludes="**/META-INF/**,**/autosys/**"/>
            <fileset dir="${deployConf}/env/${envr}/${env.dir.name}"/>
        </copy>

        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/lib">
            <fileset dir="${basedir}/lib">
                <include name="barracuda.jar"/>
                <include name="bconfig.jar"/>
                <include name="xmlc.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="log4j.jar"/>
                <include name="jdom.jar"/>
                <include name="informix.jar"/>
                <include name="cos.jar"/>
                <include name="shared.jar"/>
                <include name="commons-fileupload-1.0-beta-1.jar"/>
                <!--                <include name="commons-beanutils.jar"/>-->
                <!--                <include name="commons-logging.jar"/>-->
                <!--                <include name="commons-logging-api.jar"/>-->
            </fileset>
        </copy>
        <unzip src="${basedir}/lib/oracle.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/crimson.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/jdbc2_0-stdext.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/log4j.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/jdom.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/oraclexsql.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/xmlparserv2.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/xsu12.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/informix.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/barracuda.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/shared.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <unzip src="${basedir}/lib/jakarta-poi-1.5.1-final-20020615.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
        <trycatch>
            <try>
                <unzip src="${build}/cdm-exportclient.jar" dest="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="false"/>
            </try>
            <catch>
                <echo>Not expanding cdm-exportclient.jar - doesn't exist (must be a main build on Dev, QA, or Prod</echo>
            </catch>
        </trycatch>

        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb">
            <fileset dir="${output}/classes" excludes=".dependency-info/**"/>
            <fileset dir="${deployConf}/resource">
                <exclude name="**/xml/**"/>
                <exclude name="**/*.TTF"/>
            </fileset>
        </copy>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="yes">
            <fileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>
            <fileset dir="${deployConf}/env/${envr}/${env.dir.name}" excludes="**/autosys/**"/>

            <!--            <fileset dir="${deployConf}/env/${envr}" excludes="**/batch/**,**/main/**"/>-->
            <!--            <fileset dir="${deployConf}/env/${envr}/${env.dir.name}" excludes="**/META-INF/**,**/autosys/**"/>-->
            <fileset dir="${deployConf}/env/${env.dir.name}" excludes="**/META-INF/**,**/autosys/**"/>
            <fileset dir="${deployConf}/env/${envr}/${env.dir.name}"/>
        </copy>


        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb/META-INF" overwrite="yes">
            <fileset dir="${meta.inf.location}"/>
        </copy>
        <property name="deploy.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Deploys the application to WL, builds archives          -->
    <!-- This is a stripped down version for startwl             -->
    <!-- ======================================================= -->
    <target name="deployLite" depends="compile" unless="deployLite.done">

        <copy todir="${output}/deploy/xml">
            <fileset dir="${build}/conf/xml"/>
        </copy>

        <copy file="${basedir}/conf/cdm.properties" todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes" filtering="yes" overwrite="yes"/>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes">
            <fileset dir="${output}/classes" excludes="**/*EJB*,.dependency-info/**"/>
            <fileset dir="${build}/conf/resource" excludes="**/xml/**"/><!--dgb -->
            <fileset dir="${build}/conf/env/${envr}" excludes="**/batch/**,**/main/**"/><!--dgb -->
            <fileset dir="${build}/conf/env/${envr}/${env.dir.name}" excludes="**/META-INF/**,**/autosys/**"/><!--dgb -->
        </copy>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb">
            <fileset dir="${output}/classes" excludes=".dependency-info/**"/>
            <fileset dir="${build}/conf/resource"><!--dgb -->
                <exclude name="**/xml/**"/>
            </fileset>
        </copy>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="yes">
            <fileset dir="${build}/conf/env/${envr}" excludes="**/batch/**,**/main/**"/><!--dgb -->
        </copy>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb" overwrite="yes">
            <fileset dir="${build}/conf/env/${envr}/${env.dir.name}" excludes="**/autosys/**"/><!--dgb -->
        </copy>

        <property name="deployLite.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Cleans out any source files, does a dist                -->
    <!-- ======================================================= -->
    <target name="cleandist" depends="cleanAll, dist"/>

    <!-- ======================================================= -->
    <!-- Cleans out any source files, calls the clean task       -->
    <!-- ======================================================= -->
    <target name="cleanAll" depends="setup">
        <if>
            <equals arg1="${conf}" arg2="local"/>
            <then>
                <delete dir="${deployConf}"/>
            </then>
        </if>
        <delete dir="${basedir}/build"/>
        <delete dir="${basedir}/conf"/>
        <delete dir="${basedir}/src"/>
        <delete dir="${basedir}/test"/>
        <delete dir="${basedir}/web"/>
        <antcall target="clean" inheritAll="true"/>
        <unjar src="${basedir}/cdm.jar" dest="${basedir}"/>
        <untar src="${basedir}/build.tar" dest="${basedir}"/>
    </target>

    <!-- ======================================================= -->
    <!-- FTPs it to dev                                          -->
    <!-- ======================================================= -->
    <target name="deploydev" depends="setup">
        <property name="prepareTargetEnvName" value="dev"/>
        <antcall target="cleanConf"/>
        <antcall target="prepareBuildFiles" inheritRefs="true"/>
        <antcall target="jarcdm" inheritAll="true"/>
        <ftp server="camcdmd1.nike.com" userid="weblogic" password="1appserv" remotedir="/cust/site/cdm/cdm">
            <fileset dir=".">
                <include name="cdm.jar"/>
                <include name="cdmsql.jar"/>
            </fileset>
        </ftp>
    </target>

  
    <!-- ======================================================= -->
    <!-- FTPs it to dev2                                          -->
    <!-- ======================================================= -->
    <target name="deploydev2" depends="setup">
        <property name="prepareTargetEnvName" value="dev2"/>
        <antcall target="cleanConf"/>
        <antcall target="prepareBuildFiles" inheritRefs="true"/>
        <antcall target="jarcdm" inheritAll="true"/>
        <ftp server="camcdmd1.nike.com" userid="cdm5.5" password="ion1verch" remotedir="/env/cdm5.5dev/cust/site/cdm/cdm">
            <fileset dir=".">
                <include name="cdm.jar"/>
                <include name="build.tar"/>
                <include name="cdmsql.jar"/>
            </fileset>
        </ftp>
    </target>

    <target name="cleanConf">
        <sleep seconds="5"/>
        <delete dir="${build}/conf"/>
        <mkdir dir="${build}/conf"/>
    </target>

    <!-- ======================================================= -->
    <!-- FTPs it to QA                                           -->
    <!-- ======================================================= -->
    <target name="deployqa" depends="setup">
        <property name="prepareTargetEnvName" value="qa"/>

        <antcall target="cleanConf"/>
        <antcall target="prepareBuildFiles" inheritRefs="true"/>
        <antcall target="jarcdm" inheritAll="true"/>
        <ftp server="camcdmq1.nike.com" userid="cdmcurr" password="g0lf2day" remotedir="/env/cdmcurr/cust/site/cdm/appl">
            <fileset dir=".">
                <include name="cdm.jar"/>
                <include name="cdmsql.tar"/>
                <include name="cdm_${build.day.time}.jar"/>
                <include name="cdmsql_${build.day.time}.tar"/>
            </fileset>
        </ftp>
        <!--    <copy todir="\\beavertn-unx-u5\cust\deploy\cdm\qa">-->
        <!--        <fileset dir="${basedir}">-->
        <!--            <include name="cdm.jar"/>-->
        <!--            <include name="cdm_${build.day.time}.jar"/>-->
        <!--        </fileset>-->
        <!--    </copy>-->
    </target>

    <!-- ======================================================= -->
    <!-- FTPs it to QA B                                          -->
    <!-- ======================================================= -->
    <target name="deployqab" depends="setup">
        <property name="prepareTargetEnvName" value="qab"/>
        <antcall target="cleanConf"/>
        <antcall target="prepareBuildFiles" inheritRefs="true"/>
        <antcall target="jarcdm" inheritAll="true"/>
        <ftp server="camcdmq1.nike.com" userid="cdmnext" password="g0lf2day" remotedir="/env/cdmnext/cust/site/cdm/appl">
            <fileset dir=".">
                <include name="cdm.jar"/>
                <include name="cdmsql.tar"/>
                <include name="cdm_${build.day.time}.jar"/>
                <include name="cdmcdmsql_${build.day.time}.tar"/>
            </fileset>
        </ftp>
        <!--    <copy todir="\\beavertn-unx-u5\cust\deploy\cdm\qab">-->
        <!--        <fileset dir="${basedir}">-->
        <!--            <include name="cdm.jar"/>-->
        <!--            <include name="cdm_${build.day.time}.jar"/>-->
        <!--        </fileset>-->
        <!--    </copy>-->

    </target>

    <!-- ======================================================= -->
    <!-- FTPs it to Prod                                         -->
    <!-- ======================================================= -->
    <target name="deployprod" depends="setup">
        <property name="prepareTargetEnvName" value="prod"/>
        <antcall target="cleanConf"/>
        <antcall target="prepareBuildFiles" inheritRefs="true"/>
        <antcall target="jarcdm" inheritAll="true"/>
        <ftp server="camcdmp1.nike.com" userid="bmlxfer" password="bz0troth" remotedir="/var/tmp">
            <fileset dir=".">
                <include name="cdm.jar"/>
                <include name="cdm_${build.day.time}.jar"/>
            </fileset>
        </ftp>
        <ftp server="camcdmp2.nike.com" userid="dbulla" password="n1ken1ke" remotedir="/var/tmp">
            <fileset dir=".">
                <include name="cdmsql.tar"/>
                <include name="cdmsql_${build.day.time}.tar"/>
            </fileset>
        </ftp>
    </target>



    <!-- ======================================================= -->
    <!-- Prep the build for the multi-env deploy                 -->
    <!-- ======================================================= -->
    <target name="prepareBuildFiles" unless="prepareBuildFiles.done">
        <!--        if this hasn't already been set as part of a deploy, we'll set it to "local"-->
        <if>
            <equals arg1="${env}" arg2="local"/>
            <then>
                <property name="prepareTargetEnvName" value="local"/>
                <echo>Using environment settings in: ${prepareTargetEnvName}</echo>
                <property file="${basedir}/conf/env/${prepareTargetEnvName}/env.properties"/>
                <!--                <delete dir="${build}/conf" failonerror="false"/>-->
                <!--                <mkdir dir="${build}/conf/resource"/>-->
                <copy todir="${build}/conf/resource" filtering="no" overwrite="no">
                    <fileset dir="${basedir}/conf/resource" includes="**/ARIALUNI.TTF"/>
                </copy>

                <copy todir="${build}/conf/resource" filtering="no" overwrite="no">
                    <fileset dir="${basedir}/conf/resource" excludes="**/multiconfig/**,**/ARIALUNI.TTF"/>
                </copy>

                <copy todir="${build}/conf/xml" filtering="no" overwrite="no">
                    <fileset dir="${basedir}/conf/xml" excludes="**/multiconfig/**"/>
                </copy>

                <copy todir="${build}/conf/resource" filtering="yes" overwrite="yes">
                    <fileset dir="${basedir}/conf/resource/multiconfig" excludes="**/test/**"/>
                    <filterset id="env.filterset">
                        <filter token="CDM_ENVIRONMENT" value="${cdm.environment}"/>
                        <filter token="ENV_ROOT" value="${env.root}"/>
                        <filter token="CDM_ROOT" value="${cdm.root}"/>
                        <filter token="ENV_BUILD" value="${env.build}"/>
                        <filter token="SYSTEM_ROOT" value="${system.root}"/>
                        <filter token="TEST_DIR" value="${test.dir}"/>

                        <filter token="SERVER_NAME" value="${server.name}"/>
                        <filter token="DB_SERVER_NAME" value="${db.server.name}"/>
                        <filter token="LDAP_SERVER_NAME" value="${ldap.server.name}"/>
                        <filter token="LDAP_SERVER_PORT" value="${ldap.server.port}"/>
                        <filter token="LDAP_SERVER_PW" value="${ldap.server.pw}"/>
                        <filter token="WEBLOGIC_ROOT" value="${weblogic.root}"/>
                        <filter token="WEBLOGIC_DEPLOY_DIR" value="${weblogic.deploy.dir}"/>
                        <filter token="PDF_ENABLED" value="${pdfEnabled}"/>

                        <filter token="CDM_UNIVERSE_JDBC_URL" value="${cdm.universe.jdbc.url}"/>
                        <filter token="CDM_UNIVERSE_JDBC_USERNAME" value="${cdm.universe.jdbc.username}"/>
                        <filter token="CDM_UNIVERSE_JDBC_PASSWORD" value="${cdm.universe.jdbc.password}"/>

                        <filter token="CDM_LOADER_JDBC_URL" value="${cdm.loader.jdbc.url}"/>
                        <filter token="CDM_LOADER_JDBC_USERNAME" value="${cdm.loader.jdbc.username}"/>
                        <filter token="CDM_LOADER_JDBC_PASSWORD" value="${cdm.loader.jdbc.password}"/>

                        <filter token="BML_FOOTWEAR_APPAREL_URL" value="${bml.footwear.apparel.db.url}"/>
                        <filter token="BML_FOOTWEAR_APPAREL_USERNAME" value="${bml.footwear.apparel.db.username}"/>
                        <filter token="BML_FOOTWEAR_APPAREL_PASSWORD" value="${bml.footwear.apparel.db.password}"/>

                        <filter token="BML_EQUIPMENT_URL" value="${bml.equipment.db.url}"/>
                        <filter token="BML_EQUIPMENT_USERNAME" value="${bml.equipment.db.username}"/>
                        <filter token="BML_EQUIPMENT_PASSWORD" value="${bml.equipment.db.password}"/>

                        <filter token="BML_USER_ID" value="${bml.user.id}"/>
                        <filter token="BML_SERVER_PROFILE" value="${bml.server.profile}"/>
                        <filter token="BML_INCOMING_DIR" value="${bml.incoming.dir}"/>
                        <filter token="BML_RUN_IMAGE_SYNC_FTWR" value="${bml.run.image.sync.ftwr}"/>
                        <filter token="BML_RUN_IMAGE_SYNC_APRL_EQMT" value="${bml.run.image.sync.aprl.eqmt}"/>

                        <filter token="CPRODPROD_NAME" value="${cprodprd.name}"/>

                        <filter token="CDB_CPRODPRD_URL" value="${cdb.cprodprd.url}"/>
                        <filter token="CDB_CPRODPRD_USERNAME" value="${cdb.cprodprd.username}"/>
                        <filter token="CDB_CPRODPRD_PASSWORD" value="${cdb.cprodprd.password}"/>

                        <filter token="CDB_CINTPRD_URL" value="${cdb.cintprd.url}"/>
                        <filter token="CDB_CINTPRD_USERNAME" value="${cdb.cintprd.username}"/>
                        <filter token="CDB_CINTPRD_PASSWORD" value="${cdb.cintprd.password}"/>

                        <filter token="EJB_PORT_NUMBER_MAIN" value="${ejb.port.number.main}"/>
                        <filter token="EJB_PORT_NUMBER_SSL" value="${ejb.port.number.ssl}"/>
                        <filter token="EJB_PORT_NUMBER_BATCH_MAIN" value="${ejb.port.number.batch.main}"/>
                        <filter token="EJB_PORT_NUMBER_BATCH_SSL" value="${ejb.port.number.batch.ssl}"/>

                        <filter token="MAIN_DOMAIN" value="${main.domain}"/>
                        <filter token="BATCH_DOMAIN" value="${batch.domain}"/>

                        <filter token="EXPORT_OUTPUT_PATH" value="${export.output.path}"/>
                        <filter token="EXPORT_PDF_OUTPUT_PATH" value="${export.pdf.output.path}"/>
                        <filter token="EXPORT_PRINT_OUTPUT_PATH" value="${export.print.output.path}"/>
                        <filter token="EXPORT_SYSTEM_DTD_1" value="${export.system.dtd_1}"/>
                        <filter token="EXPORT_SYSTEM_DTD_2" value="${export.system.dtd_2}"/>
                        <filter token="EXPORT_SYSTEM_PRINT_DTD_1" value="${export.system.print.dtd_1}"/>
                        <filter token="EXPORT_SYSTEM_PRINT_DTD_2" value="${export.system.print.dtd_2}"/>
                        <filter token="EXPORT_SOURCEPATH" value="${export.source.path}"/>
                        <filter token="EXPORT_DESTINATIONPATH" value="${export.destination.path}"/>
                        <filter token="PDF.DEBUG.XSLFO" value="${pdf.Debug.Xslfo}"/>
                        <filter token="EXPORT_CONFIG_FILENAME" value="${export.config.file}"/>

                        <filter token="SPREADSHEET_UPLOAD_BASE_DIR" value="${spreadsheet.upload.base.dir}"/>
                        <filter token="SPREADSHEET_FILEPATH_ROOT" value="${spreadsheet.filepath.root}"/>

                        <filter token="SCRIPTS" value="${scripts}"/>

                    </filterset>
                </copy>

                <copy todir="${build}/conf/" filtering="yes" overwrite="yes">
                    <fileset dir="${basedir}/conf/" includes="cdm.properties"/>
                    <filterset refid="env.filterset"/>
                </copy>

                <copy todir="${build}/conf/bea" filtering="yes" overwrite="yes">
                    <fileset dir="${basedir}/conf/bea" excludes="**/multiconfig/**"/>
                    <filterset refid="env.filterset"/>
                </copy>

                <copy todir="${build}/conf/env" filtering="yes" overwrite="yes">
                    <fileset dir="${basedir}/conf/env"/>
                    <filterset refid="env.filterset"/>
                </copy>


                <copy todir="${build}/conf/sqlscripts" filtering="yes" overwrite="yes">
                    <fileset dir="${basedir}/conf/sqlscripts"/>
                    <filterset refid="env.filterset"/>
                </copy>
                <!--                <copy todir="${build}/conf/sqlscripts" filtering="yes" overwrite="yes">-->
                <!--                    <fileset dir="${basedir}/conf/sqlscripts"/>-->
                <!--                    <filterset refid="env.filterset"/>-->
                <!--                </copy>-->
                <!--                <copy todir="${build}/conf/xml" filtering="yes" overwrite="yes">-->
                <!--                    <fileset dir="${basedir}/conf/xml"/>-->
                <!--                    <filterset refid="env.filterset"/>-->
                <!--                </copy>-->
            </then>
            <else>
                <echo>NOT running on local box, bypassing prepareBuildFiles</echo>
            </else>
        </if>

        <property name="prepareBuildFiles.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Builds the server archives                              -->
    <!-- ======================================================= -->
    <target name="dist" depends="deploy,prepareBuildFiles" unless="dist.done">
        <zip zipfile="${build}/cdm-web.war">
            <zipfileset dir="${output}/deploy/config/cdm-domain/applications/cdm-web"/>
        </zip>
        <zip zipfile="${build}/cdm-ejb.jar">
            <zipfileset dir="${output}/deploy/config/cdm-domain/applications/cdm-ejb"/>
        </zip>
        <exec executable="cp" os="SunOS">
            <arg line="${build}/cdm-web.war"/>
            <arg line="${weblogic}/config/mydomain/applications"/>
        </exec>
        <exec executable="cp" os="SunOS">
            <arg line="${build}/cdm-ejb.jar"/>
            <arg line="${weblogic}/config/mydomain/applications"/>
        </exec>
        <exec executable="cp" os="SunOS">
            <arg line="-r"/>
            <arg line="help"/>
            <arg line="${output}/import"/>
        </exec>

        <if>
            <or>
                <contains string="${env}" substring="dev" casesensitive="no"/>
                <contains string="${env}" substring="qa" casesensitive="no"/>
            </or>
            <then>
                <property name="deploy.weblogic.config" value="true"/>
            </then>
            <else>
                <property name="deploy.weblogic.config" value="false"/>
            </else>
        </if>


        <antcall target="copyWeblogicConfig"/>
        <property name="dist.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Copy the WL config file only on Dev and QA environments -->
    <!-- ======================================================= -->
    <target name="copyWeblogicConfig" depends="setup" if="deploy.weblogic.config">
        <property name="wlConfigFromFile" value="${deployConf}/env/${envr}/${env.dir.name}/config.xml"/>
        <if>
            <equals arg1="${mainOrBatch}" arg2="batch"/>
            <then>
                <echo>Copying weblogic config.xml from ${deployConf}/env/${envr}/${env.dir.name}/config.xml to server directory ${weblogic}/conf/${batch.domain}</echo>
                <copy file="${wlConfigFromFile}" todir="${weblogic}/config/cdmbatch" overwrite="yes"/>
                <chmod file="${weblogic}/config/${batch.domain}/config.xml" perm="g+w"/>
            </then>
            <else>
                <echo>Copying weblogic config.xml from ${deployConf}/env/${envr}/${env.dir.name}/config.xml to server directory ${weblogic}/conf/${main.Domain}</echo>
                <copy file="${deployConf}/env/${envr}/${env.dir.name}/config.xml" todir="${weblogic}/config/${main.domain}" overwrite="yes"/>
            </else>
        </if>
    </target>

    <!-- ======================================================= -->
    <!-- Builds server arhcives for second isntance of WL        -->
    <!-- ======================================================= -->
    <target name="dist2" depends="deploy" unless="dist.done">
        <!--
    <zip zipfile="${build}/cdm-web.war">
    <zipfileset dir="${output}/deploy/config/cdm-domain/applications/cdm-web"/>
    </zip>
        -->
        <zip zipfile="${build}/cdm-ejb.jar">
            <zipfileset dir="${output}/deploy/config/cdm-domain/applications/cdm-ejb"/>
        </zip>
        <!-- <exec  executable="cp" os="SunOS" >
    <arg line="build/cdm-web.war"/>
    <arg line="/cust/bea/wlserver6.1/config/cdmbatch/applications"/>
    </exec>-->
        <exec executable="cp" os="SunOS">
            <arg line="build/cdm-ejb.jar"/>
            <arg line="${weblogic}/config/cdmbatch/applications"/>
        </exec>
        <!--        Determine if we're on QA or Dev, if so, copy the Weblogic config.xml file to the server-->
        <condition property="deploy.weblogic.config" value="true">
            <or>
                <contains string="${env}" substring="dev" casesensitive="no"/>
                <contains string="${env}" substring="qa" casesensitive="no"/>
            </or>
        </condition>
        <antcall target="copyWeblogicConfig"/>
        <property name="dist.done" value="true"/>
    </target>


    <!-- ======================================================= -->
    <!-- Start the WL server after doing a build                 -->
    <!-- ======================================================= -->
    <target name="start" depends="deploy">
        <copy todir="${output}/deploy/config/cdm-domain" overwrite="yes">
            <fileset dir="${basedir}/conf/bea"/>
        </copy>
        <java classname="weblogic.Server" dir="${output}/deploy" fork="true" failonerror="true">
            <classpath refid="weblogic.path"/>
            <jvmarg value="-Dbea.home=${weblogic}/.."/>
            <jvmarg value="-Dweblogic.Domain=cdm-domain"/>
            <jvmarg value="-Dweblogic.Name=cdm-server"/>
            <jvmarg value="-Dweblogic.management.discover=false"/>
            <jvmarg value="-Dweblogic.management.username=${username}"/>
            <jvmarg value="-Dweblogic.management.password=${password}"/>
            <jvmarg value="-Dweblogic.ProductionModeEnabled=false"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xmx512M"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=NONE"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5000"/>
        </java>
    </target>

    <!-- ======================================================= -->
    <!-- Shortcut to start WL, assumes you've done a deploy      -->
    <!-- ======================================================= -->
    <target name="startwl" depends="deployLite">
        <echo>You MUST have done a "deploy" at some point before running this task</echo>
        <copy todir="${output}/deploy/config/cdm-domain" overwrite="yes">
            <fileset dir="${deployConf}/bea"/>
        </copy>
        <java classname="weblogic.Server" dir="${output}/deploy" fork="true" failonerror="true">
            <classpath refid="weblogic.path"/>
            <jvmarg value="-Dbea.home=${weblogic}/.."/>
            <jvmarg value="-Dweblogic.Domain=cdm-domain"/>
            <jvmarg value="-Dweblogic.Name=cdm-server"/>
            <jvmarg value="-Dweblogic.management.discover=false"/>
            <jvmarg value="-Dweblogic.management.username=${username}"/>
            <jvmarg value="-Dweblogic.management.password=${password}"/>
            <jvmarg value="-Dweblogic.ProductionModeEnabled=false"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xmx512M"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=NONE"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5000"/>
        </java>
    </target>



    <!-- ======================================================= -->
    <!-- Start WL under OptimizeIt                               -->
    <!-- ======================================================= -->
    <target name="startwloptimizeit" depends="compile">
        <echo>You MUST have done a "deploy" at some point before running this task</echo>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes">
            <fileset dir="${output}/classes" excludes="**/*EJB*,.dependency-info/**"/>
            <fileset dir="${deployConf}/resource"/>
        </copy>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-ejb">
            <fileset dir="${output}/classes" excludes=".dependency-info/**"/>
            <fileset dir="${deployConf}/resource"/>
        </copy>
        <copy todir="${output}/deploy/config/cdm-domain/applications/cdm-web/WEB-INF/classes" overwrite="yes">
            <fileset dir="${deployConf}/env/${envr}">
                <exclude name="**/xml/**"/>
            </fileset>
        </copy>
        <java classname="intuitive.audit.Audit" dir="${output}/deploy" fork="true" failonerror="true">
            <classpath refid="weblogic.optimize.path"/>
            <jvmarg value="-Dbea.home=${weblogic}/.."/>
            <jvmarg value="-Dweblogic.Domain=cdm-domain"/>
            <jvmarg value="-Dweblogic.Name=cdm-server"/>
            <jvmarg value="-Dweblogic.management.discover=false"/>
            <jvmarg value="-Dweblogic.management.username=${username}"/>
            <jvmarg value="-Dweblogic.management.password=${password}"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xmx512M"/>
            <jvmarg value="-Xrunoii"/>
            <jvmarg value="-port 1470"/>
            <jvmarg value="weblogic.Server"/>
        </java>
    </target>

    <!-- ======================================================= -->
    <!-- Stop WL                                                 -->
    <!-- ======================================================= -->
    <target name="stop" depends="setup">
        <java classname="weblogic.Admin" dir="${build}" fork="true" failonerror="true">
            <classpath refid="weblogic.path"/>
            <arg line="-url t3://localhost:7001"/>
            <arg line="-username ${username}"/>
            <arg line="-password ${password}"/>
            <arg value="SHUTDOWN"/>
        </java>
    </target>

    <!-- ======================================================= -->
    <!-- Run the unit tests for pdfGenerator (this can run without weblogic-->
    <!-- ======================================================= -->
    <target name="testPdfGenerator" depends="copyTestData">
        <echo message="**********Starting Pdf Generator Tests *******************"/>
        <junit maxmemory="256M" failureproperty="test.failed" errorproperty="test.failed" dir="${output}/deploy" fork="true" printsummary="false">
            <classpath refid="export.run.path"/>
            <formatter type="xml"/>
            <batchtest todir="${output}/docs/test">
                <fileset dir="${output}/classes" includes="**/pdf/ComponentTest*.class"/>
                <fileset dir="${output}/classes" includes="**/pdf/*/ComponentTest*.class"/>
                <fileset dir="${output}/classes" includes="**/ComponentTestNikeCurrencyFormatterTest.class"/>
                <!--                        <fileset dir="${output}/classes" includes="**/persistence/**/*Test*.class"/>-->
                <!--                        <fileset dir="${output}/classes" includes="**/component/**/*Test*.class" excludes="**/EngineFactoryTest.class"/>-->
            </batchtest>
        </junit>
    </target>

    <!-- ======================================================================= -->
    <!-- Run the unit tests for export (this does include the pdfGenerator tests -->
    <!-- ======================================================================= -->
    <target name="testExport" depends="copyTestData">
        <echo message="**********Starting Xml Export Tests *******************"/>
        <junit maxmemory="256M" failureproperty="test.failed" errorproperty="test.failed" dir="${output}/deploy" fork="true" printsummary="false">
            <classpath refid="export.run.path"/>
            <formatter type="xml"/>
            <batchtest todir="${output}/docs/test">
                <fileset dir="${output}/classes" includes="**/extract/**/ComponentTest*.class,**/ComponentTestNikeCurrencyFormatterTest.class"/>
            </batchtest>
        </junit>
    </target>

    <!-- ======================================================================= -->
    <!-- Run ALL the unit tests                                                  -->
    <!-- ======================================================================= -->
    <target name="test" depends="copyTestData" unless="test.done">
        <copy todir="${output}/deploy/conf/test">
            <fileset dir="${basedir}/conf/test"/>
        </copy>
        <!--<copy todir="${output}/deploy/xml">
    <fileset dir="${deployConf}/xml"/>
    <fileset dir="${deployConf}/env/${envr}/xml"/>
    </copy>-->
        <parallel>
            <echo message="************* ANTCALL to START ************"/>
            <antcall target="start" inheritAll="false">
                <param name="env" value="${env}"/>
            </antcall>
            <sequential>
                <sleep seconds="${delay}"/>
                <echo message="**********starting all tests except export tests**********"/>
                <antcall target="testonly" inheritRefs="true"/>
                <echo message="**********starting export tests**************"/>
                <antcall target="testExport" inheritRefs="true"/>
                <antcall target="stop" inheritAll="false">
                    <param name="env" value="${env}"/>
                </antcall>
                <antcall target="junitreport"/>
            </sequential>
        </parallel>
        <property name="test.done" value="true"/>
    </target>

    <!-- ======================================================================= -->
    <!-- Run ALL the unit tests - but calls the startwl target (faster startup   -->
    <!-- ======================================================================= -->
    <target name="testwl" depends="copyTestData" unless="test.done">
        <copy todir="${output}/deploy/conf/test">
            <fileset dir="${basedir}/conf/test"/>
        </copy>
        <!--<copy todir="${output}/deploy/xml">
    <fileset dir="${deployConf}/xml"/>
    <fileset dir="${deployConf}/env/${envr}/xml"/>
    </copy>-->
        <parallel>
            <echo message="************* ANTCALL to START ************"/>
            <antcall target="startwl" inheritAll="false">
                <param name="env" value="${env}"/>
            </antcall>
            <sequential>
                <sleep seconds="${delay}"/>
                <echo message="**********starting all tests except export tests**********"/>
                <antcall target="testonly" inheritRefs="true"/>
                <echo message="**********starting export tests**************"/>
                <antcall target="testExport" inheritRefs="true"/>
                <antcall target="stop" inheritAll="false">
                    <param name="env" value="${env}"/>
                </antcall>
                <antcall target="junitreport"/>
            </sequential>
        </parallel>
        <property name="test.done" value="true"/>
    </target>

    <!-- ======================================================================= -->
    <!-- Run ALL the unit tests - but assumes WL is already running   -->
    <!-- ======================================================================= -->
    <target name="testNoWl" depends="copyTestData" unless="test.done">
        <copy todir="${output}/deploy/conf/test">
            <fileset dir="${basedir}/conf/test"/>
        </copy>
        <sequential>
            <echo message="**********starting all tests except export tests**********"/>
            <antcall target="testonly" inheritRefs="true"/>
            <echo message="**********starting export tests**************"/>
            <antcall target="testExport" inheritRefs="true"/>
            <antcall target="stop" inheritAll="false">
                <param name="env" value="${env}"/>
            </antcall>
            <antcall target="junitreport"/>
        </sequential>
        <property name="test.done" value="true"/>
    </target>


    <!-- These are all the tests except the export tests as they require their own classpath -->
    <target name="testonly" depends="setup">
        <echo message="************* STARTING JUNIT TEST SUITE ************"/>
        <junit failureproperty="test.failed" errorproperty="test.failed" dir="${output}/deploy" fork="true" printsummary="false">
            <classpath>
                <path refid="run.path"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${output}/docs/test">
                <fileset dir="${output}/classes" includes="**/ComponentTest*.class" excludes="**/extract/**,**/ComponentTestNikeCurrencyFormatterTest.class"/>
            </batchtest>
        </junit>
        <antcall target="junitreport"/>
    </target>


    <!-- These are all the tests except the export tests as they require their own classpath -->
    <target name="testSingle" depends="setup">
        <echo message="************* STARTING JUNIT TEST SUITE ************"/>
        <junit failureproperty="test.failed" errorproperty="test.failed" dir="${output}/deploy" fork="true" printsummary="false">
            <classpath refid="run.path"/>
            <formatter type="xml"/>
            <batchtest todir="${output}/docs/test">
                <fileset dir="${output}/classes" includes="**/${testClass}.class"/>
            </batchtest>
        </junit>
        <antcall target="junitreport"/>
    </target>

    <!-- These are all the tests except the export tests as they require their own classpath -->
    <target name="testSingleExport" depends="setup">
        <echo message="************* STARTING JUNIT TEST for ${testClass} ************"/>
        <junit failureproperty="test.failed" errorproperty="test.failed" dir="${output}/deploy" fork="true" printsummary="false">
            <classpath refid="export.run.path"/>
            <formatter type="xml"/>
            <batchtest todir="${output}/docs/test">
                <fileset dir="${output}/classes" includes="**/**/${testClass}.class"/>
            </batchtest>
        </junit>
        <antcall target="junitreport"/>
    </target>


    <!-- ======================================================= -->
    <!-- Build the JUnit report                                  -->
    <!-- ======================================================= -->
    <target name="junitreport" depends="copyTestData">
        <junitreport todir="${output}/docs/test">
            <fileset dir="${output}/docs/test">
                <include name="TEST-*ComponentTest*.xml"/>
            </fileset>
            <report format="frames" todir="${output}/docs/test"/>
        </junitreport>
    </target>
    <target name="checkfail" if="test.failed">
        <fail message="At least one unit test failed."/>
    </target>

    <!-- ======================================================= -->
    <!-- Run a specific test case                                -->
    <!-- ======================================================= -->
    <target name="testcase" depends="setup" if="testcase" unless="testcase.done">
        <antcall target="copyTestData"/>

        <java classname="junit.textui.TestRunner" dir="${output}/deploy" fork="true" failonerror="true">
            <jvmarg value="-Dfixture.dir=${basedir}/conf/test"/>
            <classpath>
                <path refid="jaxb.path"/>
                <path refid="run.path"/>
                <path refid="pdf_resource_bundles"/>
            </classpath>
            <arg value="${testcase}"/>
        </java>
        <property name="testcase.done" value="true"/>
    </target>

    <target name="copyTestData" depends="setup">
        <copy todir="${output}/deploy/conf/test">
            <fileset dir="${basedir}/conf/test"/>
        </copy>
    </target>

    <!-- ======================================================= -->
    <!-- Validate the XML in the project                         -->
    <!-- ======================================================= -->
    <target name="xml" depends="setup" unless="xml.done">
        <xmlvalidate failonerror="no" lenient="yes" warn="yes" classname="org.apache.xerces.parsers.SAXParser">
            <classpath refid="lib.path"/>
            <fileset dir="${basedir}">
                <exclude name="**/deploy/**"/>
                <include name="**/*.xml"/>
            </fileset>
        </xmlvalidate>
        <property name="xml.done" value="true"/>
    </target>


    <!-- ======================================================= -->
    <!-- Perform project audit                                   -->
    <!-- ======================================================= -->
    <target name="audit" depends="setup" unless="audit.done">
        <jdepend outputfile="${output}/docs/audit.txt">
            <sourcespath>
                <pathelement location="${basedir}/src"/>
                <pathelement location="${basedir}/test"/>
            </sourcespath>
            <classpath refid="ant.path"/>
        </jdepend>
        <property name="audit.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Generate the project docs                               -->
    <!-- ======================================================= -->
    <target name="doc" depends="compile" unless="doc.done">
        <javadoc maxmemory="128M" packagenames="com.nike.cdm.*" sourcepath="${basedir}/src" destdir="${output}/docs/doccheck" classpathref="class.lib.weblogic.path" doclet="com.sun.tools.doclets.doccheck.DocCheck" docletpath="${basedir}/ant/doccheck.jar"/>
        <javadoc maxmemory="128M" packagenames="com.nike.cdm.*" destdir="${output}/docs/api" protected="yes" classpathref="class.lib.weblogic.path">
            <sourcepath>
                <pathelement path="${basedir}/src"/>
                <pathelement path="${basedir}/test"/>
            </sourcepath>
            <doctitle><![CDATA[<h1>CDM</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2003 Nike. All Rights Reserved.</i>]]></bottom>
            <group title="Domain" packages="com.nike.cdm.domain*"/>
            <group title="Exceptions" packages="com.nike.cdm.exception*"/>
            <group title="Extract" packages="com.nike.cdm.extract*"/>
            <group title="Load" packages="com.nike.cdm.load*"/>
            <group title="Persistence" packages="com.nike.cdm.persistence*"/>
            <group title="Service" packages="com.nike.cdm.service*"/>
            <group title="Test" packages="com.nike.cdm.test*"/>
            <group title="Utility" packages="com.nike.cdm.util*"/>
            <group title="Web" packages="com.nike.cdm.web*"/>
        </javadoc>
        <property name="doc.done" value="true"/>
    </target>

    <!-- ======================================================= -->
    <!-- Create an html index page for the docs                  -->
    <!-- ======================================================= -->
    <target name="index" depends="setup" unless="index.done">
        <copy file="${deployConf}/build.html" tofile="${output}/docs/index.html" filtering="yes" overwrite="yes"/>
        <property name="index.done" value="true"/>
    </target>
    <target name="all" depends="dist,test,audit,xml,index,jarcdm,doc"/>
    <target name="allwl" depends="test,audit,xml,index,doc"/>

    <!-- ======================================================= -->
    <!-- Run all the steps used to produce Javadoc and JDiff HTML reports -->
    <!-- ======================================================= -->
    <target name="jdiff" depends="setup,jdiffClean,javadoc_old,javadoc_new,jdiff_old_api,jdiff_new_api,jdiff_compare_apis"/>

    <!-- ======================================================= -->
    <!-- Create the directories for the Javadoc output          -->
    <!-- ======================================================= -->
    <target name="create_javadoc_dirs" depends="setup">
        <mkdir dir="${OLD_DOCS}"/>
        <mkdir dir="${NEW_DOCS}"/>
    </target>

    <!-- ======================================================= -->
    <!-- Produce Javadoc HTML for the old API                    -->
    <!-- ======================================================= -->
    <target name="javadoc_old" depends="setup,create_javadoc_dirs">
        <javadoc maxmemory="512M" private="yes" sourcepath="${OLD_SRC}" destdir="${OLD_DOCS}" verbose="no" packagenames="${OLD_PACKAGES}" doctitle="${OLD_API_TITLE}" windowtitle="${OLD_API_TITLE}">
            <classpath>
                <path refid="jdiff.class.path"/>
            </classpath>
        </javadoc>
    </target>

    <!-- ======================================================= -->
    <!-- Produce Javadoc HTML for the new API                    -->
    <!-- ======================================================= -->
    <target name="javadoc_new" depends="setup,create_javadoc_dirs">
        <javadoc maxmemory="512M" private="yes" sourcepath="${NEW_SRC}" destdir="${NEW_DOCS}" verbose="no" packagenames="${NEW_PACKAGES}" doctitle="${NEW_API_TITLE}" windowtitle="${NEW_API_TITLE}">
            <classpath>
                <path refid="jdiff.class.path"/>
            </classpath>
        </javadoc>
    </target>

    <!-- ======================================================= -->
    <!-- Use Javadoc with the JDiff doclet to generate an XML file -->
    <!-- representing the old API                                  -->
    <!-- ======================================================= -->
    <target name="jdiff_old_api" depends="setup,create_javadoc_dirs">
        <javadoc maxmemory="512M" sourcepath="${OLD_SRC}" packagenames="${OLD_PACKAGES}">
            <doclet name="jdiff.JDiff" path="${basedir}/ant/jdiff.jar:${basedir}/lib/xercesImpl.jar">
                <param name="-apiname" value="${OLD_API}"/>
                <param name="-baseURI" value="${BASE_URI}"/>
            </doclet>
            <classpath>
                <path refid="jdiff.class.path"/>
            </classpath>
        </javadoc>
    </target>

    <!-- ======================================================= -->
    <!-- Use Javadoc with the JDiff doclet to generate an XML file -->
    <!-- representing the new API                                  -->
    <!-- ======================================================= -->
    <target name="jdiff_new_api" depends="setup,create_javadoc_dirs">
        <javadoc maxmemory="512M" sourcepath="${NEW_SRC}" packagenames="${NEW_PACKAGES}">
            <doclet name="jdiff.JDiff" path="${basedir}/ant/jdiff.jar:${basedir}/lib/xercesImpl.jar">
                <param name="-apiname" value="${NEW_API}"/>
                <param name="-baseURI" value="${BASE_URI}"/>
            </doclet>
            <classpath>
                <path refid="jdiff.class.path"/>
            </classpath>
        </javadoc>
    </target>

    <!-- ======================================================= -->
    <!-- Use Javadoc with the JDiff doclet to compare the two XML files -->
    <!-- representing the old and new APIs, and generate an HTML report -->
    <!-- describing the differences between the two APIs                -->
    <!-- ======================================================= -->
    <target name="jdiff_compare_apis" depends="setup,create_javadoc_dirs">
        <!-- To use this task with JDK 1.4, use ANT 1.5 and change -->
        <!-- packagenames to sourcefiles.                          -->
        <javadoc maxmemory="512M" private="yes" sourcepath="${NEW_SRC}" destdir="${NEW_DOCS}" packagenames="com.nike.cdm.util">
            <doclet name="jdiff.JDiff" path="${basedir}/ant/jdiff.jar:${basedir}/lib/xerces.jar">
                <param name="-stats"/>
                <param name="-oldapi" value="${OLD_API}"/>
                <param name="-newapi" value="${NEW_API}"/>
                <!-- We could use a file:/// prefix to refer to Javadoc files, or -->
                <!-- we could make them relative to the changes directory.        -->
                <!-- Remember to add a trailing forward slash.                    -->
                <param name="-javadocold" value="../../olddocs/"/>
                <param name="-javadocnew" value="../"/>
            </doclet>
            <classpath>
                <path refid="jdiff.class.path"/>
            </classpath>
        </javadoc>
        <!-- Copy two image files. black.gif is only needed because -stats was -->
        <!-- used -->
        <copy file="${basedir}/ant/background.gif" todir="${NEW_DOCS}"/>
        <copy file="${basedir}/ant/black.gif" todir="${NEW_DOCS}"/>
    </target>

    <!-- ======================================================= -->
    <!-- Clean up various files and directories                  -->
    <!-- ======================================================= -->
    <target name="jdiffClean" depends="setup">
        <delete includeEmptyDirs="true">
            <fileset dir="${output}/docs" includes="**/*.xml,**/*.class,**/*.html,**/*.css,**/*.gif"/>
        </delete>
    </target>
</project>
