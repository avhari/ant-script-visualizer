<?xml version="1.0" encoding="UTF-8"?>
<project name="cdm-cc">
    <!--    This is the "cc" target of CDM.  It contains all the project                                  -->
    <!--     ClearCase stuff for reuse across buildfiles.                                                             -->
    <!--    You use this by pasting the following block into your build file (uncommented, of course):          -->
    <!--        <import file="build_dir.xml"/>                                                            -->
    <!--        <import file="build_properties.xml"/>                                                     -->
    <!--        <import file="build_paths.xml"/>                                                          -->
    <!--        <import file="build_taskdefs.xml"/>                                                       -->
    <!--    and the targets of these files are magically imported into your buildfile.  Make your "init" target -->
    <!--    have these as a dependency as follows, and you'll have all you need magically imported:             -->
    <!--        <target name="init" depends="properties,paths,taskdefs" unless="init.done">                     -->

    <target name="cc-init" depends="init">


        <!--     Define the ccexclude task.  This task takes in a cleartool command to
                 execute, and a list of comma separated patterns to exclude from the output.
                 Any lines containing a pattern will not be displayed in the output.  If there is a space
                 following a comma, the space is part of the pattern.  If no patterns are listed, all output
                 is displayed.  For the command parameter, the word cleartool should not be included.  -->
        <taskdef name="ccexclude"
            classname="net.nike.build.ant.task.CcExcludeTask">
            <classpath>
                <fileset dir="${deprecated.lib.ant}/ccTasks">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <!--     Define the ccinclude task.  This task takes in a cleartool command to
                 execute, and a list of comma separated patterns to include in the output.
                 Any lines containing a pattern will be displayed in the output.  If there is a space
                 following a comma, the space is part of the pattern.  If no patterns are listed, all output
                 is displayed.  For the command parameter, the word cleartool should not be included.  -->
        <taskdef name="ccinclude"
            classname="net.nike.build.ant.task.CcIncludeTask">
            <classpath>
                <fileset dir="${deprecated.lib.ant}/ccTasks">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <!--     Define the ccupdate task.  This executes a cleartool update command.  It takes in
                 a list of comma separated patterns to include in the output.
                 Any lines containing a pattern will be displayed in the output.  If there is a space
                 following a comma, the space is part of the pattern.  If no patterns are listed, all output
                 is displayed.  For the command parameter, the word cleartool should not be included.  -->
        <taskdef name="ccupdate"
            classname="net.nike.build.ant.task.CcUpdateTask">
            <classpath>
                <fileset dir="${deprecated.lib.ant}/ccTasks">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <!--     Define the ccfindmerge task.  This task will check to see if a snapshot view has checked out
                 files, and if so, will merge the latest repository copies into the local copy.  Success and
                 failure of merges are reported.-->
        <taskdef name="ccfindmerge"
            classname="net.nike.build.ant.task.CcFindMergeTask">
            <classpath>
                <fileset dir="${deprecated.lib.ant}/ccTasks">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <!--     Checks for any clearcase view privates.-->
        <taskdef name="ccviewprivate"
            classname="net.nike.build.ant.task.CcViewPrivateTask">
            <classpath>
                <fileset dir="${deprecated.lib.ant}/ccTasks">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <!--  Adds any files from clearcase.add, and checks in all checked out files.-->
        <taskdef name="cccheckin"
            classname="net.nike.build.ant.task.CcCheckinTask">
            <classpath>
                <fileset dir="${deprecated.lib.ant}/ccTasks">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
    </target>
    <!-- Checks to see if a user has any viewprivates in their snapshot directories. Set the exclude
           attribute for any files or directories you don't wish to see.  Currently, the task looks
           to see if the text is some part of the path being checked.  If it is, it is excluded from
           the output displayed.  The command is the command to execute.  See the taskdef above for additional
           documentation in regard to the ant task.

              command:
                   1.  ls    The List command for cleartool
                   2.  -r    Look recursively in the directory structure
                   3.  -vie  Show only view privates

      -->
    <target name="viewprivate" unless="viewprivate.done" depends="cc-init" description="Checks to see if a user has any viewprivates in their snapshot directories">
        <echo>Looking for view privates...</echo>
        <ccviewprivate
            command="ls -r -vie"
            exclude="*.mkelem*,*.keep*,*.contrib*,*DecompiledSrc*,*.iml*,*.iws*,*.ipr*,*.tar*,*.dfPackage*,*.wmf*,*gensrc\*,*genconf*,*decompiledSrc\*,*legacySrc\*,*Documents\*,*CruiseControl\*,*CruiseControl_works\*,*middlegen\*,*codereviews\*,*.unloaded*,*.checkedout*,*.suml*,*CHECKEDOUT*,*findmerge*,*junit*,*.hijacked,*.merge"
            addFilePath="${base.dir}/clearcase.add"
            ignoreFilePath="${base.dir}/clearcase.ignore"
            skippedFilesProperty="viewprivate.skipped.files"
            alwaysShowErrOutput="false"/>
        <property name="viewprivate.done" value="done"/>
    </target>

    <!-- Updates the user's snapshot view with the latest repository versions.  This task will call the findmerge task so checkedout
         files will also have the latest updates.  The findmerge task will also call the viewprivate task and list any files that
         have not been checked in to the repository.  The ccupdate task also takes a list of patterns to look for to include
         in the output.  If no includes are specified, all output is written to the console.  See the taskdef above for additional
         documentation in regard to the ant task.

        Also makes a call to cleartool, requesting a check of all currently checkedout files against the repository.  The following
        is an explanation of the options:
              1.  -type   The types of objects to check.  In this case we have listed both files (f) and directories (d) or fd.
              2.  -flatest  Check the lastest version of the repository against the version in the snapshot view.
              3.  -unreserved  If a merge takes place successfully, check out the result as unreserved.
              4.  -merge  If a merge is required, do it.
              5.  -abort  If a simple merge fails, abort the merge.
              6.  -print  Display any merge info to the window.

       This task also calls the viewprivate task to indicate if a user has any files not yet checked in.
    -->
    <target name="update" depends="cc-init" description="Updates the user's snapshot view with the latest repository versions.">
        <echo>Merging repository files into your checked out files...</echo>
        <ccfindmerge haltOnMergeFailure="false"/>

        <echo>Updating all non-checkedout files...</echo>
        <echo> </echo>
        <ccupdate
            exclude="*Processing dir*,*End dir*,*.mkelem*,*.keep*,*.contrib*,*DecompiledSrc*,*.iml*,*.iws*,*.ipr*,*.tar*,*.dfPackage*,*.wmf*,*gensrc\*,*genconf*,*decompiledSrc\*,*legacySrc\*,*Documents\*,*CruiseControl\*,*CruiseControl_works\*,*middlegen\*,*codereviews\*,*.unloaded*,*.checkedout*,*.suml*,*CHECKEDOUT*,*about.jsp*,*findmerge*,*junit*,*.hijacked,*.merge"
            include="*Keeping*,*loading*,*Loading*,*Loaded*,*loaded*,*Unloaded*,*unloaded*,*Changed*,*changed*,*Changing*,*changing*,*New*,*new*"
            alwaysShowErrOutput="true"
            ignoreFilePath="${base.dir}/clearcase.ignore"
            resolveHijacked="false"/>
        <echo> </echo>
        <antcall target="viewprivate" inheritall="true" inheritRefs="true"/>
    </target>

    <!-- Updates the user's snapshot view with the latest repository versions.  This task will call the findmerge task so checkedout
         files will also have the latest updates.  The findmerge task will also call the viewprivate task and list any files that
         have not been checked in to the repository.  The ccupdate task also takes a list of patterns to look for to include
         in the output.  If no includes are specified, all output is written to the console.  See the taskdef above for additional
         documentation in regard to the ant task.

        Also makes a call to cleartool, requesting a check of all currently checkedout files against the repository.  The following
        is an explanation of the options:
              1.  -type   The types of objects to check.  In this case we have listed both files (f) and directories (d) or fd.
              2.  -flatest  Check the lastest version of the repository against the version in the snapshot view.
              3.  -unreserved  If a merge takes place successfully, check out the result as unreserved.
              4.  -merge  If a merge is required, do it.
              5.  -abort  If a simple merge fails, abort the merge.
              6.  -print  Display any merge info to the window.

       This task also calls the viewprivate task to indicate if a user has any files not yet checked in.
    -->
    <target name="updateForCheckin" depends="cc-init" description="Updates the user's snapshot view with the latest repository versions.">
        <echo>Merging repository files into your checked out files...</echo>
        <ccfindmerge haltOnMergeFailure="true"/>

        <echo>Updating all non-checkedout files...</echo>
        <echo> </echo>
        <ccupdate
            exclude="*Processing dir*,*End dir*,*.mkelem*,*.keep*,*.contrib*,*DecompiledSrc*,*.iml*,*.iws*,*.ipr*,*.tar*,*.dfPackage*,*.wmf*,*gensrc\*,*genconf*,*decompiledSrc\*,*legacySrc\*,*Documents\*,*CruiseControl\*,*CruiseControl_works\*,*middlegen\*,*codereviews\*,*.unloaded*,*.checkedout*,*.suml*,*CHECKEDOUT*,*about.jsp*,*findmerge*,*junit*,*.hijacked,*.merge"
            include="*Keeping*,*loading*,*Loading*,*Loaded*,*loaded*,*Unloaded*,*unloaded*,*Changed*,*changed*,*Changing*,*changing*,*New*,*new*"
            alwaysShowErrOutput="true"
            resolveHijacked="true"
            ignoreFilePath="${base.dir}/clearcase.ignore"
            skippedFilesProperty="update.skipped.files"/>
        <echo> </echo>

        <!-- If all hijacked files have been resolved, then run the viewprivate task, otherwise fail the build. -->
        <if>
            <or>
                <equals arg1="${update.skipped.files}" arg2="true"/>
            </or>
            <then>
                <fail message="Build Failed...Still have unresolved hijacked files"/>
            </then>
            <else>
                <antcall target="viewprivate" inheritall="true" inheritRefs="true"/>
            </else>
        </if>
    </target>

    <!-- Adds files listed in clearcase.add, and checks in all checkedout files. -->
    <target name="checkin" depends="updateForCheckin" description="Adds files listed in the clearcase.add file, and checks in all checked out files.">
        <if>
            <or>
                <equals arg1="${viewprivate.skipped.files}" arg2="true"/>
            </or>
            <then>
                <fail message="Build Failed...Still have view privates"/>
            </then>
            <else>
                <antcall target="clean-checkin" inheritall="false" inheritRefs="false"/>
                <ant antfile="build-legacy.xml" target="legacy-compile" inheritall="false" inheritrefs="false"/>
                <ant antfile="build-legacy.xml" target="legacy-compile-test" inheritall="false" inheritrefs="false"/>
                <ant antfile="build-legacy.xml" target="legacy-compile-integration" inheritall="false" inheritrefs="false"/>
                <antcall target="test" inheritall="false" inheritRefs="false"/>
                <echo>Checking in files...</echo>
                <cccheckin addFilePath="${base.dir}/clearcase.add"/>
            </else>
        </if>

    </target>
</project>