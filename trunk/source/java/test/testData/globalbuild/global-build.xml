<?xml version="1.0"?>
<!-- ================================================================ -->
<!-- nike.net build file                                         -->
<!-- Ant docs:  http://jakarta.apache.org/ant/manual/                 -->
<!-- ================================================================ -->
<project name="nikenet-global" basedir="." default="help">

    <!-- Access any environment variables -->
    <property environment="env"/>

    <!-- if the user has his own properties set then these will override
    anything else. The USERPROFILE on Windows is set
    to C:\Documents and Settings\USERNAME -->
    <property file="${env.USERPROFILE}/nikenetshared.properties"/>

    <!-- Default standard system build properties -->
    <property file="global-build.properties"/>

    <path id="compile.classpath">
        <path refid="lib.classpath"/>
        <path refid="ant.classpath"/>
    </path>

    <path id="unittest.classpath">
        <path refid="lib.classpath"/>
        <path refid="test.classpath"/>
        <path refid="ant.classpath"/>
    </path>

    <path id="lib.classpath">
        <pathelement location="${java.home.dir}/jre/lib/rt.jar"/>
        <pathelement location="${lib.dir}/apache/log4j-1.2.8.jar"/>
        <pathelement location="${lib.dir}/jaxb1/dom.jar"/>
        <pathelement location="${lib.dir}/jaxb1/sax.jar"/>
        <pathelement location="${lib.dir}/jaxb1/xercesImpl.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-beanutils.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-lang.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-pool.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-collections.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-codec-1.2.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/struts/struts.jar"/>
        <pathelement location="${lib.dir}/jce/jce1_2_2.jar"/>
        <pathelement location="${lib.dir}/test/junit-3.8.1.jar"/>
        <pathelement location="${lib.dir}/sap/sapjco.jar"/>
        <pathelement location="${lib.dir}/servlet.jar"/>
        <pathelement location="${lib.dir}/xineo-xml-1.1.0.jar"/>
        <pathelement location="${lib.dir}/jaxp/jaxp.jar"/>
    </path>

    <path id="test.classpath">
        <pathelement location="${global.compile.out.dir}"/>
        <pathelement location="${lib.dir}/test/junit-3.8.1.jar"/>
        <pathelement location="${global.example.app.config.dir}/classpath"/>
        <pathelement location="${global.app.config.dir}/classpath"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-logging.jar"/>
        <pathelement location="${lib.dir}/jce/local_policy.jar"/>
        <pathelement location="${lib.dir}/jce/sunjce_provider.jar"/>
        <pathelement location="${lib.dir}/jce/US_export_policy.jar"/>
    </path>

    <path id="ant.classpath">
        <pathelement location="${ant.home.dir}/lib/ant.jar"/>
        <pathelement location="${ant.home.dir}/lib/optional.jar"/>
    </path>

    <target name="help" depends="usage" description="Help on what targets are available"/>

    <target name="usage" description="Help on what targets are available">
        <echo message="Nike.net Global Shared Build Script:"/>
        <echo message=""/>
        <echo message="Possible targets are:"/>
        <echo message=""/>
        <echo message="        usage         This message of all possible targets."/>
        <echo message="        help          Same as usage."/>
        <echo message="        init          Initialize everything."/>
        <echo message="        compile       Compile global source tree."/>
        <echo message="        compile-all   Compiles all global source trees (source and test-source)."/>
        <echo message="        compile-all-clean   Cleans out classes before running compile-all."/>
        <echo message="        jar-all           Creates all the nikenet-global.jar files and puts them in dist/lib"/>
        <echo message="        clean         Cleans out all built classes, jars, and tars."/>
        <echo message="        junit         Run all junit tests under global/test_source."/>
    </target>


    <target name="init" depends="make-dirs" description="Initializes all the variables needed for the build script">
        <tstamp>
            <format property="buildtime" pattern="yyyy-MM-dd'T'HH:mm:ss"/>
        </tstamp>
        <echo message="--------- ${ccproject.name} ---------"/>
        <echo message="Timestamp: ${buildtime}"/>
        <echo message="java.home = ${java.home}"/>
        <echo message="ant.java.version = ${ant.java.version}"/>
        <echo message="ant.version = ${ant.version}"/>
        <echo message="ant.project.name = ${ant.project.name}"/>
        <echo message="ant.file = ${ant.file}"/>
    </target>

     <target name="make-dirs" description="Makes the directories that are needed for the build">
        <mkdir dir="${global.compile.out.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dependencies.dir}"/>
        <mkdir dir="${dist.lib.dir}"/>
        <mkdir dir="${unittest.report.dir}"/>
        <mkdir dir="${emma.report.dir}"/>
    </target>

     <target name="compile-all" depends="init,compile,compile-test" description="Compiles all source trees"/>

    <target name="compile-all-clean" depends="clean,init,compile-all" description="Clean and compile all source"/>

    <!-- compile all source for globally shared nike.net classes -->
    <target name="compile" depends="init" description="Compiles global source and gen-source tree">
        <!-- depend gives us greater control over dependencies in incremental builds -->
        <depend srcdir="${global.source.dir}" destdir="${global.compile.out.dir}"
            cache="${dist.dir}/dependencies" closure="true"/>
        <javac
            destdir="${global.compile.out.dir}"
            includeAntRuntime="false"
            debug="${compile.debug}"
            debugLevel="${compile.debugLevel}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}">
            <src path="${global.source.dir}"></src>
            <classpath refid="compile.classpath"></classpath>
        </javac>
        <javac
            destdir="${global.compile.out.dir}"
            includeAntRuntime="false"
            debug="${compile.debug}"
            debugLevel="${compile.debugLevel}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}">
            <src path="${global.gensource.dir}"></src>
            <classpath refid="compile.classpath"></classpath>
        </javac>
    </target>

    <!-- compile all test source for om shared nike.net classes -->
    <target name="compile-test" depends="compile" description="Compiles global test source tree.">
        <javac
            destdir="${global.compile.out.dir}"
            includeAntRuntime="true"
            debug="${compile.debug}"
            debugLevel="${compile.debugLevel}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            excludes="">
            <src path="${global.test.source.standalone.dir}"/>
            <classpath path="${global.compile.out.dir}"></classpath>
            <classpath refid="compile.classpath"></classpath>
        </javac>
    </target>

    <target name="jar-all" depends="compile-all-clean,jar-classes,jar-config,jar-src" description="Jars all global classes, config, and source files"/>

     <!-- jars all the globally shared nikenet classes -->
     <target name="jar-classes" depends="compile-all,buildinfo" description="Jars all the global source">
        <jar destfile="${dist.lib.dir}/${global.jar.file}"
            compress="false">
            <fileset dir="${global.compile.out.dir}"/>
             <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
    </target>

    <target name="jar-config" depends="buildinfo" description="Jars all the global config files">
        <jar destfile="${dist.lib.dir}/${global.jar.classpath.file}"
            compress="false">
            <fileset dir="${global.app.config.dir}/classpath"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
    </target>

    <target name="jar-src" depends="buildinfo" description="Jars all the global source code files">
        <jar destfile="${dist.lib.dir}/${global.src.jar.file}"
            compress="false">
            <fileset dir="${global.source.dir}"/>
            <fileset dir="${global.gensource.dir}"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
    </target>


    <!-- clean up stuff created from our build -->
    <target name="clean" depends="delete-dirs,make-dirs" description="Cleans all the unnecessary files"/>

    <target name="delete-dirs" description="Deletes directories for the build cleanup task">
        <echo message="Deleting output directories"/>
        <delete dir="${global.compile.out.dir}" failonerror="true" includeEmptyDirs="true"/>
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${dist.dir}/lib" includes="**/*"/>
        </delete>
    </target>

    <!-- Run the junit standalone unit tests -->
    <target name="junit" depends="compile-all,compile-test" description="Run the junit tests.">
        <junit printsummary="on" haltonfailure="false"
            fork="false" showoutput="true" failureproperty="test.failed">
            <classpath path="${global.compile.out.dir}"/>
            <classpath refid="compile.classpath"/>
            <formatter type="brief" usefile="false"/>
            <batchtest>
                <fileset dir="${global.test.source.standalone.dir}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

     <!-- Create the build's info file and read its results into properties. -->
    <target name="buildinfo" depends="compile" description="Creates a build info file">
        <!-- Collect baseline data from clearcase. -->
        <exec executable="C:\Program Files\Rational\Clearcase\bin\cleartool"
            os="Windows 2000"
            output="${baselinefile}">
            <arg value="lsbl"/>
            <arg value="-fmt"/>
            <arg value="%n\t%Fu\t%d\n"/>
            <arg value="-stream"/>
            <arg value="${baselinestream}"/>
        </exec>
        <java classname="net.nike.common.build.BaselineReader">
            <arg value="${dist.dir}/"/>
            <arg value="${buildinfo}"/>
            <arg value="${app.root.dir}/build/${baselinefile}"/>
            <classpath path="${global.compile.out.dir}"/>
            <classpath path="${ant.home.dir}/lib/ant.jar"/>
            <classpath path="${ant.home.dir}/lib/optional.jar"/>
        </java>
        <property file="${dist.dir}/${buildinfo}"/>
    </target>

    <!-- Freshen up the source files inn a clearCase View -->
    <target name="clearcase-update" description="Update a clearcase project">
        <ccupdate viewpath="${clearcase.viewname}" graphical="false" log="cclog.log"
            overwrite="true" currenttime="true" rename="false"/>
    </target>

    <!-- Changes for automating the shared VOB comparison process -->
    <!-- Please refer to /doc/process/Clearcase view comparison process.doc in the -->
    <!-- shared VOB to know more about the what/when/how/why details about the -->
    <!-- comparison process automation. -->

    <!-- Compare shared VOB to OMR6PS1 VOB. Change the clearcase view location,  -->
    <!-- staging-folder-name used for the comparison process and the report key.  -->
    <!-- We have to set these params multiple times per comparison as we do not   -->
    <!-- want to use a global properties file with default settings and nicely    -->
    <!-- overridding them on a case by case basis. -->

      <target name="compare-shared-to-OMR6PS1" depends="comparison-setup, copy-shared-src">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6ps1view.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="Shared_To_OMR6_PS1"/>
          </antcall>
      </target>

    <!-- Compare shared VOB to OMR6_ALL VOB. The only thing that should be changed is the OMR6_ALL view location.  -->
      <target name="compare-shared-to-OMR6ALL" depends="comparison-setup, copy-shared-src">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6allview.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="Shared_To_OMR6_ALL"/>
          </antcall>
      </target>

    <!-- Compare shared VOB to OMR6_ALL VOB. The only thing that should be changed is the OMR6_Bonus view location.  -->
      <target name="compare-shared-to-OMR6-Bonus" depends="comparison-setup, copy-shared-src">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6bonusview.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="Shared_To_OMR6_Bonus"/>
          </antcall>
      </target>

    <!-- Compare shared VOB to OMR6_ALL VOB. The only thing that should be changed is the OMR7_ALL view location.  -->
      <target name="compare-shared-to-OMR7ALL" depends="comparison-setup, copy-shared-src">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr7allview.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="Shared_To_OMR7_ALL"/>
          </antcall>
      </target>

    <!-- Compare OMR6_ALL view to OMR6_Bonus view.   -->
    <!-- For OMR6_ABC to OMR6_XYZ view comparisons, we need to define the source view as well -->
    <!-- as source staging area and explicitly call the copy-cc-view-to-staging task for the  -->
    <!-- source view as it differs from case to case. You can change the source/target view   -->
    <!-- as well as the staging folders if required. -->

      <target name="compare-OMR6ALL-to-OMR6_Bonus" depends="comparison-setup">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6allview.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/source-flat"/>
          </antcall>
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6bonusview.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="OMR6_ALL_To_OMR6_Bonus"/>
          </antcall>
      </target>

    <!-- Compare OMR6_ALL view to OMR6_MAINT_PS2 view.   -->
      <target name="compare-OMR6ALL-to-MAINT_OMR6_PS2" depends="comparison-setup">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6allview.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/source-flat"/>
          </antcall>
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6ps2view.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="OMR6_ALL_To_OMR6_PS2"/>
          </antcall>
      </target>

      <target name="compare-OMR6PS3-to-OMR7_OC_DEV" depends="comparison-setup">
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6ps3view.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/source-flat"/>
          </antcall>
          <antcall target="copy-cc-view-to-staging-omr7">
              <param name="cc-view-name" value="${clearcase.omr7ocdev.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="OMR6PS3-to-OMR7_OC_DEV"/>
          </antcall>
      </target>

    <target name="compare-OMR6PS2-to-OMR7_CR_DEV" depends="comparison-setup">
            <antcall target="copy-cc-view-to-staging-omr7">
              <param name="cc-view-name" value="${clearcase.omr7crdev.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/dest-flat"/>
          </antcall>
          <antcall target="copy-cc-view-to-staging">
              <param name="cc-view-name" value="${clearcase.omr6ps2view.name}"/>
              <param name="staging-folder-name" value="${comparison-stage}/source-flat"/>
          </antcall>

          <antcall target="generate-comparison-report">
              <param name="comparison-report-key" value="OMR7_CR_DEV-to-OMR6PS2"/>
          </antcall>
      </target>
        <!-- Setup comparision specific property settings. The only thing to change here would be the     -->
        <!-- shared-vob view location. (assuming you have accepted all default settings during beyond compare  -->
        <!-- installation) -->

      <target name="comparison-setup">
          <property name="root-drive" value="c:"/>
          <property name="beyond-compare-exe" value="${beyond-compare-home}/bc2" />
          <property name="beyond-compare-script" value="compare.txt"/>
          <property name="comparison-stage" value="${root-drive}/comparison-stage"/>
          <property name="shared-vob" value="${clearcase.sharedview.name}" />
          <property name="comparison-source-dir" value="${comparison-stage}/source-flat"/>
          <property name="comparison-dest-dir" value="${comparison-stage}/dest-flat"/>
          <property name="comparison-reports-dir" value="${comparison-stage}/reports"/>
          <mkdir dir="${comparison-stage}"/>
          <mkdir dir="${comparison-reports-dir}"/>
      </target>

    <!-- Update the shared VOB view and copy the source to a staging area with flattened directory struture for comparison -->
    <target name="copy-shared-src">
        <!-- Get the latest shared source from clearcase -->
          <antcall target="clearcase-update-duplicate">
              <param name="target-view-name" value="${shared-vob}"/>
          </antcall>

        <!-- copy comparison source (shared src) to a staging folder with flattened directory struture -->
        <!-- Include only the /global/ and /om/ folder from the shared VOB as they are the only potential -->
        <!-- candidates for comparison at this time. -->
        <delete dir="${comparison-source-dir}"/>
        <mkdir dir="${comparison-source-dir}"/>
        <copy todir="${comparison-source-dir}" flatten="true" failonerror="false" preservelastmodified="true">
            <fileset dir="${shared-vob}/B2B_Common/global/" includes="**/*.*"/>
            <fileset dir="${shared-vob}/B2B_Common/om/" includes="**/*.*"/>
        </copy>
    </target>

    <!-- Generic task to copy the OMR6_XXX code base to comparison staging area -->
    <!-- Set the correct values for the clearcase view name and staging folder locations -->
    <!-- We update only the /source, /app-config and /test-source folders as those are the -->
    <!-- only folders considered for comparison process. We avoid updating the entire view -->
    <!-- thus saving some time. -->

    <target name="copy-cc-view-to-staging">
        <!-- Get the latest target source from clearcase -->
          <antcall target="clearcase-OMR6-view-update">
              <param name="target-view-name" value="${cc-view-name}"/>
          </antcall>

        <!-- make the comparison stage area so that we can copy the files for comparison -->
        <delete dir="${staging-folder-name}"/>
        <mkdir dir="${staging-folder-name}"/>

        <!-- copy comparison target src to a staging folder with flattened directory struture -->
        <!-- Exclude duplicate files so that we don't overwrite comparison target files incorrectly.  -->
        <!-- Most of our comparison target files come from common/reference folder. If similiar file name -->
        <!-- exist in other folders such as domain/common or domain/claims, we don't want to overwrite the -->
        <!-- legitimate file for comparison with identical file from different folder. We found that there -->
        <!-- are about ten files matching this criteria at this time and we are manually excluding them    -->
        <!-- from the copy process.  -->
        <!-- We are considering only the /source, /app-config, and /test-source folders from the target view -->
        <!-- for comparison. In the future if we have other potential folders those must be added here.  -->

        <copy todir="${staging-folder-name}" flatten="true" failonerror="true" preservelastmodified="true">
            <fileset dir="${cc-view-name}/source/" includes="**/*.*"
                excludes="**/org/*.*,
                          **/domain/claims/ClaimType.java,
                          **/domain/claims/ClaimTypeImpl.java,
                          **/domain/catalog/atg/Logo.java,
                          **/domain/catalog/Size.java,
                          **/domain/catalog/SizeImpl.java,
                          **/domain/availability/SalesOrgWarehouseImpl.java,
                          **/domain/availability/WarehouseImpl.java,
                          **/domain/reference/ClaimReason.java,
                          **/domain/reference/ClaimType.java,
                          **/domain/reference/DefectiveReason.java"/>
            <fileset dir="${cc-view-name}/test-source/" includes="**/*.*"/>
            <!--<fileset dir="${cc-view-name}/app-config/" includes="**/*.*"/>-->
        </copy>
    </target>

    <target name="copy-cc-view-to-staging-omr7">
        <!-- Get the latest target source from clearcase -->
          <antcall target="clearcase-OMR7-view-update">
              <param name="target-view-name" value="${cc-view-name}"/>
          </antcall>

        <!-- make the comparison stage area so that we can copy the files for comparison -->
        <delete dir="${staging-folder-name}"/>
        <mkdir dir="${staging-folder-name}"/>

        <!-- copy comparison target src to a staging folder with flattened directory struture -->
        <!-- Exclude duplicate files so that we don't overwrite comparison target files incorrectly.  -->
        <!-- Most of our comparison target files come from common/reference folder. If similiar file name -->
        <!-- exist in other folders such as domain/common or domain/claims, we don't want to overwrite the -->
        <!-- legitimate file for comparison with identical file from different folder. We found that there -->
        <!-- are about ten files matching this criteria at this time and we are manually excluding them    -->
        <!-- from the copy process.  -->
        <!-- We are considering only the /source, /app-config, and /test-source folders from the target view -->
        <!-- for comparison. In the future if we have other potential folders those must be added here.  -->

        <copy todir="${staging-folder-name}" flatten="true" failonerror="true" preservelastmodified="true">
            <fileset dir="${cc-view-name}/source/java/" includes="**/*.*"
                excludes="**/org/*.*,
                          **/domain/claims/ClaimType.java,
                          **/domain/claims/ClaimTypeImpl.java,
                          **/domain/catalog/atg/Logo.java,
                          **/domain/catalog/Size.java,
                          **/domain/catalog/SizeImpl.java,
                          **/domain/availability/SalesOrgWarehouseImpl.java,
                          **/domain/availability/WarehouseImpl.java,
                          **/domain/reference/ClaimReason.java,
                          **/domain/reference/ClaimType.java,
                          **/domain/reference/DefectiveReason.java"/>
            <fileset dir="${cc-view-name}/source/test/" includes="**/*.*"/>
            <!--<fileset dir="${cc-view-name}/app/server-config/" includes="**/*.*"/>-->
        </copy>
    </target>

    <!-- Update the target view using clearcase specific task. -->
    <!-- Created a duplicate task for clearcase update as we want to update a clearcase view based on parameterized -->
    <!-- view name and as the existing update task operates using fixed property settings for the view name  -->

    <target name="clearcase-update-duplicate">
        <echo message="Updating the clearcase view ${target-view-name}"/>
        <ccupdate viewpath="${target-view-name}" graphical="false" log="${target-view-name}/clearcaseupdate.log"
                overwrite="true" preservetime="true" rename="false"/>
        <echo message="Clearcase update view ${target-view-name} completed."/>
    </target>

    <!-- Run the comparison process and generate appropriate reports using Beyond Compare.  -->
    <target name="generate-comparison-report">
        <exec executable="${beyond-compare-exe}" dir="${beyond-compare-home}">
            <arg value="@${beyond-compare-script}"/>
            <arg value="${comparison-source-dir}"/>
            <arg value="${comparison-dest-dir}"/>
            <arg value="${comparison-reports-dir}"/>
            <arg value="${comparison-report-key}"/>
        </exec>
    </target>

    <!-- Update the source and app-config folders only as the complete CC update of OMR view -->
    <!-- takes longer time -->
    <target name="clearcase-OMR6-view-update">
        <!--<antcall target="clearcase-update-duplicate">
            <param name="target-view-name" value="${target-view-name}/app-config"/>
        </antcall>-->
        <antcall target="clearcase-update-duplicate">
            <param name="target-view-name" value="${target-view-name}/source"/>
        </antcall>
        <antcall target="clearcase-update-duplicate">
            <param name="target-view-name" value="${target-view-name}/test-source"/>
        </antcall>

    </target>

    <!-- Update the source and app-config folders only as the complete CC update of OMR view -->
    <!-- takes longer time -->
    <target name="clearcase-OMR7-view-update">
        <!--<antcall target="clearcase-update-duplicate">
            <param name="target-view-name" value="${target-view-name}/app/server-config"/>
        </antcall>-->
        <antcall target="clearcase-update-duplicate">
            <param name="target-view-name" value="${target-view-name}/source/java"/>
        </antcall>
        <antcall target="clearcase-update-duplicate">
            <param name="target-view-name" value="${target-view-name}/source/test"/>
        </antcall>

    </target>

    <!-- Task to simply run the comparison process. Useful for hands on compare report generation -->
    <!-- coupled with hands on clearcase update/copy to staging. For example if you knew that -->
    <!-- you have the correct comparison targets available in the staging directory, you can  -->
    <!-- kick-off this task to generate comparison report based on current staging folder contents -->

    <target name="just-do-comparison" depends="comparison-setup">
        <antcall target="generate-comparison-report">
          <param name="comparison-report-key" value="Src-Dst-Comparison-Report"/>
        </antcall>
    </target>

    <!-- Temporary task to update given cc views so that we can avoid duplicate updates -->
    <!-- as it is a time consuming process -->
    <target name="temp-test">
        <antcall target="clearcase-OMR6-view-update">
            <param name="target-view-name" value="${clearcase.sharedview.name}"/>
        </antcall>
    </target>

   <!-- End changes for shared VOB comparison automation -->

    <!--
        This will run all Tests & TestCases in the global code base.
        If your class needs to find a file on the file system, app.root.dir is quite useful, as it points
        to the root of your project as defined in the properties file.
    -->
    <target name="global-unit-tests" depends="compile-all, emma" description="runs all the unit tests on global code">
        <antcall target="clean-unittest-report-dir" />
        <junit
            printsummary="on"
            haltonfailure="false"
            fork="yes"
            showoutput="true"
            failureproperty="test.failed"
            errorproperty="test.failed"
            >
            <sysproperty key="app.root.dir" value="${app.root.dir}"/>
            <sysproperty key="fromant" value="yep"/>
            <classpath path="${global.compile.out.dir}"/>
            <classpath refid="unittest.classpath"/>
            <classpath refid="emma.lib"/>

            <formatter type="xml" />
            <formatter type="brief" usefile="false"/>
            <jvmarg value="-Demma.coverage.out.file=${emma.coverage.file}"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
            <batchtest fork="yes" haltonerror="false" haltonfailure="false"   todir="${unittest.report.dir}">
                <fileset dir="${global.test.source.standalone.dir}">
                    <include name="**/*Test.java"/>
                    <include name="**/*TestCase.java"/>
                </fileset>
            </batchtest>
        </junit>

        <!-- Create a unit test report -->
        <junitreport todir="${unittest.report.dir}">
            <fileset dir = "${unittest.report.dir}" includes = "TEST-*.xml" />
            <report format="noframes" todir="${unittest.report.dir}"/>
        </junitreport>

        <!--<taskdef name="writeFailureFile" classname="net.nike.common.build.WriteFailureFile" classpath="${global.compile.out.dir}" />
        <writeFailureFile failuremessage="At least one global unit test failed." filename="${failure.file}" if="${test.failed}" />-->
    </target>

    <target name="clean-unittest-report-dir">
        <delete dir="${unittest.report.dir}" />
        <mkdir dir="${unittest.report.dir}" />
    </target>

    <!--Emma Stuff-->
    <property name="emma.dir" value="${lib.dir}/test"/>

    <path id="emma.lib">
        <pathelement location="${emma.dir}/emma.jar"/>
        <pathelement location="${emma.dir}/emma_ant.jar"/>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>

    <!--
        All you need to do is sandwich <java> (or your test framework driver,
        or anything that can run on Java classes) between EMMA's <instr> and <report>:
    -->
    <target name="emma" depends="init" description="turns on EMMA instrumentation/reporting">
        <property name="emma.enabled" value="true"/>
        <property name="emma.temp.dir" value="${basedir}/temp/emma"/>
        <property name="emma.coverage.file" value="${emma.report.dir}/coverage.ec"/>
        <property name="emma.meta.file" value="${emma.report.dir}/metadata.emma"/>
    </target>

    <target name="emma-global-unit-tests-instrument" depends="compile-all-clean, emma"
        description="determines the code coverage provided by the global unit tests">

        <delete file="${emma.coverage.file}"></delete>

        <delete file="${emma.meta.file}"></delete>

        <antcall target="emma-instrument"></antcall>

        <antcall target="emma-global-unit-tests"></antcall>

    </target>

    <target name="emma-global-unit-tests" depends="emma"
        description="determines the code coverage provided by the global unit tests">

        <antcall target="global-unit-tests"></antcall>

        <antcall target="emma-reports"></antcall>

    </target>

    <target name="emma-instrument">
        <emma enabled="${emma.enabled}">
            <instr instrpath="${global.compile.out.dir}"
                metadatafile="${emma.meta.file}"
                merge="true"
                mode="overwrite"
                >
                <filter
                    includes="net.nike.*"
                    excludes="*.*Test*, *.*Mock*, *.*Exception*, atg.*, net.nike.common.domain.*, *.*LocaleElements*, net.nike.common.sap.bapigenerator.*, net.nike.common.build.*, net.nike.common.sap.bor.*, *.Profiler.java, net.nike.common.profanity.*" />
            </instr>
        </emma>
    </target>

    <target name="emma-reports">

        <emma enabled="${emma.enabled}">
            <report>
                <sourcepath>
                    <dirset dir="${global.source.dir}" />
                    <dirset dir="${global.gensource.dir}" />
                </sourcepath>
                <fileset dir="${emma.report.dir}">
                    <include name="*.emma"/>
                    <include name="*.ec"/>
                </fileset>
                <txt outfile="${emma.report.dir}/coverage.txt"/>
                <html outfile="${emma.report.dir}/coverage.html"/>
            </report>
        </emma>
    </target>

    <target name="clean-emma-report-dir">
        <delete dir="${emma.report.dir}" />
        <mkdir dir="${emma.report.dir}" />
    </target>

</project>
