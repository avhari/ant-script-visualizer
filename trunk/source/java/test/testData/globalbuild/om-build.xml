<?xml version="1.0"?>
<!-- ================================================================ -->
<!-- nike.net build file                                         -->
<!-- Ant docs:  http://jakarta.apache.org/ant/manual/                 -->
<!-- ================================================================ -->
<project name="nikenet-om" basedir="." default="help">

    <!-- Access any environment variables -->
    <property environment="env"/>

    <!-- if the user has his own properties set then these will override
    anything else. The USERPROFILE on Windows is set
    to C:\Documents and Settings\USERNAME -->
    <property file="${env.USERPROFILE}/nikenetshared.properties"/>

    <!-- Default standard system build properties -->
    <property file="om-build.properties"/>

     <!-- global build properties -->
    <property file="global-build.properties"/>

     <!-- Utilizes the Ant task defined above to list the files in the fileset element. This list
               of files describe the files to be worked on by unix deploy script for search and replace. -->
    <taskdef name="list-files" classname="net.nike.common.build.ListFiles"
      classpath="${dist.dir}/published/nikenet-global.jar;${lib.dir}/apache/jakarta/commons/commons-collections.jar"/>

    <path id="compile.classpath">
        <path refid="dynamo.classpath"/>
        <path refid="lib.classpath"/>
        <path refid="ant.classpath"/>
    </path>

    <path id="unittest.classpath">
        <path refid="lib.classpath"/>
        <path refid="test.classpath"/>
        <path refid="ant.classpath"/>
        <path refid="dynamo.classpath"/>
    </path>

    <path id="lib.classpath">
        <pathelement location="${java.home.dir}/jre/lib/rt.jar"/>
        <pathelement location="${lib.dir}/apache/log4j-1.2.8.jar"/>
        <pathelement location="${lib.dir}/jaxb1/dom.jar"/>
        <pathelement location="${lib.dir}/jaxb1/sax.jar"/>
        <pathelement location="${lib.dir}/jaxb1/xercesImpl.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-beanutils.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-lang.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-pool.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-digester.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-collections.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/struts/struts.jar"/>
        <pathelement location="${lib.dir}/apache/jakarta/struts/struts-el.jar"/>
        <pathelement location="${lib.dir}/test/junit-3.8.1.jar"/>
        <pathelement location="${lib.dir}/sap/sapjco.jar"/>
        <pathelement location="${lib.dir}/servlet.jar"/>
        <pathelement location="${lib.dir}/xineo-xml-1.1.0.jar"/>
        <pathelement location="${lib.dir}/securetoken/nikeb2b_1c.jar"/>
         <pathelement location="${lib.dir}/egate/stcph.jar"/>
         <pathelement location="${lib.dir}/test/cactus-1.5.jar"/>
        <pathelement location="${compile.out.dir}/global"/>
        <pathelement location="${lib.dir}/jaxp/jaxp.jar"/>
    </path>

    <path id="test.classpath">
        <pathelement location="${om.compile.out.dir}"/>
        <pathelement location="${global.compile.out.dir}"/>
        <pathelement location="${global.example.app.config.dir}/classpath"/>
        <pathelement location="${om.example.app.config.dir}"/>
        <pathelement location="${om.app.config.dir}/classpath"/>
        <pathelement location="${lib.dir}/apache/jakarta/commons/commons-logging.jar"/>
        <pathelement location="${lib.dir}/test/aspectjrt-1.1.1.jar"/>
        <pathelement location="${lib.dir}/test/commons-httpclient-2.0.jar"/>
        <pathelement location="${lib.dir}/test"/>
        <pathelement location="${lib.dir}/oracle/classes12.zip"/>
    </path>

    <path id="dynamo.classpath">
        <pathelement location="${lib.dir}/atg/B2BCommerce/classes.jar"/>
        <pathelement location="${lib.dir}/atg//DAS/classes.jar"/>
        <pathelement location="${lib.dir}/atg//DCS/classes.jar"/>
        <pathelement location="${lib.dir}/atg//DPS/classes.jar"/>
        <pathelement location="${lib.dir}/atg//DSS/classes.jar"/>
    </path>

    <path id="ant.classpath">
        <pathelement location="${ant.home.dir}/lib/ant.jar"/>
        <pathelement location="${ant.home.dir}/lib/optional.jar"/>
    </path>

    <target name="help" depends="usage" description="Help on what targets are available"/>

    <target name="usage" description="Help on what targets are available">
        <echo message="Nike.net OM Shared Build Script:"/>
        <echo message=""/>
        <echo message="Possible targets are:"/>
        <echo message=""/>
        <echo message="        all           Build all tars for all environments and distribute."/>
        <echo message="        usage         This message of all possible targets."/>
        <echo message="        help          Same as usage."/>
        <echo message="        init          Initialize everything."/>
        <echo message="        compile       Compile source tree."/>
        <echo message="        compile-all   Compiles all om source trees (source and test-source)."/>
        <echo message="        compile-all-clean   Cleans out classes before running compile-all."/>
        <echo message="        jar-all       Create all the om shared jar files.  Look for them in dist/lib"/>
        <echo message="        clean         Cleans out all built classes, jars, and tars."/>
        <echo message="        junit         Run all junit tests under test_source."/>
    </target>

     <target name="make-jaxb-all-jar" unless="jaxb.all.jar.exist">
        <mkdir dir="${dist.jar.dir}"/>
        <unjar dest="${dist.jar.dir}" overwrite="true">
            <fileset dir="${lib.dir}/jaxb1">
                <include name="dom.jar"/>
                <include name="jaxb-impl.jar"/>
                <include name="jaxp-api.jar"/>
                <include name="sax.jar"/>
                <include name="xsdlib.jar"/>
                <include name="jax-qname.jar"/>
                <include name="jaxb-libs.jar"/>
                <include name="namespace.jar"/>
                <include name="xalan.jar"/>
                <include name="jaxb-api.jar"/>
                <include name="jaxb-xjc.jar"/>
                <include name="relaxngDatatype.jar"/>
                <include name="xercesImpl.jar"/>
            </fileset>
        </unjar>
        <jar destfile="${dist.dir}/lib/${big.jaxb.jar}" compress="false">
            <fileset dir="${dist.jar.dir}/"/>
        </jar>
        <delete dir="${dist.jar.dir}"/>
    </target>


    <target name="init" depends="make-dirs" description="Initializes all the variables needed for the build script">
        <tstamp>
            <format property="buildtime" pattern="yyyy-MM-dd'T'HH:mm:ss"/>
        </tstamp>
        <echo message="--------- ${ccproject.name} ---------"/>
        <echo message="Timestamp: ${buildtime}"/>
        <echo message="java.home = ${java.home}"/>
        <echo message="ant.java.version = ${ant.java.version}"/>
        <echo message="ant.version = ${ant.version}"/>
        <echo message="ant.project.name = ${ant.project.name}"/>
        <echo message="ant.file = ${ant.file}"/>
    </target>

    <target name="compile-all" depends="init,compile,compile-test" description="Compiles all source trees">
    </target>

    <target name="compile-all-clean" depends="clean,compile-all" description="Clean and compile all source"/>

    <!-- compile all source for shared om nike.net classes -->
    <target name="compile" depends="init" description="Compiles om source tree">
        <!-- make sure that global shared classes are compiled -->
        <ant antfile="global-build.xml" dir="." target="compile-all-clean" inheritAll="true"/>

        <!-- depend gives us greater control over dependencies in incremental builds -->
        <depend srcdir="${om.source.dir}" destdir="${om.compile.out.dir}"
            cache="${dist.dir}/dependencies" closure="true"/>
        <mkdir dir="${om.compile.out.dir}" />
        <javac
            destdir="${om.compile.out.dir}"
            includeAntRuntime="false"
            debug="${compile.debug}"
            debugLevel="${compile.debugLevel}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}">
            <src path="${om.source.dir}"></src>
            <classpath refid="compile.classpath"></classpath>
            <classpath refid="emma.lib" /> 
        </javac>
    </target>

    <!-- compile all test source for om shared nike.net classes -->
    <target name="compile-test" depends="compile" description="Compiles om test source tree.">
        <javac
            destdir="${om.compile.out.dir}"
            includeAntRuntime="true"
            debug="${compile.debug}"
            debugLevel="${compile.debugLevel}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            excludes="">
            <src path="${om.test.source.standalone.dir}"/>
            <src path="${om.test.source.incontainer.dir}"/>
            <classpath path="${om.compile.out.dir}"></classpath>
            <classpath refid="compile.classpath"></classpath>
        </javac>
    </target>

    <target name="jar-all" depends="compile-all-clean,jar-classes,jar-config,jar-src" description="Jars all om classes, config, and source files"/>

    <!-- jars all the om classes in the compileout.dir -->
    <target name="jar-classes" depends="compile-all,buildinfo" description="Jars the om source">
        <jar destfile="${dist.lib.dir}/${om.jar.file}"
            compress="false">
            <fileset dir="${om.compile.out.dir}" excludes="atg/adapter/gsa/Table.class"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
        <jar destfile="${dist.lib.dir}/${om.atgpatch.jar.file}"
            compress="false">
            <fileset dir="${om.compile.out.dir}" includes="atg/adapter/gsa/Table.class"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
    </target>

    <!-- jars all the om classes in the compileout.dir -->
    <target name="jar-config" depends="buildinfo" description="Jars the om config files">
        <jar destfile="${dist.lib.dir}/${om.jar.configpath.file}"
            compress="false">
            <fileset dir="${om.app.config.dir}/configpath"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
        <jar destfile="${dist.lib.dir}/${om.jar.classpath.file}"
            compress="false">
            <fileset dir="${om.app.config.dir}/classpath"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>

    </target>

    <target name="jar-src" depends="buildinfo" description="Jars all the om source code files">
        <jar destfile="${dist.lib.dir}/${om.src.jar.file}"
            compress="false">
            <fileset dir="${om.source.dir}"/>
            <fileset dir="${om.test.source.incontainer.dir}"/>
            <fileset dir="${om.test.source.standalone.dir}"/>
            <fileset dir="${dist.dir}">
                <include name="${buildinfo}"/>
            </fileset>
        </jar>
    </target>


    <target name="tar-all-drps" description="Creates all the drp tarballs">
        <antcall target="tar-drp2"/>
        <antcall target="tar-drp4"/>
        <antcall target="tar-drp-bu"/>
        <antcall target="tar-drp4-lm"/>
    </target>

    <target name="tar-init" depends="init,buildinfo" description="Initializes the build for tar file creation">
        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${tar.staging.dir}"/>
        <mkdir dir="${tar.staging.dir}/nike-deploy"/>
        <copy file="${dist.dir}/${buildinfo}" todir="${tar.staging.dir}/nike-deploy"/>
    </target>


    <!-- Create the drp2 tarball -->
    <target name="tar-drp2" depends="clean, tar-init" description="Creates the drp2 deploy tarball">

        <!-- make a copy of all the drp-2 files, put them in the tar staging dir -->
        <copy todir="${tar.staging.dir}/config" overwrite="true">
        <fileset dir="${drp.config.common.dir}">
          <exclude name="**/*.jar"/>
        </fileset>
        <fileset dir="${drp2.config.dir}">
          <exclude name="**/*.jar"/>
        </fileset>
      </copy>

         <!-- make a copy of all the global classpath config files, put them in the tar staging dir-->
        <copy todir="${tar.staging.dir}/config/classpath" overwrite="true">
            <fileset dir="${global.app.config.dir}/classpath"/>
       </copy>

        <!-- make a copy of all the shared om configpath config files, put them in the tar staging dir-->
        <copy todir="${tar.staging.dir}/config/localconfig" overwrite="true">
            <fileset dir="${om.app.config.dir}/configpath"/>
       </copy>

        <!-- make a copy of all the shared om classpath config files, put them in the tar staging dir-->
        <copy todir="${tar.staging.dir}/config/classpath" overwrite="true">
            <fileset dir="${om.app.config.dir}/classpath"/>
       </copy>
        
        <!-- copy all the libs for drp-2 to the tar staging dir -->
        <copy todir="${tar.staging.dir}/lib" flatten="true">
             <fileset dir="${lib.dir}">
                <include name="apache/jakarta/commons/*.jar"/>
                <include name="apache/log4j*.jar"/>
                <include name="oracle/*.zip"/>
                <include name="patches/*.jar"/>
                <include name="shared/*.jar"/>
                <include name="jaxb1/jaxb-all.jar"/>
                <include name="xineo*.jar"/>
                <include name="egate/*.jar"/>
                <include name="test/*.jar"/>
                <include name="sap/**"/>
            </fileset>
        </copy>
        <copy todir="${tar.staging.dir}/lib" flatten="true">
            <fileset dir="${dist.dir}/published">
                <include name="nikenet-global.jar"/>
                <include name="nikenet-atgpatch.jar"/>
                <include name="nikenet-om.jar"/>
          </fileset>
       </copy>

       <!-- create the substitutions.txt for the drp-4 tarball -->
        <list-files listfile="${tar.staging.dir}/nike-deploy/substitutions.txt">
           <fileset dir="${tar.staging.dir}/config">
             <exclude name="**/*.keep"/>
             <exclude name="**/*.contrib"/>
             <include name="localconfig/**"/>
             <include name="classpath/**"/>
           </fileset>
        </list-files>

         <!-- convert all the text files in the tar staging dir from using CRLF to LF -->
        <fixcrlf srcdir="${tar.staging.dir}"
        eol="lf"
        eof="remove"
        excludes="**/*.class,**/*.zip,**/*.jar,**/*.gif,**/*.key,**/*.ser,**/*.so"/>

           <!-- create the tarball -->
        <tar tarfile="${drp2.tar.file}"
            longfile="warn"
            compression="gzip">
            <!-- config files -->
            <tarfileset dir="${tar.staging.dir}/config" mode="755">
                <include name="**/**"/>
            </tarfileset>
            <!-- 3rd party libs -->
            <tarfileset dir="${tar.staging.dir}/lib"
                      prefix="lib"
                      mode="755"
                      preserveLeadingSlashes="true">
                <include name="**/**"/>
           </tarfileset>
             <!-- nikenet shared libs -->
             <tarfileset dir="${dist.dir}"
                      prefix="lib"
                      mode="755"
                      preserveLeadingSlashes="true">
            <include name="nikenet-global.jar"/>
            <include name="nikenet-atgpatch.jar"/>
            <include name="nikenet-om.jar"/>
          </tarfileset>
            <!-- nike-deploy dir -->
            <tarfileset dir="${tar.staging.dir}" mode="755">
                <include name="nike-deploy/**"/>
          </tarfileset>
        </tar>
    </target>

  <!-- Create the drp-4 tarball -->
  <target name="tar-drp4" depends="clean,tar-init" description="Create the drp-4 tarball">

      <unjar dest="${tar.staging.dir}/config/localconfig">
          <fileset dir="${dist.dir}/published" >
              <include name="nikenet-om-configpath.jar"/>
          </fileset>
      </unjar>
      <copy todir="${tar.staging.dir}/config" overwrite="true">
        <fileset dir="${drp.config.common.dir}">
          <exclude name="**/*.jar"/>
        </fileset>
        <fileset dir="${drp4.config.dir}">
          <exclude name="**/*.jar"/>
        </fileset>
      </copy>

    <!-- create the substitutions.txt for the drp-4 tarball -->
    <list-files listfile="${tar.staging.dir}/nike-deploy/substitutions.txt">
       <fileset dir="${tar.staging.dir}/config">
         <exclude name="**/*.keep"/>
         <exclude name="**/*.contrib"/>
         <include name="localconfig/**"/>
         <include name="pagebuild/**"/>
         <include name="logs/**"/>
       </fileset>
    </list-files>

         <!-- convert all the text files in the tar staging dir from using CRLF to LF -->
        <fixcrlf srcdir="${tar.staging.dir}"
        eol="lf"
        eof="remove"
        excludes="**/*.class,**/*.zip,**/*.jar,**/*.gif,**/*.key,**/*.ser"/>

     <!-- create the tarball -->
      <tar tarfile="${drp4.tar.file}"
          longfile="warn"
          compression="gzip">
          <tarfileset dir="${tar.staging.dir}/config" mode="755">
              <exclude name="**/*.keep"/>
              <exclude name="**/*.contrib"/>
              <include name="localconfig/**"/>
              <include name="logs/**"/>
              <include name="j2ee/**"/>
              <include name="data/**"/>
              <include name="classpath/**"/>
          </tarfileset>
          <tarfileset dir="${tar.staging.dir}" mode="755">
            <include name="nike-deploy/**"/>
          </tarfileset>
          <!-- add the libraries to the drp build -->
          <tarfileset dir="${lib.dir}"
                      prefix="lib"
                      mode="755"
                      preserveLeadingSlashes="true">
            <include name="apache/log4j-1.2.8.jar"/>
            <include name="jaxb1/xercesImpl.jar"/>
            <include name="jce/jce1_2_2.jar" />
            <include name="jce/local_policy.jar" />
            <include name="jce/sunjce_provider.jar" />
            <include name="jce/US_export_policy.jar" />
            <include name="oracle/classes12.zip"/>
            <include name="patches/PR75353_PR77428_610p1_v2.jar"/>
            <include name="sap/librfccm.so"/>
            <include name="sap/libsapjcorfc.so"/>
            <include name="sap/sapjco.jar"/>
          </tarfileset>
          <tarfileset dir="${dist.dir}/published"
                      prefix="lib/shared"
                      mode="755"
                      preserveLeadingSlashes="true">
             <include name="nikenet-atgpatch.jar"/>
          </tarfileset>
      </tar>
  </target>

 <!-- Copying the tar file to the Shared drive
      NOTE: this doesn't have a build tag on the directory because
      we dont rev the drp changes but instead the common jar changes. -->
    <target name="distribute" depends="tar-all-drps">
        <delete dir="${drp.distribution.dir}"/>
        <mkdir dir="${drp.distribution.dir}"/>
        <copy todir="${drp.distribution.dir}" failonerror="true">
            <fileset dir="${dist.dir}" includes="*.tar.gz"/>
        </copy>
    </target>


    <target name="tar-drp-bu" depends="clean,tar-init" description="Creates the backup (bu) drp deploy tarball">

        <!-- make a copy of all the drp-bu files, put them in the tar staging dir -->
       <copy todir="${tar.staging.dir}/config" overwrite="true">
          <fileset dir="${drp.config.common.dir}">
               <exclude name="**/*.keep"/>
               <exclude name="**/*.contrib"/>
               <include name="localconfig/**"/>
           </fileset>
           <fileset dir="${drp-bu.config.dir}">
               <exclude name="**/*.keep"/>
               <exclude name="**/*.contrib"/>
               <include name="localconfig/**"/>
               <include name="data/**"/>
           </fileset>
       </copy>

       <!-- create the substitutions.txt for the drp-bu tarball -->
    <list-files listfile="${tar.staging.dir}/nike-deploy/substitutions.txt">
       <fileset dir="${tar.staging.dir}/config">
         <exclude name="**/*.keep"/>
         <exclude name="**/*.contrib"/>
         <include name="localconfig/**"/>
         <include name="data/**"/>
       </fileset>
    </list-files>

         <!-- convert all the text files in the tar staging dir from using CRLF to LF -->
        <fixcrlf srcdir="${tar.staging.dir}"
        eol="lf"
        eof="remove"
        excludes="**/*.class,**/*.zip,**/*.jar,**/*.gif,**/*.key,**/*.ser"/>

           <!-- create the tarball -->
        <tar tarfile="${drp-bu.tar.file}"
            longfile="warn"
            compression="gzip">
            <tarfileset dir="${app.root.dir}" mode="755">
                <include name="lib/oracle/**"/>
            </tarfileset>
            <tarfileset dir="${dist.dir}/published"
                      prefix="lib/shared"
                      mode="755"
                      preserveLeadingSlashes="true">
             <include name="nikenet-atgpatch.jar"/>
          </tarfileset>
            <tarfileset dir="${tar.staging.dir}/config" mode="755">
                <include name="**/**"/>
            </tarfileset>
             <tarfileset dir="${tar.staging.dir}" mode="755">
                <include name="nike-deploy/**"/>
          </tarfileset>
        </tar>
    </target>


    <target name="tar-drp4-lm" depends="clean,tar-init"  description="Creates the load manager drp4 deploy tarball">

      <!-- make a copy of all the drp1-lm files, put them in the tar staging dir -->
       <copy todir="${tar.staging.dir}/config" overwrite="true">
          <fileset dir="${drp.config.common.dir}">
               <exclude name="**/*.keep"/>
               <exclude name="**/*.contrib"/>
               <include name="localconfig/**"/>
               <include name="logs/**"/>
           </fileset>
           <fileset dir="${drp4-lm.config.dir}">
               <exclude name="**/*.keep"/>
               <exclude name="**/*.contrib"/>
               <include name="localconfig/**"/>
               <include name="data/**"/>
           </fileset>
       </copy>

        <!-- create the substitutions.txt for the drp-bu tarball -->
    <list-files listfile="${tar.staging.dir}/nike-deploy/substitutions.txt">
       <fileset dir="${tar.staging.dir}/config">
         <exclude name="**/*.keep"/>
         <exclude name="**/*.contrib"/>
         <include name="localconfig/**"/>
         <include name="data/**"/>
       </fileset>
    </list-files>

         <!-- convert all the text files in the tar staging dir from using CRLF to LF -->
        <fixcrlf srcdir="${tar.staging.dir}/config"
        eol="lf"
        eof="remove"
        excludes="**/*.class,**/*.zip,**/*.jar,**/*.gif,**/*.key,**/*.ser"/>

         <!-- create the tarball -->
        <tar tarfile="${drp4-lm.tar.file}"
            longfile="warn"
            compression="gzip">
            <tarfileset dir="${app.root.dir}" mode="755">
                <include name="lib/oracle/**"/>
            </tarfileset>
            <tarfileset dir="${dist.dir}/published"
                      prefix="lib/shared"
                      mode="755"
                      preserveLeadingSlashes="true">
             <include name="nikenet-atgpatch.jar"/>
          </tarfileset>
            <tarfileset dir="${tar.staging.dir}/config" mode="755">
                <include name="**/**"/>
            </tarfileset>
             <tarfileset dir="${tar.staging.dir}" mode="755">
                <include name="nike-deploy/**"/>
          </tarfileset>
        </tar>
    </target>

    <!-- clean up stuff created from our build -->
    <target name="clean" depends="delete-dirs,make-dirs" description="Cleans all the unnecessary files"/>

    <target name="delete-dirs" description="Deletes directories for the build cleanup task">
        <echo message="Deleting output directories"/>
        <delete dir="${om.compile.out.dir}" failonerror="true" includeEmptyDirs="true"/>
        <delete dir="${tar.staging.dir}" failonerror="true" includeEmptyDirs="true"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${dist.dir}/lib" includes="**/*"/>
        </delete>
    </target>

    <target name="make-dirs" description="Makes the directories that are needed for the build">
           <mkdir dir="${om.compile.out.dir}"/>
           <mkdir dir="${dist.dir}"/>
           <mkdir dir="${dependencies.dir}"/>
           <mkdir dir="${dist.lib.dir}"/>
       </target>

     <!-- Create the build's info file and read its results into properties. -->
    <target name="buildinfo" depends="compile" description="Creates a build info file">
        <!-- Collect baseline data from clearcase. -->
        <exec executable="C:\Program Files\Rational\Clearcase\bin\cleartool"
            os="Windows 2000"
            output="${baselinefile}">
            <arg value="lsbl"/>
            <arg value="-fmt"/>
            <arg value="%n\t%Fu\t%d\n"/>
            <arg value="-stream"/>
            <arg value="${baselinestream}"/>
        </exec>
        <java classname="net.nike.common.build.BaselineReader">
            <arg value="${dist.dir}/"/>
            <arg value="${buildinfo}"/>
            <arg value="${app.root.dir}/build/${baselinefile}"/>
            <classpath path="${compile.out.dir}/global"/>
            <classpath path="${ant.home.dir}/lib/ant.jar"/>
            <classpath path="${ant.home.dir}/lib/optional.jar"/>
        </java>
        <property file="${dist.dir}/${buildinfo}"/>
    </target>


    <!--
        This will run all Tests & TestCases in the common code base.
        If your class needs to find a file on the file system, app.root.dir is quite useful, as it points
        to the root of your project as defined in the properties file.
    -->
    <target name="om-unit-tests" description="runs all the unit tests on om common code">
        <antcall target="run-incontainer-tests" />
        <antcall target="run-standalone-tests" />
        <antcall target="om-unit-test-report" />
    </target>

    <target name="om-unit-test-report">
        <junitreport todir="${unittest.report.dir}">
            <fileset dir = "${unittest.report.dir}" includes = "TEST-*.xml" />
            <report format="noframes" todir="${unittest.report.dir}"/>
        </junitreport>
    </target>

    <target name="clean-unittest-report-dir">
        <delete dir="${unittest.report.dir}" />
        <mkdir dir="${unittest.report.dir}" />
    </target>

    <target name="om-tests-deploy"
        description="deploys everything needed to run om tests"
        >
        <ant antfile="om-windev-deploy.xml" target="deploy-drp-test" inheritAll="false"/>
        <ant antfile="om-windev-deploy.xml" target="deploy-nike-test" inheritAll="false"/>
        <antcall target="copy-classes-for-incontainer-tests" />
    </target>


    <target name="run-standalone-tests" depends="emma">
        <junit
            printsummary="on"
            haltonfailure="false"
            fork="yes"
            showoutput="true"
            failureproperty="test.failed"
            errorproperty="test.failed"
            >
            <sysproperty key="app.root.dir" value="${app.root.dir}"/>
            <sysproperty key="fromant" value="yep"/>
            <classpath path="${om.compile.out.dir}"/>
            <classpath refid="unittest.classpath"/>
            <classpath refid="emma.lib"/>

            <formatter type="xml" />
            <formatter type="brief" usefile="false"/>
            <jvmarg value="-Demma.coverage.out.file=${emma.coverage.file}"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
            <batchtest fork="yes" haltonerror="false" haltonfailure="false"   todir="${unittest.report.dir}">
                <fileset dir="${om.test.source.standalone.dir}">
                    <include name="**/*Test.java"/>
                    <include name="**/*TestCase.java"/>

                </fileset>
            </batchtest>
        </junit>

        <!--<taskdef name="writeFailureFile" classname="net.nike.common.build.WriteFailureFile" classpath="${global.compile.out.dir}" />

        <writeFailureFile failuremessage="At least one om standalone test failed." filename="${failure.file}" if="${test.failed}" />-->
    </target>

    <target name="copy-classes-for-incontainer-tests" description="Copy out the exploded shared class files " >
        <copy todir="${test.webinf.classes.dir}" overwrite="true">
            <fileset dir="${global.compile.out.dir}" />
            <fileset dir="${om.compile.out.dir}">
                <exclude name="atg/**" />
            </fileset>
            <fileset file="${emma.dir}/emma.properties" />
        </copy>
    </target>

    <target name="run-incontainer-tests" depends="emma">
        <antcall target="start-om-test-drp" />
        <antcall target="incontainer-tests-bare"/>
        <antcall target="kill-om-test-drp"/>
    </target>

    <target name="incontainer-tests-bare" depends="emma">
        <junit
            printsummary="on"
            haltonfailure="false"
            fork="yes"
            showoutput="true"
            failureproperty="test.failed"
            errorproperty="test.failed"
            >
            <sysproperty key="app.root.dir" value="${app.root.dir}"/>
            <sysproperty key="fromant" value="yep"/>
            <classpath path="${om.compile.out.dir}"/>
            <classpath refid="unittest.classpath"/>
            <classpath refid="emma.lib"/>

            <formatter type="xml" />
            <formatter type="brief" usefile="false"/>
            <jvmarg value="-Demma.coverage.out.file=${emma.coverage.file}"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
            <batchtest fork="yes" haltonerror="false" haltonfailure="false"   todir="${unittest.report.dir}">
                <fileset dir="${om.test.source.incontainer.dir}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/NikeServletTest*.java"/>
                    <exclude name="**/UserTestUtilities.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junit printsummary="off" haltonfailure="false" fork="true" showoutput="false">
            <classpath path="${om.compile.out.dir}"/>
            <classpath refid="unittest.classpath"/>
            <classpath refid="emma.lib"/>
            <jvmarg value="-Demma.coverage.out.file=${emma.coverage.file}"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
            <test name="net.nike.om.common.build.FlushEmmaCoverage" haltonerror="false"  haltonfailure="false" fork="no" />
        </junit>

        <!--<taskdef name="writeFailureFile" classname="net.nike.common.build.WriteFailureFile" classpath="${global.compile.out.dir}" />
        <writeFailureFile failuremessage="At least one om incontainer test failed." filename="${failure.file}" if="${test.failed}" />-->
    </target>

    <target name="start-om-test-drp" >
        <taskdef name="startDynamo" classname="net.nike.common.build.StartDynamo" classpath="${global.compile.out.dir}" />
        <startDynamo maxTimeInMinutes="15" startFile="${dynamo.start.file}" drp="drp-test"/>
        <echo message="nucleus is running"></echo>
    </target>

    <target name="kill-om-test-drp" >
        <get src="http://localhost:8835/nucleus/?op=shutdown" dest="shutdown_results.txt" username="admin" password="admin"/>
    </target>

    <!--Emma Stuff-->
    <property name="emma.dir" value="${lib.dir}/test"/>

    <path id="emma.lib">
        <pathelement location="${emma.dir}/emma.jar"/>
        <pathelement location="${emma.dir}/emma_ant.jar"/>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>

    <!--
        All you need to do is sandwich <java> (or your test framework driver,
        or anything that can run on Java classes) between EMMA's <instr> and <report>:
    -->
    <target name="emma" depends="init" description="turns on EMMA instrumentation/reporting">
        <property name="emma.enabled" value="true"/>
        <property name="emma.coverage.file" value="${atg.module.root.dir}/coverage.ec"/>
        <property name="emma.meta.file" value="${emma.report.dir}/metadata.emma"/>
    </target>

    <target name="emma-om-unit-tests" depends="emma"
        description="determines the code coverage provided by the om unit tests">

        <antcall target="om-tests-deploy"></antcall>

        <antcall target="om-unit-tests"></antcall>

        <antcall target="emma-report"></antcall>

        <fail message="At least one unit test failed." if="test.failed"/>
    </target>

    <target name="emma-om-unit-tests-instrument" depends="compile-all-clean, emma"
        description="determines the code coverage provided by the om unit tests">

        <delete file="${emma.coverage.file}"></delete>

        <delete file="${emma.meta.file}"></delete>

        <antcall target="emma-instrument"></antcall>

        <antcall target="emma-om-unit-tests"></antcall>

        <fail message="At least one unit test failed." if="test.failed"/>
    </target>

    <target name="emma-instrument" depends="emma" >
        <emma enabled="${emma.enabled}">
            <instr instrpath="${global.compile.out.dir}"
                metadatafile="${emma.meta.file}"
                merge="true"
                mode="overwrite"
                >
                <filter includes="net.nike.common.domain.*, net.nike.common.profanity.*" excludes="*.*Test*, *.*Mock*, *.*Exception*, atg.*" />
            </instr>
        </emma>
        <emma enabled="${emma.enabled}">
            <instr instrpath="${om.compile.out.dir}"
                metadatafile="${emma.meta.file}"
                merge="true"
                mode="overwrite"
                >
                <filter includes="net.nike.*" excludes="*.*Test*, *.*Mock*, *.*Exception*, atg.*, *.FlushEmma*, *.NikeLocale*" />
            </instr>
        </emma>
    </target>

    <target name="emma-report" depends="emma" >
        <emma enabled="${emma.enabled}">
            <report>
                <sourcepath>
                    <dirset dir="${om.source.dir}" />
                </sourcepath>
                <fileset dir="${emma.report.dir}">
                    <include name="*.emma"/>
                </fileset>
                <fileset dir="${atg.module.root.dir}">
                    <include name="coverage.ec"/>
                </fileset>
                <txt outfile="${emma.report.dir}/coverage.txt"/>
                <html outfile="${emma.report.dir}/coverage.html"/>
            </report>
        </emma>
    </target>

</project>
